<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>libting: Semaphore.hpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">libting
   &#160;<span id="projectnumber">2.0.0</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.htm"><span>File&#160;List</span></a></li>
      <li><a href="globals.htm"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('Semaphore_8hpp.htm','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">Semaphore.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="Semaphore_8hpp.htm">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* The MIT License:</span>
<a name="l00002"></a>00002 <span class="comment"></span>
<a name="l00003"></a>00003 <span class="comment">Copyright (c) 2008-2012 Ivan Gagis &lt;igagis@gmail.com&gt;</span>
<a name="l00004"></a>00004 <span class="comment"></span>
<a name="l00005"></a>00005 <span class="comment">Permission is hereby granted, free of charge, to any person obtaining a copy</span>
<a name="l00006"></a>00006 <span class="comment">of this software and associated documentation files (the &quot;Software&quot;), to deal</span>
<a name="l00007"></a>00007 <span class="comment">in the Software without restriction, including without limitation the rights</span>
<a name="l00008"></a>00008 <span class="comment">to use, copy, modify, merge, publish, distribute, sublicense, and/or sell</span>
<a name="l00009"></a>00009 <span class="comment">copies of the Software, and to permit persons to whom the Software is</span>
<a name="l00010"></a>00010 <span class="comment">furnished to do so, subject to the following conditions:</span>
<a name="l00011"></a>00011 <span class="comment"></span>
<a name="l00012"></a>00012 <span class="comment">The above copyright notice and this permission notice shall be included in</span>
<a name="l00013"></a>00013 <span class="comment">all copies or substantial portions of the Software.</span>
<a name="l00014"></a>00014 <span class="comment"></span>
<a name="l00015"></a>00015 <span class="comment">THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span>
<a name="l00016"></a>00016 <span class="comment">IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span>
<a name="l00017"></a>00017 <span class="comment">FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span>
<a name="l00018"></a>00018 <span class="comment">AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span>
<a name="l00019"></a>00019 <span class="comment">LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span>
<a name="l00020"></a>00020 <span class="comment">OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN</span>
<a name="l00021"></a>00021 <span class="comment">THE SOFTWARE. */</span>
<a name="l00022"></a>00022 
<a name="l00023"></a>00023 <span class="comment">// Home page: http://ting.googlecode.com</span>
<a name="l00024"></a>00024 
<a name="l00025"></a>00025 
<a name="l00026"></a>00026 
<a name="l00032"></a>00032 <span class="preprocessor">#pragma once</span>
<a name="l00033"></a>00033 <span class="preprocessor"></span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &quot;../config.hpp&quot;</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &quot;../debug.hpp&quot;</span>
<a name="l00036"></a>00036 <span class="preprocessor">#include &quot;../types.hpp&quot;</span>
<a name="l00037"></a>00037 <span class="preprocessor">#include &quot;../Exc.hpp&quot;</span>
<a name="l00038"></a>00038 
<a name="l00039"></a>00039 
<a name="l00040"></a>00040 <span class="preprocessor">#if M_OS == M_OS_WINDOWS</span>
<a name="l00041"></a>00041 <span class="preprocessor"></span>
<a name="l00042"></a>00042 <span class="comment">//if _WINSOCKAPI_ macro is not defined then it means that the winsock header file</span>
<a name="l00043"></a>00043 <span class="comment">//has not been included. Here we temporarily define the macro in order to prevent</span>
<a name="l00044"></a>00044 <span class="comment">//inclusion of winsock.h from within the windows.h. Because it may later conflict with</span>
<a name="l00045"></a>00045 <span class="comment">//winsock2.h if it is included later.</span>
<a name="l00046"></a>00046 <span class="preprocessor">#       ifndef _WINSOCKAPI_</span>
<a name="l00047"></a>00047 <span class="preprocessor"></span><span class="preprocessor">#               define _WINSOCKAPI_</span>
<a name="l00048"></a>00048 <span class="preprocessor"></span><span class="preprocessor">#               include &lt;windows.h&gt;</span>
<a name="l00049"></a>00049 <span class="preprocessor">#               undef _WINSOCKAPI_</span>
<a name="l00050"></a>00050 <span class="preprocessor"></span><span class="preprocessor">#       else</span>
<a name="l00051"></a>00051 <span class="preprocessor"></span><span class="preprocessor">#               include &lt;windows.h&gt;</span>
<a name="l00052"></a>00052 <span class="preprocessor">#       endif</span>
<a name="l00053"></a>00053 <span class="preprocessor"></span>
<a name="l00054"></a>00054 <span class="comment">//TODO:</span>
<a name="l00055"></a>00055 <span class="comment">//#     include &lt;process.h&gt;</span>
<a name="l00056"></a>00056 
<a name="l00057"></a>00057 <span class="preprocessor">#elif M_OS == M_OS_SYMBIAN</span>
<a name="l00058"></a>00058 <span class="preprocessor"></span><span class="preprocessor">#       include &lt;string.h&gt;</span>
<a name="l00059"></a>00059 <span class="preprocessor">#       include &lt;e32std.h&gt;</span>
<a name="l00060"></a>00060 <span class="preprocessor">#       include &lt;hal.h&gt;</span>
<a name="l00061"></a>00061 
<a name="l00062"></a>00062 <span class="preprocessor">#elif M_OS == M_OS_LINUX || M_OS == M_OS_MACOSX || M_OS == M_OS_SOLARIS</span>
<a name="l00063"></a>00063 <span class="preprocessor"></span><span class="preprocessor">#       include &lt;semaphore.h&gt;</span>
<a name="l00064"></a>00064 <span class="preprocessor">#       include &lt;errno.h&gt;</span>
<a name="l00065"></a>00065 
<a name="l00066"></a>00066 <span class="preprocessor">#else</span>
<a name="l00067"></a>00067 <span class="preprocessor"></span><span class="preprocessor">#       error &quot;Unsupported OS&quot;</span>
<a name="l00068"></a>00068 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00069"></a>00069 <span class="preprocessor"></span>
<a name="l00070"></a>00070 
<a name="l00071"></a>00071 
<a name="l00072"></a>00072 <span class="keyword">namespace </span>ting{
<a name="l00073"></a>00073 <span class="keyword">namespace </span>mt{
<a name="l00074"></a>00074 
<a name="l00075"></a>00075 
<a name="l00076"></a>00076 
<a name="l00087"></a><a class="code" href="classting_1_1mt_1_1Semaphore.htm">00087</a> <span class="keyword">class </span><a class="code" href="classting_1_1mt_1_1Semaphore.htm" title="Semaphore class.">Semaphore</a>{
<a name="l00088"></a>00088         <span class="comment">//system dependent handle</span>
<a name="l00089"></a>00089 <span class="preprocessor">#if M_OS == M_OS_WINDOWS</span>
<a name="l00090"></a>00090 <span class="preprocessor"></span>        HANDLE s;
<a name="l00091"></a>00091 <span class="preprocessor">#elif M_OS == M_OS_SYMBIAN</span>
<a name="l00092"></a>00092 <span class="preprocessor"></span>        RSemaphore s;
<a name="l00093"></a>00093 <span class="preprocessor">#elif M_OS == M_OS_MACOSX</span>
<a name="l00094"></a>00094 <span class="preprocessor"></span>        <span class="comment">//TODO: consider using the MPCreateSemaphore</span>
<a name="l00095"></a>00095         sem_t *s;
<a name="l00096"></a>00096 <span class="preprocessor">#elif M_OS == M_OS_LINUX</span>
<a name="l00097"></a>00097 <span class="preprocessor"></span>        sem_t s;
<a name="l00098"></a>00098 <span class="preprocessor">#else</span>
<a name="l00099"></a>00099 <span class="preprocessor"></span><span class="preprocessor">#       error &quot;unknown OS&quot;</span>
<a name="l00100"></a>00100 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00101"></a>00101 <span class="preprocessor"></span>
<a name="l00102"></a>00102         <span class="comment">//forbid copying</span>
<a name="l00103"></a>00103         <a class="code" href="classting_1_1mt_1_1Semaphore.htm" title="Semaphore class.">Semaphore</a>(<span class="keyword">const</span> <a class="code" href="classting_1_1mt_1_1Semaphore.htm" title="Semaphore class.">Semaphore</a>&amp; );
<a name="l00104"></a>00104         <a class="code" href="classting_1_1mt_1_1Semaphore.htm" title="Semaphore class.">Semaphore</a>&amp; operator=(<span class="keyword">const</span> <a class="code" href="classting_1_1mt_1_1Semaphore.htm" title="Semaphore class.">Semaphore</a>&amp; );
<a name="l00105"></a>00105     
<a name="l00106"></a>00106 <span class="keyword">public</span>:
<a name="l00107"></a>00107 
<a name="l00111"></a>00111         <a class="code" href="classting_1_1mt_1_1Semaphore.htm" title="Semaphore class.">Semaphore</a>(<span class="keywordtype">unsigned</span> initialValue = 0);
<a name="l00112"></a>00112 
<a name="l00113"></a>00113         <a class="code" href="classting_1_1mt_1_1Semaphore.htm#ac0c0f83f1587520356b11d8ce89c4bdb">~Semaphore</a>()<span class="keywordflow">throw</span>();
<a name="l00114"></a>00114 
<a name="l00115"></a>00115         
<a name="l00122"></a><a class="code" href="classting_1_1mt_1_1Semaphore.htm#a5178478afba9f84d73a49e158590ea0a">00122</a>         <span class="keywordtype">void</span> <a class="code" href="classting_1_1mt_1_1Semaphore.htm#a5178478afba9f84d73a49e158590ea0a" title="Wait on semaphore.">Wait</a>(){
<a name="l00123"></a>00123 <span class="preprocessor">#if M_OS == M_OS_WINDOWS</span>
<a name="l00124"></a>00124 <span class="preprocessor"></span>                <span class="keywordflow">switch</span>(WaitForSingleObject(this-&gt;s, DWORD(INFINITE))){
<a name="l00125"></a>00125                         <span class="keywordflow">case</span> WAIT_OBJECT_0:
<a name="l00126"></a>00126 <span class="comment">//                              TRACE(&lt;&lt; &quot;Semaphore::Wait(): exit&quot; &lt;&lt; std::endl)</span>
<a name="l00127"></a>00127                                 <span class="keywordflow">break</span>;
<a name="l00128"></a>00128                         <span class="keywordflow">case</span> WAIT_TIMEOUT:
<a name="l00129"></a>00129                                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(<span class="keyword">false</span>)
<a name="l00130"></a>00130                                 <span class="keywordflow">break</span>;
<a name="l00131"></a>00131                         <span class="keywordflow">default</span>:
<a name="l00132"></a>00132                                 <span class="keywordflow">throw</span> <a class="code" href="classting_1_1Exc.htm" title="Basic exception class.">ting::Exc</a>(<span class="stringliteral">&quot;Semaphore::Wait(): wait failed&quot;</span>);
<a name="l00133"></a>00133                                 <span class="keywordflow">break</span>;
<a name="l00134"></a>00134                 }
<a name="l00135"></a>00135 <span class="preprocessor">#elif M_OS == M_OS_SYMBIAN</span>
<a name="l00136"></a>00136 <span class="preprocessor"></span>                this-&gt;s.Wait();
<a name="l00137"></a>00137 <span class="preprocessor">#elif M_OS == M_OS_MACOSX</span>
<a name="l00138"></a>00138 <span class="preprocessor"></span>                <span class="keywordtype">int</span> retVal = 0;
<a name="l00139"></a>00139 
<a name="l00140"></a>00140                 <span class="keywordflow">do</span>{
<a name="l00141"></a>00141                         retVal = sem_wait(this-&gt;s);
<a name="l00142"></a>00142                 }<span class="keywordflow">while</span>(retVal == -1 &amp;&amp; errno == EINTR);
<a name="l00143"></a>00143 
<a name="l00144"></a>00144                 <span class="keywordflow">if</span>(retVal &lt; 0){
<a name="l00145"></a>00145                         <span class="keywordflow">throw</span> <a class="code" href="classting_1_1Exc.htm" title="Basic exception class.">ting::Exc</a>(<span class="stringliteral">&quot;Semaphore::Wait(): wait failed&quot;</span>);
<a name="l00146"></a>00146                 }
<a name="l00147"></a>00147 <span class="preprocessor">#elif M_OS == M_OS_LINUX</span>
<a name="l00148"></a>00148 <span class="preprocessor"></span>                <span class="keywordtype">int</span> retVal;
<a name="l00149"></a>00149                 <span class="keywordflow">do</span>{
<a name="l00150"></a>00150                         retVal = sem_wait(&amp;this-&gt;s);
<a name="l00151"></a>00151                 }<span class="keywordflow">while</span>(retVal == -1 &amp;&amp; errno == EINTR);
<a name="l00152"></a>00152                 <span class="keywordflow">if</span>(retVal &lt; 0){
<a name="l00153"></a>00153                         <span class="keywordflow">throw</span> <a class="code" href="classting_1_1Exc.htm" title="Basic exception class.">ting::Exc</a>(<span class="stringliteral">&quot;Semaphore::Wait(): wait failed&quot;</span>);
<a name="l00154"></a>00154                 }
<a name="l00155"></a>00155 <span class="preprocessor">#else</span>
<a name="l00156"></a>00156 <span class="preprocessor"></span><span class="preprocessor">#       error &quot;unknown OS&quot;</span>
<a name="l00157"></a>00157 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00158"></a>00158 <span class="preprocessor"></span>        }
<a name="l00159"></a>00159         
<a name="l00160"></a>00160 
<a name="l00161"></a>00161 
<a name="l00173"></a>00173         <span class="keywordtype">bool</span> <a class="code" href="classting_1_1mt_1_1Semaphore.htm#a5178478afba9f84d73a49e158590ea0a" title="Wait on semaphore.">Wait</a>(<a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">ting::u32</a> timeoutMillis);
<a name="l00174"></a>00174 
<a name="l00175"></a>00175 
<a name="l00176"></a>00176 
<a name="l00188"></a><a class="code" href="classting_1_1mt_1_1Semaphore.htm#a03e554712e8005861f426ba4b41e4aad">00188</a>         <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classting_1_1mt_1_1Semaphore.htm#a03e554712e8005861f426ba4b41e4aad" title="Signal the semaphore.">Signal</a>()throw(){
<a name="l00189"></a>00189 <span class="comment">//              TRACE(&lt;&lt; &quot;Semaphore::Signal(): invoked&quot; &lt;&lt; std::endl)</span>
<a name="l00190"></a>00190 <span class="preprocessor">#if M_OS == M_OS_WINDOWS</span>
<a name="l00191"></a>00191 <span class="preprocessor"></span>                <span class="keywordflow">if</span>(ReleaseSemaphore(this-&gt;s, 1, NULL) == 0){
<a name="l00192"></a>00192                         <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(<span class="keyword">false</span>)
<a name="l00193"></a>00193                 }
<a name="l00194"></a>00194 <span class="preprocessor">#elif M_OS == M_OS_SYMBIAN</span>
<a name="l00195"></a>00195 <span class="preprocessor"></span>                this-&gt;s.Signal();
<a name="l00196"></a>00196 <span class="preprocessor">#elif M_OS == M_OS_MACOSX</span>
<a name="l00197"></a>00197 <span class="preprocessor"></span>                <span class="keywordflow">if</span>(sem_post(this-&gt;s) &lt; 0){
<a name="l00198"></a>00198                         <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(<span class="keyword">false</span>)
<a name="l00199"></a>00199                 }
<a name="l00200"></a>00200 <span class="preprocessor">#elif M_OS == M_OS_LINUX</span>
<a name="l00201"></a>00201 <span class="preprocessor"></span>                <span class="keywordflow">if</span>(sem_post(&amp;this-&gt;s) &lt; 0){
<a name="l00202"></a>00202                         <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(<span class="keyword">false</span>)
<a name="l00203"></a>00203                 }
<a name="l00204"></a>00204 <span class="preprocessor">#else</span>
<a name="l00205"></a>00205 <span class="preprocessor"></span><span class="preprocessor">#       error &quot;unknown OS&quot;</span>
<a name="l00206"></a>00206 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00207"></a>00207 <span class="preprocessor"></span>        }
<a name="l00208"></a>00208 };<span class="comment">//~class Semaphore</span>
<a name="l00209"></a>00209 
<a name="l00210"></a>00210 
<a name="l00211"></a>00211 
<a name="l00212"></a>00212 }<span class="comment">//~namespace</span>
<a name="l00213"></a>00213 }<span class="comment">//~namespace</span>
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="Semaphore_8hpp.htm">Semaphore.hpp</a>      </li>

    <li class="footer">Generated on Thu Feb 21 2013 20:36:35 for libting by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
