<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>libting: File.hpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">libting
   &#160;<span id="projectnumber">2.0.0</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.htm"><span>File&#160;List</span></a></li>
      <li><a href="globals.htm"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('File_8hpp.htm','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">File.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="File_8hpp.htm">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* The MIT License:</span>
<a name="l00002"></a>00002 <span class="comment"></span>
<a name="l00003"></a>00003 <span class="comment">Copyright (c) 2009-2012 Ivan Gagis</span>
<a name="l00004"></a>00004 <span class="comment"></span>
<a name="l00005"></a>00005 <span class="comment">Permission is hereby granted, free of charge, to any person obtaining a copy</span>
<a name="l00006"></a>00006 <span class="comment">of this software and associated documentation files (the &quot;Software&quot;), to deal</span>
<a name="l00007"></a>00007 <span class="comment">in the Software without restriction, including without limitation the rights</span>
<a name="l00008"></a>00008 <span class="comment">to use, copy, modify, merge, publish, distribute, sublicense, and/or sell</span>
<a name="l00009"></a>00009 <span class="comment">copies of the Software, and to permit persons to whom the Software is</span>
<a name="l00010"></a>00010 <span class="comment">furnished to do so, subject to the following conditions:</span>
<a name="l00011"></a>00011 <span class="comment"></span>
<a name="l00012"></a>00012 <span class="comment">The above copyright notice and this permission notice shall be included in</span>
<a name="l00013"></a>00013 <span class="comment">all copies or substantial portions of the Software.</span>
<a name="l00014"></a>00014 <span class="comment"></span>
<a name="l00015"></a>00015 <span class="comment">THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span>
<a name="l00016"></a>00016 <span class="comment">IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span>
<a name="l00017"></a>00017 <span class="comment">FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span>
<a name="l00018"></a>00018 <span class="comment">AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span>
<a name="l00019"></a>00019 <span class="comment">LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span>
<a name="l00020"></a>00020 <span class="comment">OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN</span>
<a name="l00021"></a>00021 <span class="comment">THE SOFTWARE. */</span>
<a name="l00022"></a>00022 
<a name="l00023"></a>00023 <span class="comment">// Home page: http://ting.googlecode.com</span>
<a name="l00024"></a>00024 
<a name="l00025"></a>00025 
<a name="l00026"></a>00026 
<a name="l00032"></a>00032 <span class="preprocessor">#pragma once</span>
<a name="l00033"></a>00033 <span class="preprocessor"></span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &lt;string&gt;</span>
<a name="l00035"></a>00035 
<a name="l00036"></a>00036 <span class="preprocessor">#include &quot;../debug.hpp&quot;</span>
<a name="l00037"></a>00037 <span class="preprocessor">#include &quot;../types.hpp&quot;</span>
<a name="l00038"></a>00038 <span class="preprocessor">#include &quot;../Buffer.hpp&quot;</span>
<a name="l00039"></a>00039 <span class="preprocessor">#include &quot;../Array.hpp&quot;</span>
<a name="l00040"></a>00040 
<a name="l00041"></a>00041 <span class="preprocessor">#include &quot;<a class="code" href="fs_2Exc_8hpp.htm">Exc.hpp</a>&quot;</span>
<a name="l00042"></a>00042 
<a name="l00043"></a>00043 
<a name="l00044"></a>00044 
<a name="l00045"></a>00045 <span class="keyword">namespace </span>ting{
<a name="l00046"></a>00046 <span class="keyword">namespace </span>fs{
<a name="l00047"></a>00047 
<a name="l00048"></a>00048 
<a name="l00049"></a>00049 
<a name="l00054"></a><a class="code" href="classting_1_1fs_1_1File.htm">00054</a> <span class="keyword">class </span><a class="code" href="classting_1_1fs_1_1File.htm" title="Abstract interface to a file system.">File</a>{
<a name="l00055"></a>00055         std::string path;
<a name="l00056"></a>00056 
<a name="l00057"></a>00057         <span class="comment">//TODO: add file permissions</span>
<a name="l00058"></a>00058 
<a name="l00059"></a>00059 <span class="keyword">protected</span>:
<a name="l00060"></a><a class="code" href="classting_1_1fs_1_1File.htm#a5e166cfb170766fe6002e3eecd28ea1f">00060</a>         <a class="code" href="classting_1_1Inited.htm">ting::Inited&lt;bool, false&gt;</a> <a class="code" href="classting_1_1fs_1_1File.htm#a5e166cfb170766fe6002e3eecd28ea1f">isOpened</a>;
<a name="l00061"></a>00061 
<a name="l00062"></a>00062 <span class="keyword">public</span>:
<a name="l00066"></a><a class="code" href="classting_1_1fs_1_1File_1_1Exc.htm">00066</a>         <span class="keyword">class </span><a class="code" href="classting_1_1fs_1_1File_1_1Exc.htm" title="Basic exception class.">Exc</a> : <span class="keyword">public</span> fs::<a class="code" href="classting_1_1fs_1_1File_1_1Exc.htm" title="Basic exception class.">Exc</a>{
<a name="l00067"></a>00067         <span class="keyword">public</span>:
<a name="l00072"></a><a class="code" href="classting_1_1fs_1_1File_1_1Exc.htm#a74fffef1071a403b2628ba1dddffc019">00072</a>                 <a class="code" href="classting_1_1fs_1_1File_1_1Exc.htm#a74fffef1071a403b2628ba1dddffc019" title="Constructor.">Exc</a>(<span class="keyword">const</span> std::string&amp; descr) :
<a name="l00073"></a>00073                                 ting::fs::<a class="code" href="classting_1_1fs_1_1File_1_1Exc.htm" title="Basic exception class.">Exc</a>(std::string(<span class="stringliteral">&quot;[File::Exc]: &quot;</span>) + descr)
<a name="l00074"></a>00074                 {}
<a name="l00075"></a>00075         };
<a name="l00076"></a>00076 
<a name="l00077"></a><a class="code" href="classting_1_1fs_1_1File_1_1IllegalStateExc.htm">00077</a>         <span class="keyword">class </span><a class="code" href="classting_1_1fs_1_1File_1_1IllegalStateExc.htm">IllegalStateExc</a> : <span class="keyword">public</span> <a class="code" href="classting_1_1fs_1_1File_1_1Exc.htm" title="Basic exception class.">Exc</a>{
<a name="l00078"></a>00078         <span class="keyword">public</span>:
<a name="l00079"></a><a class="code" href="classting_1_1fs_1_1File_1_1IllegalStateExc.htm#a2497159a5f494eb887ce66c02f27ff75">00079</a>                 <a class="code" href="classting_1_1fs_1_1File_1_1IllegalStateExc.htm#a2497159a5f494eb887ce66c02f27ff75">IllegalStateExc</a>(<span class="keyword">const</span> std::string&amp; descr = <span class="stringliteral">&quot;Illegal opened/closed state&quot;</span>) :
<a name="l00080"></a>00080                                 <a class="code" href="classting_1_1fs_1_1File_1_1Exc.htm" title="Basic exception class.">Exc</a>(descr)
<a name="l00081"></a>00081                 {}
<a name="l00082"></a>00082         };
<a name="l00083"></a>00083         
<a name="l00087"></a><a class="code" href="classting_1_1fs_1_1File.htm#a00e1ee34be46110fb687ca6215f6c3b4">00087</a>         <span class="keyword">enum</span> <a class="code" href="classting_1_1fs_1_1File.htm#a00e1ee34be46110fb687ca6215f6c3b4" title="Modes of opening the file.">E_Mode</a>{
<a name="l00088"></a><a class="code" href="classting_1_1fs_1_1File.htm#a00e1ee34be46110fb687ca6215f6c3b4a127353eded4820c85411bb79b5f09bf6">00088</a>                 <a class="code" href="classting_1_1fs_1_1File.htm#a00e1ee34be46110fb687ca6215f6c3b4a127353eded4820c85411bb79b5f09bf6">READ</a>,  
<a name="l00089"></a><a class="code" href="classting_1_1fs_1_1File.htm#a00e1ee34be46110fb687ca6215f6c3b4a189c30d8f3718ec923ba51d8b53066ed">00089</a>                 <a class="code" href="classting_1_1fs_1_1File.htm#a00e1ee34be46110fb687ca6215f6c3b4a189c30d8f3718ec923ba51d8b53066ed" title="Open existing file for read only.">WRITE</a>, 
<a name="l00090"></a><a class="code" href="classting_1_1fs_1_1File.htm#a00e1ee34be46110fb687ca6215f6c3b4aab0570011a980fa2bcdcbd49617afce9">00090</a>                 <a class="code" href="classting_1_1fs_1_1File.htm#a00e1ee34be46110fb687ca6215f6c3b4aab0570011a980fa2bcdcbd49617afce9" title="Open existing file for read and write.">CREATE</a> 
<a name="l00091"></a>00091         };
<a name="l00092"></a>00092 
<a name="l00093"></a>00093 <span class="keyword">protected</span>:
<a name="l00094"></a><a class="code" href="classting_1_1fs_1_1File.htm#a5382c3a6e37a85e0a1c240ff69075715">00094</a>         <a class="code" href="classting_1_1fs_1_1File.htm#a00e1ee34be46110fb687ca6215f6c3b4" title="Modes of opening the file.">E_Mode</a> <a class="code" href="classting_1_1fs_1_1File.htm#a5382c3a6e37a85e0a1c240ff69075715">ioMode</a>;<span class="comment">//mode only matters when file is opened</span>
<a name="l00095"></a>00095 <span class="keyword">public</span>:
<a name="l00096"></a>00096 
<a name="l00101"></a><a class="code" href="classting_1_1fs_1_1File.htm#a32a91c3d8a5039ea4afaccf9ca6aa25e">00101</a>         <span class="keyword">inline</span> <a class="code" href="classting_1_1fs_1_1File.htm#a32a91c3d8a5039ea4afaccf9ca6aa25e" title="Constructor.">File</a>(<span class="keyword">const</span> std::string&amp; pathName = std::string()) :
<a name="l00102"></a>00102                         path(pathName)
<a name="l00103"></a>00103         {}
<a name="l00104"></a>00104 
<a name="l00105"></a>00105 <span class="keyword">private</span>:
<a name="l00106"></a>00106         <span class="comment">//no copying</span>
<a name="l00107"></a>00107         <span class="keyword">inline</span> <a class="code" href="classting_1_1fs_1_1File.htm#a32a91c3d8a5039ea4afaccf9ca6aa25e" title="Constructor.">File</a>(<span class="keyword">const</span> <a class="code" href="classting_1_1fs_1_1File.htm" title="Abstract interface to a file system.">File</a>&amp; f);
<a name="l00108"></a>00108 
<a name="l00109"></a>00109         <span class="comment">//no assigning</span>
<a name="l00110"></a>00110         <a class="code" href="classting_1_1fs_1_1File.htm" title="Abstract interface to a file system.">File</a>&amp; operator=(<span class="keyword">const</span> <a class="code" href="classting_1_1fs_1_1File.htm" title="Abstract interface to a file system.">File</a>&amp; f);
<a name="l00111"></a>00111 <span class="keyword">public</span>:
<a name="l00112"></a>00112 
<a name="l00119"></a><a class="code" href="classting_1_1fs_1_1File.htm#a4fbbadd912f141df0c85a7ba85bfbeb8">00119</a>         <span class="keyword">virtual</span> <a class="code" href="classting_1_1fs_1_1File.htm#a4fbbadd912f141df0c85a7ba85bfbeb8" title="Destructor.">~File</a>()throw(){
<a name="l00120"></a>00120                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(!this-&gt;<a class="code" href="classting_1_1fs_1_1File.htm#a30ab0c7709bbf1406173666ab9c69690" title="Check if the file is opened.">IsOpened</a>())
<a name="l00121"></a>00121         }
<a name="l00122"></a>00122 
<a name="l00127"></a><a class="code" href="classting_1_1fs_1_1File.htm#a2160184aa59678bc016113432fd8dc50">00127</a>         <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classting_1_1fs_1_1File.htm#a2160184aa59678bc016113432fd8dc50" title="Set the path for this File instance.">SetPath</a>(<span class="keyword">const</span> std::string&amp; pathName){
<a name="l00128"></a>00128                 <span class="keywordflow">if</span>(this-&gt;<a class="code" href="classting_1_1fs_1_1File.htm#a30ab0c7709bbf1406173666ab9c69690" title="Check if the file is opened.">IsOpened</a>()){
<a name="l00129"></a>00129                         <span class="keywordflow">throw</span> <a class="code" href="classting_1_1fs_1_1File_1_1IllegalStateExc.htm">File::IllegalStateExc</a>(<span class="stringliteral">&quot;Cannot set path when file is opened&quot;</span>);
<a name="l00130"></a>00130                 }
<a name="l00131"></a>00131 
<a name="l00132"></a>00132                 this-&gt;path = pathName;
<a name="l00133"></a>00133         }
<a name="l00134"></a>00134 
<a name="l00139"></a><a class="code" href="classting_1_1fs_1_1File.htm#a2d02c33cbeced7cf6d1552852257f8af">00139</a>         <span class="keyword">inline</span> <span class="keyword">const</span> std::string&amp; <a class="code" href="classting_1_1fs_1_1File.htm#a2d02c33cbeced7cf6d1552852257f8af" title="Get the current path being held by this File instance.">Path</a>()<span class="keyword">const</span> throw(){
<a name="l00140"></a>00140                 <span class="keywordflow">return</span> this-&gt;path;
<a name="l00141"></a>00141         }
<a name="l00142"></a>00142 
<a name="l00156"></a>00156         std::string <a class="code" href="classting_1_1fs_1_1File.htm#a0cc58c67e2e91596cfd543e3fb57d511" title="Get file extension.">ExtractExtension</a>()<span class="keyword">const</span>;
<a name="l00157"></a>00157 
<a name="l00164"></a>00164         std::string <a class="code" href="classting_1_1fs_1_1File.htm#a2ac986537fff058c19ff70ffb1f904ac" title="Get directory part of the path.">ExtractDirectory</a>()<span class="keyword">const</span>;
<a name="l00165"></a>00165         
<a name="l00172"></a>00172         <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classting_1_1fs_1_1File.htm#a75a04abf7392b39e64284439efd1f835" title="Open file.">Open</a>(<a class="code" href="classting_1_1fs_1_1File.htm#a00e1ee34be46110fb687ca6215f6c3b4" title="Modes of opening the file.">E_Mode</a> mode) = 0;
<a name="l00173"></a>00173 
<a name="l00177"></a>00177         <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classting_1_1fs_1_1File.htm#a10c578b5b27f9601005c48a879d7b993" title="Close file.">Close</a>()throw() = 0;
<a name="l00178"></a>00178 
<a name="l00184"></a><a class="code" href="classting_1_1fs_1_1File.htm#a30ab0c7709bbf1406173666ab9c69690">00184</a>         inline <span class="keywordtype">bool</span> <a class="code" href="classting_1_1fs_1_1File.htm#a30ab0c7709bbf1406173666ab9c69690" title="Check if the file is opened.">IsOpened</a>()const throw(){
<a name="l00185"></a>00185                 <span class="keywordflow">return</span> this-&gt;<a class="code" href="classting_1_1fs_1_1File.htm#a5e166cfb170766fe6002e3eecd28ea1f">isOpened</a>;
<a name="l00186"></a>00186         }
<a name="l00187"></a>00187 
<a name="l00197"></a>00197         <span class="keywordtype">bool</span> <a class="code" href="classting_1_1fs_1_1File.htm#aa1890a0cdb149e89c38d59668ec429ce" title="Returns true if path points to directory.">IsDir</a>()<span class="keyword">const</span> throw();
<a name="l00198"></a>00198 
<a name="l00206"></a>00206         virtual ting::<a class="code" href="classting_1_1Array.htm" title="wrapper above new[]/delete[].">Array</a>&lt;std::<span class="keywordtype">string</span>&gt; <a class="code" href="classting_1_1fs_1_1File.htm#a3e680cf32e988290379ab70d0c58123b" title="Get list of files and subdirectories of a directory.">ListDirContents</a>(<span class="keywordtype">size_t</span> maxEntries = 0);
<a name="l00207"></a>00207 
<a name="l00224"></a>00224         <span class="keywordtype">size_t</span> <a class="code" href="classting_1_1fs_1_1File.htm#a03bad219d0852bdaf5b273acff7023ab" title="Read data from file.">Read</a>(
<a name="l00225"></a>00225                         const ting::<a class="code" href="classting_1_1Buffer.htm" title="Memory buffer wrapper template class.">Buffer</a>&lt;ting::<a class="code" href="namespaceting.htm#a2debe052f64b3825ad3e8e3ee1861e66" title="Unsigned 8 bit type.">u8</a>&gt;&amp; buf,
<a name="l00226"></a>00226                         <span class="keywordtype">size_t</span> numBytesToRead = 0, <span class="comment">//0 means the whole buffer size</span>
<a name="l00227"></a>00227                         <span class="keywordtype">size_t</span> offset = 0
<a name="l00228"></a>00228                 );
<a name="l00229"></a>00229 
<a name="l00230"></a>00230 protected:
<a name="l00239"></a>00239         virtual <span class="keywordtype">size_t</span> <a class="code" href="classting_1_1fs_1_1File.htm#ade8112c05d7e7130e19eb4705d6f1862" title="Read data from file.">ReadInternal</a>(const ting::<a class="code" href="classting_1_1Buffer.htm" title="Memory buffer wrapper template class.">Buffer</a>&lt;ting::<a class="code" href="namespaceting.htm#a2debe052f64b3825ad3e8e3ee1861e66" title="Unsigned 8 bit type.">u8</a>&gt;&amp; buf) = 0;
<a name="l00240"></a>00240         
<a name="l00241"></a>00241 public:
<a name="l00256"></a>00256         <span class="keywordtype">size_t</span> <a class="code" href="classting_1_1fs_1_1File.htm#a556ca6d886aab4617188234409f640ee" title="Write data to file.">Write</a>(
<a name="l00257"></a>00257                         const ting::<a class="code" href="classting_1_1Buffer.htm" title="Memory buffer wrapper template class.">Buffer</a>&lt;const ting::<a class="code" href="namespaceting.htm#a2debe052f64b3825ad3e8e3ee1861e66" title="Unsigned 8 bit type.">u8</a>&gt;&amp; buf,
<a name="l00258"></a>00258                         <span class="keywordtype">size_t</span> numBytesToWrite = 0, <span class="comment">//0 means the whole buffer size</span>
<a name="l00259"></a>00259                         <span class="keywordtype">size_t</span> offset = 0
<a name="l00260"></a>00260                 );
<a name="l00261"></a>00261 
<a name="l00262"></a>00262 protected:
<a name="l00271"></a>00271         virtual <span class="keywordtype">size_t</span> <a class="code" href="classting_1_1fs_1_1File.htm#a1a1d177ebb1d2553afe2ad0cce552a16" title="Write data to file.">WriteInternal</a>(const ting::<a class="code" href="classting_1_1Buffer.htm" title="Memory buffer wrapper template class.">Buffer</a>&lt;const ting::<a class="code" href="namespaceting.htm#a2debe052f64b3825ad3e8e3ee1861e66" title="Unsigned 8 bit type.">u8</a>&gt;&amp; buf) = 0;
<a name="l00272"></a>00272         
<a name="l00273"></a>00273 public:
<a name="l00283"></a>00283         virtual <span class="keywordtype">void</span> <a class="code" href="classting_1_1fs_1_1File.htm#aff899e10d471c7101679d90986d0a0fe" title="Seek forward.">SeekForward</a>(<span class="keywordtype">size_t</span> numBytesToSeek);
<a name="l00284"></a>00284 
<a name="l00293"></a>00293         virtual <span class="keywordtype">void</span> <a class="code" href="classting_1_1fs_1_1File.htm#a62ba851cc630b0ccda51d208c28eb309" title="Seek backwards.">SeekBackward</a>(<span class="keywordtype">size_t</span> numBytesToSeek);
<a name="l00294"></a>00294 
<a name="l00300"></a>00300         virtual <span class="keywordtype">void</span> <a class="code" href="classting_1_1fs_1_1File.htm#a16f8ef0e4184234731dfefb3cc0149e3" title="Seek to the beginning of the file.">Rewind</a>();
<a name="l00301"></a>00301 
<a name="l00309"></a>00309         virtual <span class="keywordtype">void</span> <a class="code" href="classting_1_1fs_1_1File.htm#a9a1f8b4f370b87030239453cfdcb21d8" title="Create directory.">MakeDir</a>();
<a name="l00310"></a>00310 
<a name="l00311"></a>00311 public:
<a name="l00318"></a>00318         ting::<a class="code" href="classting_1_1Array.htm" title="wrapper above new[]/delete[].">Array</a>&lt;ting::<a class="code" href="namespaceting.htm#a2debe052f64b3825ad3e8e3ee1861e66" title="Unsigned 8 bit type.">u8</a>&gt; <a class="code" href="classting_1_1fs_1_1File.htm#a6cb5b61e08e067fa98babc1857113fc0" title="Load the entire file into the RAM.">LoadWholeFileIntoMemory</a>(<span class="keywordtype">size_t</span> maxBytesToLoad = <span class="keywordtype">size_t</span>(-1));
<a name="l00319"></a>00319 
<a name="l00325"></a>00325         virtual <span class="keywordtype">bool</span> <a class="code" href="classting_1_1fs_1_1File.htm#a92e8106e3c1ee35729fb7695ae596aab" title="Check for file/directory existence.">Exists</a>()const;
<a name="l00326"></a>00326 
<a name="l00327"></a>00327 public:
<a name="l00352"></a><a class="code" href="classting_1_1fs_1_1File_1_1Guard.htm">00352</a>         class <a class="code" href="classting_1_1fs_1_1File_1_1Guard.htm" title="File guard class.">Guard</a>{
<a name="l00353"></a>00353                 <a class="code" href="classting_1_1fs_1_1File.htm" title="Abstract interface to a file system.">File</a>&amp; f;
<a name="l00354"></a>00354         <span class="keyword">public</span>:
<a name="l00355"></a>00355                 Guard(<a class="code" href="classting_1_1fs_1_1File.htm" title="Abstract interface to a file system.">File</a> &amp;file, <a class="code" href="classting_1_1fs_1_1File.htm#a00e1ee34be46110fb687ca6215f6c3b4" title="Modes of opening the file.">E_Mode</a> mode);
<a name="l00356"></a>00356 
<a name="l00357"></a>00357                 ~Guard();
<a name="l00358"></a>00358         };
<a name="l00359"></a>00359 };
<a name="l00360"></a>00360 
<a name="l00361"></a>00361 
<a name="l00362"></a>00362 
<a name="l00363"></a>00363 }<span class="comment">//~namespace</span>
<a name="l00364"></a>00364 }<span class="comment">//~namespace</span>
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="File_8hpp.htm">File.hpp</a>      </li>

    <li class="footer">Generated on Thu Feb 21 2013 20:36:35 for libting by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
