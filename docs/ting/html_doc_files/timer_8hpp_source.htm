<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>libting: timer.hpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">libting
   &#160;<span id="projectnumber">2.0.0</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.htm"><span>File&#160;List</span></a></li>
      <li><a href="globals.htm"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('timer_8hpp.htm','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">timer.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="timer_8hpp.htm">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* The MIT License:</span>
<a name="l00002"></a>00002 <span class="comment"></span>
<a name="l00003"></a>00003 <span class="comment">Copyright (c) 2008-2012 Ivan Gagis &lt;igagis@gmail.com&gt;</span>
<a name="l00004"></a>00004 <span class="comment"></span>
<a name="l00005"></a>00005 <span class="comment">Permission is hereby granted, free of charge, to any person obtaining a copy</span>
<a name="l00006"></a>00006 <span class="comment">of this software and associated documentation files (the &quot;Software&quot;), to deal</span>
<a name="l00007"></a>00007 <span class="comment">in the Software without restriction, including without limitation the rights</span>
<a name="l00008"></a>00008 <span class="comment">to use, copy, modify, merge, publish, distribute, sublicense, and/or sell</span>
<a name="l00009"></a>00009 <span class="comment">copies of the Software, and to permit persons to whom the Software is</span>
<a name="l00010"></a>00010 <span class="comment">furnished to do so, subject to the following conditions:</span>
<a name="l00011"></a>00011 <span class="comment"></span>
<a name="l00012"></a>00012 <span class="comment">The above copyright notice and this permission notice shall be included in</span>
<a name="l00013"></a>00013 <span class="comment">all copies or substantial portions of the Software.</span>
<a name="l00014"></a>00014 <span class="comment"></span>
<a name="l00015"></a>00015 <span class="comment">THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span>
<a name="l00016"></a>00016 <span class="comment">IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span>
<a name="l00017"></a>00017 <span class="comment">FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span>
<a name="l00018"></a>00018 <span class="comment">AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span>
<a name="l00019"></a>00019 <span class="comment">LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span>
<a name="l00020"></a>00020 <span class="comment">OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN</span>
<a name="l00021"></a>00021 <span class="comment">THE SOFTWARE. */</span>
<a name="l00022"></a>00022 
<a name="l00023"></a>00023 <span class="comment">// Home page: http://ting.googlecode.com</span>
<a name="l00024"></a>00024 
<a name="l00025"></a>00025 
<a name="l00026"></a>00026 
<a name="l00034"></a>00034 <span class="preprocessor">#pragma once</span>
<a name="l00035"></a>00035 <span class="preprocessor"></span>
<a name="l00036"></a>00036 <span class="comment">//#define M_ENABLE_TIMER_TRACE</span>
<a name="l00037"></a>00037 <span class="preprocessor">#ifdef M_ENABLE_TIMER_TRACE</span>
<a name="l00038"></a>00038 <span class="preprocessor"></span><span class="preprocessor">#       define M_TIMER_TRACE(x) TRACE(&lt;&lt; &quot;[Timer]&quot; x)</span>
<a name="l00039"></a>00039 <span class="preprocessor"></span><span class="preprocessor">#else</span>
<a name="l00040"></a><a class="code" href="timer_8hpp.htm#a704867c8cabdfaa73868416840ef9af9">00040</a> <span class="preprocessor"></span><span class="preprocessor">#       define M_TIMER_TRACE(x)</span>
<a name="l00041"></a>00041 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00042"></a>00042 <span class="preprocessor"></span>
<a name="l00043"></a>00043 
<a name="l00044"></a>00044 <span class="preprocessor">#include &quot;<a class="code" href="config_8hpp.htm">config.hpp</a>&quot;</span>
<a name="l00045"></a>00045 
<a name="l00046"></a>00046 
<a name="l00047"></a>00047 <span class="preprocessor">#if M_COMPILER == M_COMPILER_MSVC</span>
<a name="l00048"></a>00048 <span class="preprocessor"></span><span class="preprocessor">#       pragma warning(disable:4290) //WARNING: C++ exception specification ignored except to indicate a function is not __declspec(nothrow)</span>
<a name="l00049"></a>00049 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00050"></a>00050 <span class="preprocessor"></span>
<a name="l00051"></a>00051 
<a name="l00052"></a>00052 <span class="preprocessor">#if M_OS == M_OS_WINDOWS</span>
<a name="l00053"></a>00053 <span class="preprocessor"></span><span class="preprocessor">#       include &lt;windows.h&gt;</span>
<a name="l00054"></a>00054 
<a name="l00055"></a>00055 <span class="preprocessor">#elif M_OS == M_OS_MACOSX</span>
<a name="l00056"></a>00056 <span class="preprocessor"></span><span class="preprocessor">#       include&lt;sys/time.h&gt;</span>
<a name="l00057"></a>00057 
<a name="l00058"></a>00058 <span class="preprocessor">#elif M_OS == M_OS_LINUX</span>
<a name="l00059"></a>00059 <span class="preprocessor"></span><span class="preprocessor">#include &lt;ctime&gt;</span>
<a name="l00060"></a>00060 
<a name="l00061"></a>00061 <span class="preprocessor">#else</span>
<a name="l00062"></a>00062 <span class="preprocessor"></span><span class="preprocessor">#       error &quot;Unknown OS&quot;</span>
<a name="l00063"></a>00063 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00064"></a>00064 <span class="preprocessor"></span>
<a name="l00065"></a>00065 
<a name="l00066"></a>00066 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00067"></a>00067 <span class="preprocessor">#include &lt;map&gt;</span>
<a name="l00068"></a>00068 <span class="preprocessor">#include &lt;algorithm&gt;</span>
<a name="l00069"></a>00069 
<a name="l00070"></a>00070 <span class="preprocessor">#include &quot;<a class="code" href="debug_8hpp.htm">debug.hpp</a>&quot;</span>
<a name="l00071"></a>00071 <span class="preprocessor">#include &quot;<a class="code" href="types_8hpp.htm" title="General types definitions.">types.hpp</a>&quot;</span>
<a name="l00072"></a>00072 <span class="preprocessor">#include &quot;<a class="code" href="Singleton_8hpp.htm" title="Singleton base class (template).">Singleton.hpp</a>&quot;</span>
<a name="l00073"></a>00073 <span class="preprocessor">#include &quot;<a class="code" href="math_8hpp.htm" title="Math utilities.">math.hpp</a>&quot;</span>
<a name="l00074"></a>00074 
<a name="l00075"></a>00075 <span class="preprocessor">#include &quot;<a class="code" href="Thread_8hpp.htm" title="Multithreading library.">mt/Thread.hpp</a>&quot;</span>
<a name="l00076"></a>00076 <span class="preprocessor">#include &quot;<a class="code" href="Semaphore_8hpp.htm">mt/Semaphore.hpp</a>&quot;</span>
<a name="l00077"></a>00077 
<a name="l00078"></a>00078 
<a name="l00079"></a>00079 
<a name="l00080"></a>00080 <span class="keyword">namespace </span>ting{
<a name="l00081"></a><a class="code" href="namespaceting_1_1timer.htm">00081</a> <span class="keyword">namespace </span>timer{
<a name="l00082"></a>00082 
<a name="l00083"></a>00083 
<a name="l00089"></a><a class="code" href="namespaceting_1_1timer.htm#a72fb8b874d0be624a06562c9ffc0d7bd">00089</a> <span class="keyword">inline</span> <a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">ting::u32</a> <a class="code" href="namespaceting_1_1timer.htm#a72fb8b874d0be624a06562c9ffc0d7bd" title="Get constantly increasing millisecond ticks.">GetTicks</a>(){
<a name="l00090"></a>00090 <span class="preprocessor">#if M_OS == M_OS_WINDOWS</span>
<a name="l00091"></a>00091 <span class="preprocessor"></span>        <span class="keyword">static</span> LARGE_INTEGER perfCounterFreq = {{0, 0}};
<a name="l00092"></a>00092         <span class="keywordflow">if</span>(perfCounterFreq.QuadPart == 0){
<a name="l00093"></a>00093                 <span class="keywordflow">if</span>(QueryPerformanceFrequency(&amp;perfCounterFreq) == FALSE){
<a name="l00094"></a>00094                         <span class="comment">//looks like the system does not support high resolution tick counter</span>
<a name="l00095"></a>00095                         <span class="keywordflow">return</span> GetTickCount();
<a name="l00096"></a>00096                 }
<a name="l00097"></a>00097         }
<a name="l00098"></a>00098         LARGE_INTEGER ticks;
<a name="l00099"></a>00099         <span class="keywordflow">if</span>(QueryPerformanceCounter(&amp;ticks) == FALSE){
<a name="l00100"></a>00100                 <span class="keywordflow">return</span> GetTickCount();
<a name="l00101"></a>00101         }
<a name="l00102"></a>00102 
<a name="l00103"></a>00103         <span class="keywordflow">return</span> <a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">ting::u32</a>((ticks.QuadPart * 1000) / perfCounterFreq.QuadPart);
<a name="l00104"></a>00104 <span class="preprocessor">#elif M_OS == M_OS_MACOSX</span>
<a name="l00105"></a>00105 <span class="preprocessor"></span>        <span class="comment">//Mac os X doesn&#39;t support clock_gettime</span>
<a name="l00106"></a>00106         timeval t;
<a name="l00107"></a>00107         gettimeofday(&amp;t, 0);
<a name="l00108"></a>00108         <span class="keywordflow">return</span> <a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">ting::u32</a>(t.tv_sec * 1000 + (t.tv_usec / 1000));
<a name="l00109"></a>00109 <span class="preprocessor">#elif M_OS == M_OS_LINUX</span>
<a name="l00110"></a>00110 <span class="preprocessor"></span>        timespec ts;
<a name="l00111"></a>00111         <span class="keywordflow">if</span>(clock_gettime(CLOCK_MONOTONIC, &amp;ts) == -1){
<a name="l00112"></a>00112                 <span class="keywordflow">throw</span> <a class="code" href="classting_1_1Exc.htm" title="Basic exception class.">ting::Exc</a>(<span class="stringliteral">&quot;GetTicks(): clock_gettime() returned error&quot;</span>);
<a name="l00113"></a>00113         }
<a name="l00114"></a>00114 
<a name="l00115"></a>00115         <span class="keywordflow">return</span> <a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">u32</a>(<a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">u32</a>(ts.tv_sec) * 1000 + <a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">u32</a>(ts.tv_nsec / 1000000));
<a name="l00116"></a>00116 <span class="preprocessor">#else</span>
<a name="l00117"></a>00117 <span class="preprocessor"></span><span class="preprocessor">#       error &quot;Unsupported OS&quot;</span>
<a name="l00118"></a>00118 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00119"></a>00119 <span class="preprocessor"></span>}
<a name="l00120"></a>00120 
<a name="l00121"></a>00121 
<a name="l00122"></a>00122 
<a name="l00130"></a><a class="code" href="classting_1_1timer_1_1Timer.htm">00130</a> <span class="keyword">class </span><a class="code" href="classting_1_1timer_1_1Timer.htm" title="General purpose timer.">Timer</a>{
<a name="l00131"></a><a class="code" href="classting_1_1timer_1_1Timer.htm#ac37c02a1444b52b304ace79dfed3de12">00131</a>         <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classting_1_1timer_1_1Lib.htm" title="Timer library singleton class.">Lib</a>;
<a name="l00132"></a>00132 
<a name="l00133"></a>00133         <span class="comment">//This constant is for testing purposes.</span>
<a name="l00134"></a>00134         <span class="comment">//Should be set to ting::u32(-1) in release.</span>
<a name="l00135"></a>00135         <span class="keyword">inline</span> <span class="keyword">static</span> <a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">ting::u32</a> DMaxTicks(){
<a name="l00136"></a>00136                 <span class="keywordflow">return</span> <a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">ting::u32</a>(-1);
<a name="l00137"></a>00137         }
<a name="l00138"></a>00138         
<a name="l00139"></a>00139         <a class="code" href="classting_1_1Inited.htm">ting::Inited&lt;bool, false&gt;</a> isRunning;<span class="comment">//true if timer has been started and has not stopped yet</span>
<a name="l00140"></a>00140 
<a name="l00141"></a>00141 <span class="keyword">private</span>:
<a name="l00142"></a>00142         <span class="keyword">typedef</span> std::multimap&lt;ting::u64, Timer*&gt; T_TimerList;
<a name="l00143"></a>00143         <span class="keyword">typedef</span> T_TimerList::iterator T_TimerIter;
<a name="l00144"></a>00144 
<a name="l00145"></a>00145         T_TimerIter i;<span class="comment">//if timer is running, this is the iterator into the map of timers</span>
<a name="l00146"></a>00146 
<a name="l00147"></a>00147 <span class="keyword">public</span>:
<a name="l00148"></a>00148 
<a name="l00165"></a>00165         <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classting_1_1timer_1_1Timer.htm#a66454d85deb053bd97519621ee60707b" title="Timer expiration handler.">OnExpired</a>()throw() = 0;
<a name="l00166"></a>00166 
<a name="l00171"></a><a class="code" href="classting_1_1timer_1_1Timer.htm#aff28d7238c56eb67609bf590a8e2a892">00171</a>         inline <a class="code" href="classting_1_1timer_1_1Timer.htm" title="General purpose timer.">Timer</a>(){
<a name="l00172"></a>00172                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(!this-&gt;isRunning)
<a name="l00173"></a>00173         }
<a name="l00174"></a>00174 
<a name="l00175"></a>00175         <span class="keyword">virtual</span> <a class="code" href="classting_1_1timer_1_1Timer.htm#aa29dece81f5f5afaf8127cdf29b93834">~Timer</a>()throw();
<a name="l00176"></a>00176 
<a name="l00188"></a>00188         inline <span class="keywordtype">void</span> <a class="code" href="classting_1_1timer_1_1Timer.htm#a7e87f05fc5a47fcfa8b200479708e427" title="Start timer.">Start</a>(ting::<a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">u32</a> millisec);
<a name="l00189"></a>00189 
<a name="l00203"></a>00203         inline <span class="keywordtype">bool</span> <a class="code" href="classting_1_1timer_1_1Timer.htm#a62fa9819488a73d50048799a6c063cd7" title="Stop the timer.">Stop</a>()throw();
<a name="l00204"></a>00204 };
<a name="l00205"></a>00205 
<a name="l00206"></a>00206 
<a name="l00207"></a>00207 
<a name="l00215"></a><a class="code" href="classting_1_1timer_1_1Lib.htm">00215</a> class <a class="code" href="classting_1_1timer_1_1Lib.htm" title="Timer library singleton class.">Lib</a> : public <a class="code" href="classting_1_1IntrusiveSingleton.htm" title="Intrusive singleton base class.">IntrusiveSingleton</a>&lt;<a class="code" href="classting_1_1timer_1_1Lib.htm" title="Timer library singleton class.">Lib</a>&gt;{
<a name="l00216"></a><a class="code" href="classting_1_1timer_1_1Lib.htm#a493379ef0d408ce7a0b639619e919ee7">00216</a>         <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classting_1_1IntrusiveSingleton.htm" title="Intrusive singleton base class.">IntrusiveSingleton</a>&lt;Lib&gt;;
<a name="l00217"></a>00217         <span class="keyword">static</span> <a class="code" href="classting_1_1IntrusiveSingleton.htm" title="Intrusive singleton base class.">IntrusiveSingleton&lt;Lib&gt;::T_Instance</a> instance;
<a name="l00218"></a>00218         
<a name="l00219"></a><a class="code" href="classting_1_1timer_1_1Lib.htm#ac3ab8abfd1eae55ee416dc8a0259f154">00219</a>         <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classting_1_1timer_1_1Timer.htm" title="General purpose timer.">ting::timer::Timer</a>;
<a name="l00220"></a>00220 
<a name="l00221"></a>00221         <span class="keyword">class </span>TimerThread : <span class="keyword">public</span> ting::mt::Thread{
<a name="l00222"></a>00222         <span class="keyword">public</span>:
<a name="l00223"></a>00223                 <a class="code" href="classting_1_1Inited.htm">ting::Inited&lt;volatile bool, false&gt;</a> quitFlag;
<a name="l00224"></a>00224 
<a name="l00225"></a>00225                 <a class="code" href="classting_1_1mt_1_1Mutex.htm" title="Mutex object class Mutex stands for &quot;Mutual execution&quot;.">ting::mt::Mutex</a> <a class="code" href="atomic_8hpp.htm#a6334cfeab8b0e3af50dc82ebca4431bf">mutex</a>;
<a name="l00226"></a>00226                 <a class="code" href="classting_1_1mt_1_1Semaphore.htm" title="Semaphore class.">ting::mt::Semaphore</a> sema;
<a name="l00227"></a>00227 
<a name="l00228"></a>00228                 <span class="comment">//mutex used to make sure that after Timer::Stop() method is called the</span>
<a name="l00229"></a>00229                 <span class="comment">//expired notification callback will not be called</span>
<a name="l00230"></a>00230                 <a class="code" href="classting_1_1mt_1_1Mutex.htm" title="Mutex object class Mutex stands for &quot;Mutual execution&quot;.">ting::mt::Mutex</a> expiredTimersNotifyMutex;
<a name="l00231"></a>00231                 
<a name="l00232"></a>00232                 <span class="comment">//map requires key uniqueness, but in our case the key is a stop ticks,</span>
<a name="l00233"></a>00233                 <span class="comment">//so, use std::multimap to allow similar keys.</span>
<a name="l00234"></a>00234                 Timer::T_TimerList timers;
<a name="l00235"></a>00235 
<a name="l00236"></a>00236 
<a name="l00237"></a>00237 
<a name="l00238"></a>00238                 <a class="code" href="classting_1_1Inited.htm">ting::Inited&lt;ting::u64, 0&gt;</a> ticks;
<a name="l00239"></a>00239                 <a class="code" href="classting_1_1Inited.htm">ting::Inited&lt;bool, false&gt;</a> incTicks;<span class="comment">//flag indicates that high word of ticks needs increment</span>
<a name="l00240"></a>00240 
<a name="l00241"></a>00241                 <span class="comment">//This function should be called at least once in 16 days (half of ting::u32(-1) milliseconds)</span>
<a name="l00242"></a>00242                 <span class="comment">//in order to function properly.</span>
<a name="l00243"></a>00243                 <span class="comment">//This is achieved by having a repeating timer set to 16 days, which will do nothing but</span>
<a name="l00244"></a>00244                 <span class="comment">//calling this function.</span>
<a name="l00245"></a>00245                 <span class="keyword">inline</span> <a class="code" href="namespaceting.htm#aa8ad0b6936aac454c0459ee8f45c7863" title="Unsigned 64 bit type.">ting::u64</a> <a class="code" href="namespaceting_1_1timer.htm#a72fb8b874d0be624a06562c9ffc0d7bd" title="Get constantly increasing millisecond ticks.">GetTicks</a>();
<a name="l00246"></a>00246 
<a name="l00247"></a>00247 
<a name="l00248"></a>00248 
<a name="l00249"></a>00249                 TimerThread(){
<a name="l00250"></a>00250                         <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(!this-&gt;quitFlag)
<a name="l00251"></a>00251                 }
<a name="l00252"></a>00252 
<a name="l00253"></a>00253                 ~TimerThread()throw(){
<a name="l00254"></a>00254                         <span class="comment">//at the time of TimerLib destroying there should be no active timers</span>
<a name="l00255"></a>00255                         <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(this-&gt;timers.size() == 0)
<a name="l00256"></a>00256                 }
<a name="l00257"></a>00257 
<a name="l00258"></a>00258                 <span class="keywordtype">void</span> AddTimer_ts(<a class="code" href="classting_1_1timer_1_1Timer.htm" title="General purpose timer.">Timer</a>* timer, <a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">u32</a> timeout);
<a name="l00259"></a>00259 
<a name="l00260"></a>00260                 <span class="keywordtype">bool</span> RemoveTimer_ts(<a class="code" href="classting_1_1timer_1_1Timer.htm" title="General purpose timer.">Timer</a>* timer)<span class="keywordflow">throw</span>();
<a name="l00261"></a>00261 
<a name="l00262"></a>00262                 <span class="keyword">inline</span> <span class="keywordtype">void</span> SetQuitFlagAndSignalSemaphore()throw(){
<a name="l00263"></a>00263                         this-&gt;quitFlag = <span class="keyword">true</span>;
<a name="l00264"></a>00264                         this-&gt;sema.Signal();
<a name="l00265"></a>00265                 }
<a name="l00266"></a>00266 
<a name="l00267"></a>00267                 <span class="comment">//override</span>
<a name="l00268"></a>00268                 <span class="keywordtype">void</span> Run();
<a name="l00269"></a>00269 
<a name="l00270"></a>00270         } thread;
<a name="l00271"></a>00271 
<a name="l00272"></a>00272         <span class="keyword">class </span>HalfMaxTicksTimer : <span class="keyword">public</span> <a class="code" href="classting_1_1timer_1_1Timer.htm#aff28d7238c56eb67609bf590a8e2a892" title="Constructor for new Timer instance.">Timer</a>{
<a name="l00273"></a>00273         <span class="keyword">public</span>:
<a name="l00274"></a>00274                 <span class="comment">//override</span>
<a name="l00275"></a>00275                 <span class="keywordtype">void</span> <a class="code" href="classting_1_1timer_1_1Timer.htm#a66454d85deb053bd97519621ee60707b" title="Timer expiration handler.">OnExpired</a>()throw(){
<a name="l00276"></a>00276                         <span class="keywordflow">try</span>{
<a name="l00277"></a>00277                                 this-&gt;<a class="code" href="classting_1_1timer_1_1Timer.htm#a7e87f05fc5a47fcfa8b200479708e427" title="Start timer.">Start</a>(Timer::DMaxTicks() / 2);
<a name="l00278"></a>00278                         }<span class="keywordflow">catch</span>(...){
<a name="l00279"></a>00279                                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(<span class="keyword">false</span>)
<a name="l00280"></a>00280                         }
<a name="l00281"></a>00281                 }
<a name="l00282"></a>00282         } halfMaxTicksTimer;
<a name="l00283"></a>00283 
<a name="l00284"></a>00284 <span class="keyword">public</span>:
<a name="l00285"></a><a class="code" href="classting_1_1timer_1_1Lib.htm#adb6227e1de0c9f6de4b3843950d686b6">00285</a>         <span class="keyword">inline</span> <a class="code" href="classting_1_1timer_1_1Lib.htm#adb6227e1de0c9f6de4b3843950d686b6">Lib</a>(){
<a name="l00286"></a>00286                 this-&gt;thread.Start();
<a name="l00287"></a>00287 
<a name="l00288"></a>00288                 <span class="comment">//start timer for half of the max ticks</span>
<a name="l00289"></a>00289                 this-&gt;halfMaxTicksTimer.OnExpired();
<a name="l00290"></a>00290         }
<a name="l00291"></a>00291 
<a name="l00297"></a><a class="code" href="classting_1_1timer_1_1Lib.htm#a88402fccef4875336d3af8af29f7946b">00297</a>         <a class="code" href="classting_1_1timer_1_1Lib.htm#a88402fccef4875336d3af8af29f7946b" title="Destructor.">~Lib</a>()throw(){
<a name="l00298"></a>00298                 <span class="comment">//stop half max ticks timer</span>
<a name="l00299"></a>00299                 <span class="keywordflow">while</span>(!this-&gt;halfMaxTicksTimer.Stop()){
<a name="l00300"></a>00300                         <a class="code" href="classting_1_1mt_1_1Thread.htm#a4713c4af0c49f630338aacb5cb9b91f3" title="Suspend the thread for a given number of milliseconds.">ting::mt::Thread::Sleep</a>(10);
<a name="l00301"></a>00301                 }
<a name="l00302"></a>00302 <span class="preprocessor">#ifdef DEBUG</span>
<a name="l00303"></a>00303 <span class="preprocessor"></span>                {
<a name="l00304"></a>00304                         <a class="code" href="classting_1_1mt_1_1Mutex_1_1Guard.htm" title="Helper class which automatically Locks the given mutex.">ting::mt::Mutex::Guard</a> mutexGuard(this-&gt;thread.mutex);
<a name="l00305"></a>00305                         <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(this-&gt;thread.timers.size() == 0)
<a name="l00306"></a>00306                 }
<a name="l00307"></a>00307 #endif
<a name="l00308"></a>00308                 this-&gt;thread.SetQuitFlagAndSignalSemaphore();
<a name="l00309"></a>00309                 this-&gt;thread.Join();
<a name="l00310"></a>00310         }
<a name="l00311"></a>00311 };
<a name="l00312"></a>00312 
<a name="l00313"></a>00313 
<a name="l00314"></a>00314 
<a name="l00315"></a><a class="code" href="classting_1_1timer_1_1Timer.htm#aa29dece81f5f5afaf8127cdf29b93834">00315</a> <span class="keyword">inline</span> <a class="code" href="classting_1_1timer_1_1Timer.htm#aa29dece81f5f5afaf8127cdf29b93834">Timer::~Timer</a>()throw(){
<a name="l00316"></a>00316         <a class="code" href="debug_8hpp.htm#aaf04cfaa53d7b0bfcdeec60eaf7eed3a">ASSERT_INFO</a>(!this-&gt;isRunning, <span class="stringliteral">&quot;trying to destroy running timer. Stop the timer first and make sure its OnExpired() method will not be called, then destroy the timer object.&quot;</span>)
<a name="l00317"></a>00317 }
<a name="l00318"></a>00318 
<a name="l00319"></a>00319 
<a name="l00320"></a>00320 
<a name="l00321"></a><a class="code" href="classting_1_1timer_1_1Timer.htm#a7e87f05fc5a47fcfa8b200479708e427">00321</a> <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classting_1_1timer_1_1Timer.htm#a7e87f05fc5a47fcfa8b200479708e427" title="Start timer.">Timer::Start</a>(<a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">ting::u32</a> millisec){
<a name="l00322"></a>00322         <a class="code" href="debug_8hpp.htm#aaf04cfaa53d7b0bfcdeec60eaf7eed3a">ASSERT_INFO</a>(<a class="code" href="classting_1_1IntrusiveSingleton.htm#a0a9252ea1d59b7dcfe01853655c9d084" title="tells if singleton object is created or not.">Lib::IsCreated</a>(), <span class="stringliteral">&quot;Timer library is not initialized, you need to create TimerLib singletone object first&quot;</span>)
<a name="l00323"></a>00323 
<a name="l00324"></a>00324         <a class="code" href="classting_1_1IntrusiveSingleton.htm#a7a29320c2ac5be560f5609a03705365a" title="get singleton instance.">Lib::Inst</a>().thread.AddTimer_ts(<span class="keyword">this</span>, millisec);
<a name="l00325"></a>00325 }
<a name="l00326"></a>00326 
<a name="l00327"></a>00327 
<a name="l00328"></a>00328 
<a name="l00329"></a><a class="code" href="classting_1_1timer_1_1Timer.htm#a62fa9819488a73d50048799a6c063cd7">00329</a> <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="classting_1_1timer_1_1Timer.htm#a62fa9819488a73d50048799a6c063cd7" title="Stop the timer.">Timer::Stop</a>()throw(){
<a name="l00330"></a>00330         <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(<a class="code" href="classting_1_1IntrusiveSingleton.htm#a0a9252ea1d59b7dcfe01853655c9d084" title="tells if singleton object is created or not.">Lib::IsCreated</a>())
<a name="l00331"></a>00331         <span class="keywordflow">return</span> <a class="code" href="classting_1_1IntrusiveSingleton.htm#a7a29320c2ac5be560f5609a03705365a" title="get singleton instance.">Lib::Inst</a>().thread.RemoveTimer_ts(<span class="keyword">this</span>);
<a name="l00332"></a>00332 }
<a name="l00333"></a>00333 
<a name="l00334"></a>00334 
<a name="l00335"></a>00335 
<a name="l00336"></a>00336 <span class="keyword">inline</span> <a class="code" href="namespaceting.htm#aa8ad0b6936aac454c0459ee8f45c7863" title="Unsigned 64 bit type.">ting::u64</a> <a class="code" href="namespaceting_1_1timer.htm#a72fb8b874d0be624a06562c9ffc0d7bd" title="Get constantly increasing millisecond ticks.">Lib::TimerThread::GetTicks</a>(){
<a name="l00337"></a>00337         <a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">ting::u32</a> ticks = <a class="code" href="namespaceting_1_1timer.htm#a72fb8b874d0be624a06562c9ffc0d7bd" title="Get constantly increasing millisecond ticks.">ting::timer::GetTicks</a>() % Timer::DMaxTicks();
<a name="l00338"></a>00338 
<a name="l00339"></a>00339         <span class="keywordflow">if</span>(this-&gt;incTicks){
<a name="l00340"></a>00340                 <span class="keywordflow">if</span>(ticks &lt; Timer::DMaxTicks() / 2){
<a name="l00341"></a>00341                         this-&gt;incTicks = <span class="keyword">false</span>;
<a name="l00342"></a>00342                         this-&gt;ticks += (<a class="code" href="namespaceting.htm#aa8ad0b6936aac454c0459ee8f45c7863" title="Unsigned 64 bit type.">ting::u64</a>(Timer::DMaxTicks()) + 1); <span class="comment">//update 64 bit ticks counter</span>
<a name="l00343"></a>00343                 }
<a name="l00344"></a>00344         }<span class="keywordflow">else</span>{
<a name="l00345"></a>00345                 <span class="keywordflow">if</span>(ticks &gt; Timer::DMaxTicks() / 2){
<a name="l00346"></a>00346                         this-&gt;incTicks = <span class="keyword">true</span>;
<a name="l00347"></a>00347                 }
<a name="l00348"></a>00348         }
<a name="l00349"></a>00349 
<a name="l00350"></a>00350         <span class="keywordflow">return</span> this-&gt;ticks + <a class="code" href="namespaceting.htm#aa8ad0b6936aac454c0459ee8f45c7863" title="Unsigned 64 bit type.">ting::u64</a>(ticks);
<a name="l00351"></a>00351 }
<a name="l00352"></a>00352 
<a name="l00353"></a>00353 
<a name="l00354"></a>00354 
<a name="l00355"></a>00355 }<span class="comment">//~namespace</span>
<a name="l00356"></a>00356 }<span class="comment">//~namespace</span>
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="timer_8hpp.htm">timer.hpp</a>      </li>

    <li class="footer">Generated on Thu Feb 21 2013 20:36:35 for libting by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
