<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>libting: ting::Array&lt; T &gt; Class Template Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">libting
   &#160;<span id="projectnumber">2.0.0</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.htm"><span>Classes</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.htm"><span>Class&#160;List</span></a></li>
      <li><a href="classes.htm"><span>Class&#160;Index</span></a></li>
      <li><a href="hierarchy.htm"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.htm"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('classting_1_1Array.htm','');
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">ting::Array&lt; T &gt; Class Template Reference</div>  </div>
</div><!--header-->
<div class="contents">
<!-- doxytag: class="ting::Array" --><!-- doxytag: inherits="ting::Buffer" -->
<p>wrapper above new[]/delete[].  
 <a href="classting_1_1Array.htm#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="Array_8hpp_source.htm">Array.hpp</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for ting::Array&lt; T &gt;:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classting_1_1Array.png" usemap="#ting::Array&lt; T &gt;_map" alt=""/>
  <map id="ting::Array&lt; T &gt;_map" name="ting::Array&lt; T &gt;_map">
<area href="classting_1_1Buffer.htm" title="Memory buffer wrapper template class." alt="ting::Buffer&lt; T &gt;" shape="rect" coords="0,0,104,24"/>
</map>
 </div></div>

<p><a href="classting_1_1Array-members.htm">List of all members.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef void(Array::*&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1Array.htm#a6c9a3f282f637bb6e5585a1730dd66d4">unspecified_bool_type</a> )()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts to bool.  <a href="#a6c9a3f282f637bb6e5585a1730dd66d4"></a><br/></td></tr>
<tr><td colspan="2"><h2><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1Array.htm#a59d6fb021f80eda23043baafc2f0bf58">Array</a> (size_t arraySize=0)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates new array of requested size.  <a href="#a59d6fb021f80eda23043baafc2f0bf58"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1Array.htm#aa680aec4c34b15f37e90a1aa12205b26">Array</a> (const <a class="el" href="classting_1_1Buffer.htm">ting::Buffer</a>&lt; const T &gt; &amp;b)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates new <a class="el" href="classting_1_1Array.htm" title="wrapper above new[]/delete[].">Array</a> containing copy of given buffer contents.  <a href="#aa680aec4c34b15f37e90a1aa12205b26"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1Array.htm#a5844d7598a08f66ee96bb2ae2f79f4c6">Array</a> (const <a class="el" href="classting_1_1Array.htm">Array</a> &amp;a)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Copy constructor, works as auto-pointer.  <a href="#a5844d7598a08f66ee96bb2ae2f79f4c6"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classting_1_1Array.htm">Array</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1Array.htm#ab8a7736487146584c1628a4540395d48">operator=</a> (const <a class="el" href="classting_1_1Array.htm">Array</a> &amp;a)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Assignment operator, works as auto-pointer.  <a href="#ab8a7736487146584c1628a4540395d48"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1Array.htm#a55327acb2f0bbc8107dfec172bae388a">~Array</a> ()  throw ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1Array.htm#a8c88d053dd3a56f09459ed3b5a87beaf">Init</a> (size_t arraySize)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">initialize array with new memory buffer of given size.  <a href="#a8c88d053dd3a56f09459ed3b5a87beaf"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1Array.htm#a9471911a8950fb7ee557ca272608868f">Init</a> (const <a class="el" href="classting_1_1Buffer.htm">ting::Buffer</a>&lt; const T &gt; &amp;b)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">initialize array with the copy of given buffer contents.  <a href="#a9471911a8950fb7ee557ca272608868f"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1Array.htm#a17b530cca6e388418cdd35b70ff6745e">IsValid</a> () const   throw ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns true if <a class="el" href="classting_1_1Array.htm" title="wrapper above new[]/delete[].">Array</a> is allocated.  <a href="#a17b530cca6e388418cdd35b70ff6745e"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1Array.htm#ac597495916260174e6270e64ac80b3ca">IsNotValid</a> () const   throw ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">inverse of <a class="el" href="classting_1_1Array.htm#a17b530cca6e388418cdd35b70ff6745e" title="returns true if Array is allocated.">Array::IsValid()</a>.  <a href="#ac597495916260174e6270e64ac80b3ca"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1Array.htm#aea00020fe243702f4247594e569e7d8a">operator unspecified_bool_type</a> () const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1Array.htm#ab15fdd2519ca706d00ab9222982f6c3b">Reset</a> ()  throw ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">free array memory buffer.  <a href="#ab15fdd2519ca706d00ab9222982f6c3b"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1Array.htm#a93c9db9fec1cc7fab6dda8c435863098">operator const Array&lt; const T &gt; &amp;</a> () const   throw ()</td></tr>
</table>
<hr/><a name="details" id="details"></a><h2>Detailed Description</h2>
<div class="textblock"><h3>template&lt;class T&gt;<br/>
class ting::Array&lt; T &gt;</h3>

<p>wrapper above new[]/delete[]. </p>
<p>This template class is a wrapper above new[]/delete[] operators. Note that it behaves like auto-pointer. It defines <a class="el" href="classting_1_1Array.htm#ab8a7736487146584c1628a4540395d48" title="Assignment operator, works as auto-pointer.">operator=()</a> and copy constructor and when one class instance is assigned (by <a class="el" href="classting_1_1Array.htm#ab8a7736487146584c1628a4540395d48" title="Assignment operator, works as auto-pointer.">operator=()</a> or copy constructor) to another, the first one becomes invalid while the second becomes valid and acquires the memory buffer from first. </p>
</div><hr/><h2>Member Typedef Documentation</h2>
<a class="anchor" id="a6c9a3f282f637bb6e5585a1730dd66d4"></a><!-- doxytag: member="ting::Array::unspecified_bool_type" ref="a6c9a3f282f637bb6e5585a1730dd66d4" args=")()" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">typedef void(Array::* <a class="el" href="classting_1_1Array.htm">ting::Array</a>&lt; T &gt;::<a class="el" href="classting_1_1Array.htm#a6c9a3f282f637bb6e5585a1730dd66d4">unspecified_bool_type</a>)()</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Converts to bool. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>bool - value of <a class="el" href="classting_1_1Array.htm#a17b530cca6e388418cdd35b70ff6745e" title="returns true if Array is allocated.">Array::IsValid()</a>. </dd></dl>

</div>
</div>
<hr/><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="a59d6fb021f80eda23043baafc2f0bf58"></a><!-- doxytag: member="ting::Array::Array" ref="a59d6fb021f80eda23043baafc2f0bf58" args="(size_t arraySize=0)" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classting_1_1Array.htm">ting::Array</a>&lt; T &gt;::<a class="el" href="classting_1_1Array.htm">Array</a> </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>arraySize</em> = <code>0</code></td><td>)</td>
          <td><code> [inline, explicit]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Creates new array of requested size. </p>
<p>Creates new array of requested size. Note, that it will call new[], so it will initialize all the elements by calling default constructor of the element class for each element. </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">arraySize</td><td>- number of elements this array should hold. If 0 is supplied then memory is not allocated and the created <a class="el" href="classting_1_1Array.htm" title="wrapper above new[]/delete[].">Array</a> object is not valid (<a class="el" href="classting_1_1Array.htm#a17b530cca6e388418cdd35b70ff6745e" title="returns true if Array is allocated.">Array::IsValid()</a> will return false). </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="aa680aec4c34b15f37e90a1aa12205b26"></a><!-- doxytag: member="ting::Array::Array" ref="aa680aec4c34b15f37e90a1aa12205b26" args="(const ting::Buffer&lt; const T &gt; &amp;b)" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classting_1_1Array.htm">ting::Array</a>&lt; T &gt;::<a class="el" href="classting_1_1Array.htm">Array</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classting_1_1Buffer.htm">ting::Buffer</a>&lt; const T &gt; &amp;&#160;</td>
          <td class="paramname"><em>b</em></td><td>)</td>
          <td><code> [inline, explicit]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Creates new <a class="el" href="classting_1_1Array.htm" title="wrapper above new[]/delete[].">Array</a> containing copy of given buffer contents. </p>
<p>Creates a new <a class="el" href="classting_1_1Array.htm" title="wrapper above new[]/delete[].">Array</a> instance of the same size as the given buffer. The contents of that newly created <a class="el" href="classting_1_1Array.htm" title="wrapper above new[]/delete[].">Array</a> are initialized to the contents of the given buffer, i.e. all the array elements are created using copy constructors. </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">b</td><td>- the buffer from which the data will be copied. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a5844d7598a08f66ee96bb2ae2f79f4c6"></a><!-- doxytag: member="ting::Array::Array" ref="a5844d7598a08f66ee96bb2ae2f79f4c6" args="(const Array &amp;a)" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classting_1_1Array.htm">ting::Array</a>&lt; T &gt;::<a class="el" href="classting_1_1Array.htm">Array</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classting_1_1Array.htm">Array</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>a</em></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Copy constructor, works as auto-pointer. </p>
<p>Creates a copy of 'a'. This copy constructor works as auto-pointer. This means that if creating <a class="el" href="classting_1_1Array.htm" title="wrapper above new[]/delete[].">Array</a> object like this: Array&lt;int&gt; a(10);//create array 'a' Array&lt;int&gt; b(a);//create array 'b' using copy constructor then 'a' will become invalid while 'b' will hold pointer to the memory buffer which 'a' was holding before. I.e. when using copy constructor, no memory allocation occurs, the memory buffer kept by 'a' is moved to 'b' and 'a' is invalidated. </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>- <a class="el" href="classting_1_1Array.htm" title="wrapper above new[]/delete[].">Array</a> object to copy. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a55327acb2f0bbc8107dfec172bae388a"></a><!-- doxytag: member="ting::Array::~Array" ref="a55327acb2f0bbc8107dfec172bae388a" args="()" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classting_1_1Array.htm">ting::Array</a>&lt; T &gt;::~<a class="el" href="classting_1_1Array.htm">Array</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td>  throw ()<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<hr/><h2>Member Function Documentation</h2>
<a class="anchor" id="a8c88d053dd3a56f09459ed3b5a87beaf"></a><!-- doxytag: member="ting::Array::Init" ref="a8c88d053dd3a56f09459ed3b5a87beaf" args="(size_t arraySize)" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classting_1_1Array.htm">ting::Array</a>&lt; T &gt;::<a class="el" href="classting_1_1Array.htm#a8c88d053dd3a56f09459ed3b5a87beaf">Init</a> </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>arraySize</em></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>initialize array with new memory buffer of given size. </p>
<p>If array was already initialized then the memory buffer is freed (using delete[]) and new memory buffer of requested size is allocated. </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">arraySize</td><td>- number of elements this array should hold. If 0 is supplied then array will become invalid. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a9471911a8950fb7ee557ca272608868f"></a><!-- doxytag: member="ting::Array::Init" ref="a9471911a8950fb7ee557ca272608868f" args="(const ting::Buffer&lt; const T &gt; &amp;b)" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classting_1_1Array.htm">ting::Array</a>&lt; T &gt;::<a class="el" href="classting_1_1Array.htm#a8c88d053dd3a56f09459ed3b5a87beaf">Init</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classting_1_1Buffer.htm">ting::Buffer</a>&lt; const T &gt; &amp;&#160;</td>
          <td class="paramname"><em>b</em></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>initialize array with the copy of given buffer contents. </p>
<p>The contents of this <a class="el" href="classting_1_1Array.htm" title="wrapper above new[]/delete[].">Array</a> are initialized to the contents of the given buffer, i.e. all the array elements are created using copy constructors. </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">b</td><td>- the buffer from which the data will be copied. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ac597495916260174e6270e64ac80b3ca"></a><!-- doxytag: member="ting::Array::IsNotValid" ref="ac597495916260174e6270e64ac80b3ca" args="() const " -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classting_1_1Array.htm">ting::Array</a>&lt; T &gt;::<a class="el" href="classting_1_1Array.htm#ac597495916260174e6270e64ac80b3ca">IsNotValid</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const  throw ()<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>inverse of <a class="el" href="classting_1_1Array.htm#a17b530cca6e388418cdd35b70ff6745e" title="returns true if Array is allocated.">Array::IsValid()</a>. </p>
<p>Inverse of <a class="el" href="classting_1_1Array.htm#a17b530cca6e388418cdd35b70ff6745e" title="returns true if Array is allocated.">Array::IsValid()</a>. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>true - if <a class="el" href="classting_1_1Array.htm" title="wrapper above new[]/delete[].">Array</a> is not valid. </dd>
<dd>
false - if <a class="el" href="classting_1_1Array.htm" title="wrapper above new[]/delete[].">Array</a> is valid. </dd></dl>

</div>
</div>
<a class="anchor" id="a17b530cca6e388418cdd35b70ff6745e"></a><!-- doxytag: member="ting::Array::IsValid" ref="a17b530cca6e388418cdd35b70ff6745e" args="() const " -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classting_1_1Array.htm">ting::Array</a>&lt; T &gt;::<a class="el" href="classting_1_1Array.htm#a17b530cca6e388418cdd35b70ff6745e">IsValid</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const  throw ()<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>returns true if <a class="el" href="classting_1_1Array.htm" title="wrapper above new[]/delete[].">Array</a> is allocated. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>true - if this <a class="el" href="classting_1_1Array.htm" title="wrapper above new[]/delete[].">Array</a> object holds memory buffer of not zero size. </dd>
<dd>
false - if this <a class="el" href="classting_1_1Array.htm" title="wrapper above new[]/delete[].">Array</a> object does not hold any memory buffer. </dd></dl>

</div>
</div>
<a class="anchor" id="a93c9db9fec1cc7fab6dda8c435863098"></a><!-- doxytag: member="ting::Array::operator const Array&lt; const T &gt; &amp;" ref="a93c9db9fec1cc7fab6dda8c435863098" args="() const " -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classting_1_1Array.htm">ting::Array</a>&lt; T &gt;::operator const <a class="el" href="classting_1_1Array.htm">Array</a>&lt; const T &gt; &amp; </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const  throw ()<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="aea00020fe243702f4247594e569e7d8a"></a><!-- doxytag: member="ting::Array::operator unspecified_bool_type" ref="aea00020fe243702f4247594e569e7d8a" args="() const " -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classting_1_1Array.htm">ting::Array</a>&lt; T &gt;::operator <a class="el" href="classting_1_1Array.htm#a6c9a3f282f637bb6e5585a1730dd66d4">unspecified_bool_type</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="ab8a7736487146584c1628a4540395d48"></a><!-- doxytag: member="ting::Array::operator=" ref="ab8a7736487146584c1628a4540395d48" args="(const Array &amp;a)" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classting_1_1Array.htm">Array</a>&amp; <a class="el" href="classting_1_1Array.htm">ting::Array</a>&lt; T &gt;::operator= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classting_1_1Array.htm">Array</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>a</em></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Assignment operator, works as auto-pointer. </p>
<p>This operator works the same way as copy constructor does. That is, if assignng like this: Array&lt;int&gt; b(20), a(10); b = a; then 'a' will become invalid and 'b' will hold the memory buffer owned by 'a' before. Note, that memory buffer owned by 'b' prior to assignment is freed and destructors are called on every element of the buffer (i.e. buffer is freed using delete[] operator). Thus, no memory leak occurs. </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">a</td><td>- <a class="el" href="classting_1_1Array.htm" title="wrapper above new[]/delete[].">Array</a> object to assign from. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ab15fdd2519ca706d00ab9222982f6c3b"></a><!-- doxytag: member="ting::Array::Reset" ref="ab15fdd2519ca706d00ab9222982f6c3b" args="()" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classting_1_1Array.htm">ting::Array</a>&lt; T &gt;::<a class="el" href="classting_1_1Array.htm#ab15fdd2519ca706d00ab9222982f6c3b">Reset</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td>  throw ()<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>free array memory buffer. </p>
<p>Frees memory buffer hold by <a class="el" href="classting_1_1Array.htm" title="wrapper above new[]/delete[].">Array</a> object (if any). After that the <a class="el" href="classting_1_1Array.htm" title="wrapper above new[]/delete[].">Array</a> object becomes invalid. </p>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="Array_8hpp_source.htm">Array.hpp</a></li>
</ul>
</div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="namespaceting.htm">ting</a>      </li>
      <li class="navelem"><a class="el" href="classting_1_1Array.htm">Array</a>      </li>

    <li class="footer">Generated on Thu Feb 21 2013 20:36:36 for libting by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
