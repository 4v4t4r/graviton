<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>libting: atomic.hpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">libting
   &#160;<span id="projectnumber">2.0.0</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.htm"><span>File&#160;List</span></a></li>
      <li><a href="globals.htm"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('atomic_8hpp.htm','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">atomic.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="atomic_8hpp.htm">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* The MIT License:</span>
<a name="l00002"></a>00002 <span class="comment"></span>
<a name="l00003"></a>00003 <span class="comment">Copyright (c) 2011-2012 Ivan Gagis &lt;igagis@gmail.com&gt;</span>
<a name="l00004"></a>00004 <span class="comment"></span>
<a name="l00005"></a>00005 <span class="comment">Permission is hereby granted, free of charge, to any person obtaining a copy</span>
<a name="l00006"></a>00006 <span class="comment">of this software and associated documentation files (the &quot;Software&quot;), to deal</span>
<a name="l00007"></a>00007 <span class="comment">in the Software without restriction, including without limitation the rights</span>
<a name="l00008"></a>00008 <span class="comment">to use, copy, modify, merge, publish, distribute, sublicense, and/or sell</span>
<a name="l00009"></a>00009 <span class="comment">copies of the Software, and to permit persons to whom the Software is</span>
<a name="l00010"></a>00010 <span class="comment">furnished to do so, subject to the following conditions:</span>
<a name="l00011"></a>00011 <span class="comment"></span>
<a name="l00012"></a>00012 <span class="comment">The above copyright notice and this permission notice shall be included in</span>
<a name="l00013"></a>00013 <span class="comment">all copies or substantial portions of the Software.</span>
<a name="l00014"></a>00014 <span class="comment"></span>
<a name="l00015"></a>00015 <span class="comment">THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span>
<a name="l00016"></a>00016 <span class="comment">IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span>
<a name="l00017"></a>00017 <span class="comment">FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span>
<a name="l00018"></a>00018 <span class="comment">AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span>
<a name="l00019"></a>00019 <span class="comment">LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span>
<a name="l00020"></a>00020 <span class="comment">OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN</span>
<a name="l00021"></a>00021 <span class="comment">THE SOFTWARE. */</span>
<a name="l00022"></a>00022 
<a name="l00023"></a>00023 <span class="comment">// Home page: http://ting.googlecode.com</span>
<a name="l00024"></a>00024 
<a name="l00025"></a>00025 
<a name="l00026"></a>00026 
<a name="l00032"></a>00032 <span class="preprocessor">#pragma once</span>
<a name="l00033"></a>00033 <span class="preprocessor"></span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &quot;<a class="code" href="config_8hpp.htm">config.hpp</a>&quot;</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &quot;<a class="code" href="debug_8hpp.htm">debug.hpp</a>&quot;</span>
<a name="l00036"></a>00036 <span class="preprocessor">#include &quot;<a class="code" href="types_8hpp.htm" title="General types definitions.">types.hpp</a>&quot;</span>
<a name="l00037"></a>00037 <span class="preprocessor">#include &quot;<a class="code" href="util_8hpp.htm">util.hpp</a>&quot;</span>
<a name="l00038"></a>00038 <span class="preprocessor">#include &quot;<a class="code" href="Thread_8hpp.htm" title="Multithreading library.">mt/Thread.hpp</a>&quot;</span>
<a name="l00039"></a>00039 
<a name="l00040"></a>00040 
<a name="l00041"></a>00041 
<a name="l00042"></a>00042 <span class="preprocessor">#if M_CPU == M_CPU_X86 || \</span>
<a name="l00043"></a>00043 <span class="preprocessor">                M_CPU == M_CPU_X86_64 || \</span>
<a name="l00044"></a>00044 <span class="preprocessor">                (M_CPU == M_CPU_ARM &amp;&amp; M_CPU_ARM_THUMB != 1)</span>
<a name="l00045"></a>00045 <span class="preprocessor"></span>
<a name="l00046"></a>00046 <span class="preprocessor">#else</span>
<a name="l00047"></a><a class="code" href="atomic_8hpp.htm#a45ee8aa512a0fb53616a19c2675d156f">00047</a> <span class="preprocessor"></span><span class="preprocessor">#       define M_ATOMIC_USE_MUTEX_FALLBACK</span>
<a name="l00048"></a>00048 <span class="preprocessor"></span><span class="preprocessor">#       include &quot;<a class="code" href="Mutex_8hpp.htm">mt/Mutex.hpp</a>&quot;</span>
<a name="l00049"></a>00049 <span class="preprocessor">#endif</span>
<a name="l00050"></a>00050 <span class="preprocessor"></span>
<a name="l00051"></a>00051 
<a name="l00052"></a>00052 
<a name="l00053"></a>00053 <span class="keyword">namespace </span>ting{
<a name="l00054"></a><a class="code" href="namespaceting_1_1atomic.htm">00054</a> <span class="keyword">namespace </span>atomic{
<a name="l00055"></a>00055 
<a name="l00056"></a>00056 <span class="comment">//forward declarations</span>
<a name="l00057"></a>00057 <span class="keyword">class </span><a class="code" href="classting_1_1atomic_1_1SpinLock.htm" title="Spinlock class.">SpinLock</a>;
<a name="l00058"></a>00058 <span class="keyword">class </span><a class="code" href="classting_1_1atomic_1_1S32.htm" title="Atomic signed 32bit integer.">S32</a>;
<a name="l00059"></a>00059 
<a name="l00060"></a>00060 
<a name="l00061"></a>00061 
<a name="l00066"></a>00066 <span class="comment">//On most architectures, atomic operations require that the value to be naturally aligned (4 bytes = sizeof(int)).</span>
<a name="l00067"></a>00067 <span class="preprocessor">#ifndef M_DOXYGEN_DONT_EXTRACT //for doxygen</span>
<a name="l00068"></a>00068 <span class="preprocessor"></span>
<a name="l00069"></a>00069 <span class="comment">//make sure theat we align by int size when using MSVC compiler.</span>
<a name="l00070"></a>00070 <a class="code" href="debug_8hpp.htm#ac34bd49b9b8483a2b40c61e7607fd878">STATIC_ASSERT</a>(<span class="keyword">sizeof</span>(<span class="keywordtype">int</span>) == 4)
<a name="l00071"></a>00071 
<a name="l00072"></a>00072 M_DECLARE_ALIGNED_MSVC(4)
<a name="l00073"></a>00073 <span class="preprocessor">#endif</span>
<a name="l00074"></a><a class="code" href="classting_1_1atomic_1_1Flag.htm">00074</a> <span class="preprocessor"></span><span class="keyword">class </span><a class="code" href="classting_1_1atomic_1_1Flag.htm" title="Atomic flag.">Flag</a>{
<a name="l00075"></a>00075         <span class="comment">//declare these classes as friends so they will be able to access the memory barrier function</span>
<a name="l00076"></a><a class="code" href="classting_1_1atomic_1_1Flag.htm#a9689b57d002b326b599815928b9f991c">00076</a>         <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classting_1_1atomic_1_1SpinLock.htm" title="Spinlock class.">atomic::SpinLock</a>;
<a name="l00077"></a><a class="code" href="classting_1_1atomic_1_1Flag.htm#a761759cfd7c6013e3507ebbba0d0ecbb">00077</a>         <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classting_1_1atomic_1_1S32.htm" title="Atomic signed 32bit integer.">atomic::S32</a>;
<a name="l00078"></a>00078 
<a name="l00079"></a>00079         <span class="keyword">inline</span> <span class="keyword">static</span> <span class="keywordtype">void</span> MemoryBarrier()throw(){
<a name="l00080"></a>00080 <span class="preprocessor">#if defined(M_ATOMIC_USE_MUTEX_FALLBACK)</span>
<a name="l00081"></a>00081 <span class="preprocessor"></span>                <span class="comment">//do nothing</span>
<a name="l00082"></a>00082 
<a name="l00083"></a>00083 <span class="preprocessor">#elif M_CPU == M_CPU_X86 || M_CPU == M_CPU_X86_64</span>
<a name="l00084"></a>00084 <span class="preprocessor"></span>                <span class="comment">//do nothing, because locked operations on x86 make memory barrier</span>
<a name="l00085"></a>00085 
<a name="l00086"></a>00086 <span class="preprocessor">#elif M_CPU == M_CPU_ARM &amp;&amp; M_CPU_VERSION &gt;= 7 &amp;&amp; M_CPU_ARM_THUMB != 1 //DMB instruction is available only on ARMv7</span>
<a name="l00087"></a>00087 <span class="preprocessor"></span>                __asm__ __volatile__(
<a name="l00088"></a>00088                                 <span class="stringliteral">&quot;dmb&quot;</span> : : :<span class="stringliteral">&quot;memory&quot;</span> <span class="comment">//modifies &quot;memory&quot; is for compiler barrier to avoid instruction reordering by compiler</span>
<a name="l00089"></a>00089                         );
<a name="l00090"></a>00090 
<a name="l00091"></a>00091 <span class="preprocessor">#elif M_CPU == M_CPU_ARM &amp;&amp; M_CPU_ARM_THUMB != 1 //for older ARMs use CP15 data memory barrier operation</span>
<a name="l00092"></a>00092 <span class="preprocessor"></span>                __asm__ __volatile__(
<a name="l00093"></a>00093                                 <span class="stringliteral">&quot;mcr p15, 0, %0, c7, c10, 5&quot;</span> : :<span class="stringliteral">&quot;r&quot;</span>(1) :<span class="stringliteral">&quot;memory&quot;</span> <span class="comment">//modifies &quot;memory&quot; is for compiler barrier to avoid instruction reordering by compiler</span>
<a name="l00094"></a>00094                         );
<a name="l00095"></a>00095 
<a name="l00096"></a>00096 <span class="preprocessor">#elif M_CPU == M_CPU_ARM &amp;&amp; M_CPU_ARM_THUMB == 1</span>
<a name="l00097"></a>00097 <span class="preprocessor"></span><span class="preprocessor">#       error &quot;ARM Thumb-1 mode does not support atomic operations&quot;</span>
<a name="l00098"></a>00098 <span class="preprocessor"></span>
<a name="l00099"></a>00099 <span class="preprocessor">#else</span>
<a name="l00100"></a>00100 <span class="preprocessor"></span><span class="preprocessor">#       error &quot;ASSERT(false)&quot;</span>
<a name="l00101"></a>00101 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00102"></a>00102 <span class="preprocessor"></span>        }
<a name="l00103"></a>00103 
<a name="l00104"></a>00104 
<a name="l00105"></a>00105 
<a name="l00106"></a>00106 <span class="preprocessor">#if defined(M_ATOMIC_USE_MUTEX_FALLBACK)</span>
<a name="l00107"></a>00107 <span class="preprocessor"></span>        <a class="code" href="classting_1_1mt_1_1Mutex.htm" title="Mutex object class Mutex stands for &quot;Mutual execution&quot;.">ting::mt::Mutex</a> <a class="code" href="atomic_8hpp.htm#a6334cfeab8b0e3af50dc82ebca4431bf">mutex</a>;
<a name="l00108"></a>00108         <span class="keyword">volatile</span> <span class="keywordtype">bool</span> <a class="code" href="atomic_8hpp.htm#a606c82003e3aa49e5baad6ad20278bbe">flag</a>;
<a name="l00109"></a>00109 <span class="preprocessor">#elif M_CPU == M_CPU_X86 || \</span>
<a name="l00110"></a>00110 <span class="preprocessor">                M_CPU == M_CPU_X86_64 || \</span>
<a name="l00111"></a>00111 <span class="preprocessor">                M_CPU == M_CPU_ARM</span>
<a name="l00112"></a>00112 <span class="preprocessor"></span>
<a name="l00113"></a>00113         <span class="keyword">volatile</span> <span class="keywordtype">int</span> <a class="code" href="atomic_8hpp.htm#a606c82003e3aa49e5baad6ad20278bbe">flag</a>;
<a name="l00114"></a>00114 
<a name="l00115"></a>00115 <span class="preprocessor">#else</span>
<a name="l00116"></a>00116 <span class="preprocessor"></span><span class="preprocessor">#       error &quot;ASSERT(false)&quot;</span>
<a name="l00117"></a>00117 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00118"></a>00118 <span class="preprocessor"></span>
<a name="l00119"></a>00119 <span class="keyword">public</span>:
<a name="l00124"></a><a class="code" href="classting_1_1atomic_1_1Flag.htm#acfec5a5260c5bedbf214984f7782e5e9">00124</a>         <span class="keyword">inline</span> <a class="code" href="classting_1_1atomic_1_1Flag.htm#acfec5a5260c5bedbf214984f7782e5e9" title="Constructor.">Flag</a>(<span class="keywordtype">bool</span> initialValue = <span class="keyword">false</span>){
<a name="l00125"></a>00125 <span class="preprocessor">#if defined(M_ATOMIC_USE_MUTEX_FALLBACK) || \</span>
<a name="l00126"></a>00126 <span class="preprocessor">                M_CPU == M_CPU_X86 || \</span>
<a name="l00127"></a>00127 <span class="preprocessor">                M_CPU == M_CPU_X86_64 || \</span>
<a name="l00128"></a>00128 <span class="preprocessor">                M_CPU == M_CPU_ARM</span>
<a name="l00129"></a>00129 <span class="preprocessor"></span>
<a name="l00130"></a>00130                 this-&gt;<a class="code" href="classting_1_1atomic_1_1Flag.htm#aaf2f8d87fa57ffe254dc119360e48c18" title="Set the flag value.">Set</a>(initialValue);
<a name="l00131"></a>00131 
<a name="l00132"></a>00132 <span class="preprocessor">#else</span>
<a name="l00133"></a>00133 <span class="preprocessor"></span><span class="preprocessor">#       error &quot;ASSERT(false)&quot;</span>
<a name="l00134"></a>00134 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00135"></a>00135 <span class="preprocessor"></span>        }
<a name="l00136"></a>00136 
<a name="l00137"></a>00137 
<a name="l00138"></a>00138 
<a name="l00145"></a><a class="code" href="classting_1_1atomic_1_1Flag.htm#a7ed5ef6ce39c333345ea72ece34718a2">00145</a>         <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="classting_1_1atomic_1_1Flag.htm#a7ed5ef6ce39c333345ea72ece34718a2" title="Gets the current flag value.">Get</a>()<span class="keyword">const</span> throw(){
<a name="l00146"></a>00146 <span class="preprocessor">#if M_COMPILER == M_COMPILER_MSVC</span>
<a name="l00147"></a>00147 <span class="preprocessor"></span>                <span class="keywordflow">return</span> this-&gt;<a class="code" href="atomic_8hpp.htm#a606c82003e3aa49e5baad6ad20278bbe">flag</a> == 0 ? <span class="keyword">false</span> : <span class="keyword">true</span>; <span class="comment">//this is to avoid compiler warning</span>
<a name="l00148"></a>00148 <span class="preprocessor">#else</span>
<a name="l00149"></a>00149 <span class="preprocessor"></span>                <span class="keywordflow">return</span> this-&gt;<a class="code" href="atomic_8hpp.htm#a606c82003e3aa49e5baad6ad20278bbe">flag</a>;
<a name="l00150"></a>00150 <span class="preprocessor">#endif</span>
<a name="l00151"></a>00151 <span class="preprocessor"></span>        }
<a name="l00152"></a>00152 
<a name="l00153"></a>00153 
<a name="l00154"></a>00154 
<a name="l00162"></a><a class="code" href="classting_1_1atomic_1_1Flag.htm#aaf2f8d87fa57ffe254dc119360e48c18">00162</a>         <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="classting_1_1atomic_1_1Flag.htm#aaf2f8d87fa57ffe254dc119360e48c18" title="Set the flag value.">Set</a>(<span class="keywordtype">bool</span> value = <span class="keyword">true</span>)throw(){
<a name="l00163"></a>00163 <span class="preprocessor">#if defined(M_ATOMIC_USE_MUTEX_FALLBACK)</span>
<a name="l00164"></a>00164 <span class="preprocessor"></span>                {
<a name="l00165"></a>00165                         <a class="code" href="classting_1_1mt_1_1Mutex_1_1Guard.htm" title="Helper class which automatically Locks the given mutex.">ting::mt::Mutex::Guard</a> mutexGuard(this-&gt;<a class="code" href="atomic_8hpp.htm#a6334cfeab8b0e3af50dc82ebca4431bf">mutex</a>);
<a name="l00166"></a>00166                         <span class="keywordtype">bool</span> old = this-&gt;<a class="code" href="atomic_8hpp.htm#a606c82003e3aa49e5baad6ad20278bbe">flag</a>;
<a name="l00167"></a>00167                         this-&gt;<a class="code" href="atomic_8hpp.htm#a606c82003e3aa49e5baad6ad20278bbe">flag</a> = value;
<a name="l00168"></a>00168                         <span class="keywordflow">return</span> old;
<a name="l00169"></a>00169                 }
<a name="l00170"></a>00170 <span class="preprocessor">#elif M_CPU == M_CPU_X86 || M_CPU == M_CPU_X86_64</span>
<a name="l00171"></a>00171 <span class="preprocessor"></span>                <span class="keywordtype">int</span> old;
<a name="l00172"></a>00172 <span class="preprocessor">#       if M_COMPILER == M_COMPILER_MSVC</span>
<a name="l00173"></a>00173 <span class="preprocessor"></span>                __asm{
<a name="l00174"></a>00174                         mov ebx, <span class="keyword">this</span>
<a name="l00175"></a>00175                         xor eax, eax
<a name="l00176"></a>00176                         mov al, value
<a name="l00177"></a>00177                         lock xchg eax, [ebx].flag
<a name="l00178"></a>00178                         mov [old], eax
<a name="l00179"></a>00179                 }
<a name="l00180"></a>00180                 <span class="keywordflow">return</span> old == 0 ? <span class="keyword">false</span> : <span class="keyword">true</span>; <span class="comment">// this ternary ? : stuff is to avoid compiler warning</span>
<a name="l00181"></a>00181 <span class="preprocessor">#       else</span>
<a name="l00182"></a>00182 <span class="preprocessor"></span>                __asm__ __volatile__(
<a name="l00183"></a>00183                                 <span class="stringliteral">&quot;lock; xchgl %0, %1&quot;</span>
<a name="l00184"></a>00184                                                 : <span class="stringliteral">&quot;=r&quot;</span>(old), <span class="stringliteral">&quot;=m&quot;</span>(this-&gt;<a class="code" href="atomic_8hpp.htm#a606c82003e3aa49e5baad6ad20278bbe">flag</a>)
<a name="l00185"></a>00185                                                 : <span class="stringliteral">&quot;0&quot;</span>(<span class="keywordtype">int</span>(value)), <span class="stringliteral">&quot;m&quot;</span>(this-&gt;<a class="code" href="atomic_8hpp.htm#a606c82003e3aa49e5baad6ad20278bbe">flag</a>)
<a name="l00186"></a>00186                                                 : <span class="stringliteral">&quot;memory&quot;</span>
<a name="l00187"></a>00187                         );
<a name="l00188"></a>00188                 <span class="keywordflow">return</span> old;
<a name="l00189"></a>00189 <span class="preprocessor">#       endif</span>
<a name="l00190"></a>00190 <span class="preprocessor"></span>
<a name="l00191"></a>00191 <span class="preprocessor">#elif M_CPU == M_CPU_ARM</span>
<a name="l00192"></a>00192 <span class="preprocessor"></span>                <span class="keywordtype">int</span> old;
<a name="l00193"></a>00193 <span class="preprocessor">#       if M_CPU_VERSION &gt;= 6 //should support ldrex/strex instructions unless Thumb-1 mode is used</span>
<a name="l00194"></a>00194 <span class="preprocessor"></span><span class="preprocessor">#               if M_CPU_ARM_THUMB == 1 //Thumb-1 mode does not support ldrex/strex instructions, use interrupts disabling</span>
<a name="l00195"></a>00195 <span class="preprocessor"></span><span class="preprocessor">#                       error &quot;Not implemented&quot;</span>
<a name="l00196"></a>00196 <span class="preprocessor"></span>                <a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">ting::u32</a> tmp;
<a name="l00197"></a>00197                 __asm__ __volatile__(
<a name="l00198"></a>00198                                 <span class="stringliteral">&quot;mrs    %0, PRIMASK&quot;</span> <span class="stringliteral">&quot;\n&quot;</span> <span class="comment">//save interrupts mask</span>
<a name="l00199"></a>00199                                 <span class="stringliteral">&quot;cpsid  i&quot;</span>           <span class="stringliteral">&quot;\n&quot;</span> <span class="comment">//disable pioratizable interrupts</span>
<a name="l00200"></a>00200                                 <span class="stringliteral">&quot;mov    %3, %1&quot;</span>      <span class="stringliteral">&quot;\n&quot;</span>
<a name="l00201"></a>00201                                 <span class="stringliteral">&quot;mov    %2, %3&quot;</span>      <span class="stringliteral">&quot;\n&quot;</span>
<a name="l00202"></a>00202                                 <span class="stringliteral">&quot;msr    PRIMASK, %0&quot;</span> <span class="stringliteral">&quot;\n&quot;</span> <span class="comment">//restore interrupts mask</span>
<a name="l00203"></a>00203                                                 : <span class="stringliteral">&quot;=r&quot;</span>(tmp), <span class="stringliteral">&quot;=r&quot;</span>(old)
<a name="l00204"></a>00204                                                 : <span class="stringliteral">&quot;r&quot;</span>(value), <span class="stringliteral">&quot;r&quot;</span>(&amp;this-&gt;<a class="code" href="atomic_8hpp.htm#a606c82003e3aa49e5baad6ad20278bbe">flag</a>)
<a name="l00205"></a>00205                                                 : <span class="stringliteral">&quot;memory&quot;</span>
<a name="l00206"></a>00206                         );
<a name="l00207"></a>00207 <span class="preprocessor">#               else //Thumb2 or not thumb mode at all</span>
<a name="l00208"></a>00208 <span class="preprocessor"></span>                <span class="keywordtype">int</span> res;
<a name="l00209"></a>00209                 __asm__ __volatile__(
<a name="l00210"></a>00210                                 <span class="stringliteral">&quot;1:&quot;</span>                       <span class="stringliteral">&quot;\n&quot;</span>
<a name="l00211"></a>00211                                 <span class="stringliteral">&quot;       ldrex    %0, [%3]&quot;</span>     <span class="stringliteral">&quot;\n&quot;</span>
<a name="l00212"></a>00212                                 <span class="stringliteral">&quot;       strex    %1, %2, [%3]&quot;</span> <span class="stringliteral">&quot;\n&quot;</span>
<a name="l00213"></a>00213                                 <span class="stringliteral">&quot;       teq      %1, #0&quot;</span>       <span class="stringliteral">&quot;\n&quot;</span>
<a name="l00214"></a>00214                                 <span class="stringliteral">&quot;       bne      1b&quot;</span>           <span class="stringliteral">&quot;\n&quot;</span>
<a name="l00215"></a>00215                                                 : <span class="stringliteral">&quot;=&amp;r&quot;</span>(old), <span class="stringliteral">&quot;=&amp;r&quot;</span>(res) <span class="comment">//res is not used and because of that GCC tends to assign the same register to it as for the the next argument, adding this &amp; early clobber prevents this.</span>
<a name="l00216"></a>00216                                                 : <span class="stringliteral">&quot;r&quot;</span>(value), <span class="stringliteral">&quot;r&quot;</span>(&amp;this-&gt;<a class="code" href="atomic_8hpp.htm#a606c82003e3aa49e5baad6ad20278bbe">flag</a>)
<a name="l00217"></a>00217                                                 : <span class="stringliteral">&quot;cc&quot;</span>, <span class="stringliteral">&quot;memory&quot;</span> <span class="comment">// &quot;cc&quot; stands for &quot;condition codes&quot;</span>
<a name="l00218"></a>00218                         );
<a name="l00219"></a>00219 
<a name="l00220"></a>00220 <span class="preprocessor">#               endif</span>
<a name="l00221"></a>00221 <span class="preprocessor"></span><span class="preprocessor">#       else // ARM older than v6</span>
<a name="l00222"></a>00222 <span class="preprocessor"></span>                __asm__ __volatile__(
<a name="l00223"></a>00223                                 <span class="stringliteral">&quot;swp %0, %1, [%2]&quot;</span>
<a name="l00224"></a>00224                                                 : <span class="stringliteral">&quot;=&amp;r&quot;</span>(old)
<a name="l00225"></a>00225                                                 : <span class="stringliteral">&quot;r&quot;</span>(value), <span class="stringliteral">&quot;r&quot;</span>(&amp;this-&gt;<a class="code" href="atomic_8hpp.htm#a606c82003e3aa49e5baad6ad20278bbe">flag</a>)
<a name="l00226"></a>00226                                                 : <span class="stringliteral">&quot;memory&quot;</span>
<a name="l00227"></a>00227                         );
<a name="l00228"></a>00228 <span class="preprocessor">#       endif</span>
<a name="l00229"></a>00229 <span class="preprocessor"></span>                <span class="keywordflow">return</span> old;
<a name="l00230"></a>00230 
<a name="l00231"></a>00231 <span class="preprocessor">#else //unknown cpu architecture, will be using plain mutex</span>
<a name="l00232"></a>00232 <span class="preprocessor"></span><span class="preprocessor">#       error &quot;ASSERT(false)&quot;</span>
<a name="l00233"></a>00233 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00234"></a>00234 <span class="preprocessor"></span>        }
<a name="l00235"></a>00235 
<a name="l00236"></a>00236 
<a name="l00245"></a><a class="code" href="classting_1_1atomic_1_1Flag.htm#a5838d3a1657d80c831ad5c2b41070762">00245</a>         <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="classting_1_1atomic_1_1Flag.htm#a5838d3a1657d80c831ad5c2b41070762" title="Set the flag value with acquire memory semantics.">SetAcquire</a>(<span class="keywordtype">bool</span> value = <span class="keyword">true</span>)throw(){
<a name="l00246"></a>00246                 <span class="keywordtype">bool</span> ret = this-&gt;<a class="code" href="classting_1_1atomic_1_1Flag.htm#aaf2f8d87fa57ffe254dc119360e48c18" title="Set the flag value.">Set</a>(value);
<a name="l00247"></a>00247                 atomic::Flag::MemoryBarrier();
<a name="l00248"></a>00248                 <span class="keywordflow">return</span> ret;
<a name="l00249"></a>00249         }
<a name="l00250"></a>00250 
<a name="l00251"></a>00251 
<a name="l00252"></a>00252 
<a name="l00261"></a><a class="code" href="classting_1_1atomic_1_1Flag.htm#a9b015ecd14972135eacb1d54dabd713f">00261</a>         <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="classting_1_1atomic_1_1Flag.htm#a9b015ecd14972135eacb1d54dabd713f" title="Set the flag value with release memory semantics.">SetRelease</a>(<span class="keywordtype">bool</span> value = <span class="keyword">true</span>)throw(){
<a name="l00262"></a>00262                 atomic::Flag::MemoryBarrier();
<a name="l00263"></a>00263                 <span class="keywordflow">return</span> this-&gt;<a class="code" href="classting_1_1atomic_1_1Flag.htm#aaf2f8d87fa57ffe254dc119360e48c18" title="Set the flag value.">Set</a>(value);
<a name="l00264"></a>00264         }
<a name="l00265"></a>00265         
<a name="l00266"></a>00266         
<a name="l00267"></a>00267         
<a name="l00274"></a><a class="code" href="classting_1_1atomic_1_1Flag.htm#ac262ae8f3f66944c0fd0473768a70633">00274</a>         <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classting_1_1atomic_1_1Flag.htm#ac262ae8f3f66944c0fd0473768a70633" title="Clear flag.">Clear</a>()throw(){
<a name="l00275"></a>00275 <span class="preprocessor">#if defined(M_ATOMIC_USE_MUTEX_FALLBACK)</span>
<a name="l00276"></a>00276 <span class="preprocessor"></span>                {
<a name="l00277"></a>00277                         <span class="comment">//still need to lock the mutex to generate the memory barrier.</span>
<a name="l00278"></a>00278                         <a class="code" href="classting_1_1mt_1_1Mutex_1_1Guard.htm" title="Helper class which automatically Locks the given mutex.">ting::mt::Mutex::Guard</a> mutexGuard(this-&gt;<a class="code" href="atomic_8hpp.htm#a6334cfeab8b0e3af50dc82ebca4431bf">mutex</a>);
<a name="l00279"></a>00279                         this-&gt;<a class="code" href="atomic_8hpp.htm#a606c82003e3aa49e5baad6ad20278bbe">flag</a> = <span class="keyword">false</span>;
<a name="l00280"></a>00280                 }
<a name="l00281"></a>00281 <span class="preprocessor">#elif M_CPU == M_CPU_X86 || M_CPU == M_CPU_X86_64 || M_CPU == M_CPU_ARM</span>
<a name="l00282"></a>00282 <span class="preprocessor"></span>                this-&gt;<a class="code" href="classting_1_1atomic_1_1Flag.htm#aaf2f8d87fa57ffe254dc119360e48c18" title="Set the flag value.">Set</a>(<span class="keyword">false</span>);
<a name="l00283"></a>00283 
<a name="l00284"></a>00284 <span class="preprocessor">#else //unknown cpu architecture</span>
<a name="l00285"></a>00285 <span class="preprocessor"></span><span class="preprocessor">#       error &quot;ASSERT(false)&quot;</span>
<a name="l00286"></a>00286 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00287"></a>00287 <span class="preprocessor"></span>        }
<a name="l00288"></a>00288         
<a name="l00289"></a>00289         
<a name="l00290"></a>00290         
<a name="l00298"></a><a class="code" href="classting_1_1atomic_1_1Flag.htm#a2dd931037077532c1714fb5824f2d30f">00298</a>         <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classting_1_1atomic_1_1Flag.htm#a2dd931037077532c1714fb5824f2d30f" title="Clear flag with acquire memory semantics.">ClearAcquire</a>()throw(){
<a name="l00299"></a>00299                 this-&gt;<a class="code" href="classting_1_1atomic_1_1Flag.htm#ac262ae8f3f66944c0fd0473768a70633" title="Clear flag.">Clear</a>();
<a name="l00300"></a>00300                 Flag::MemoryBarrier();
<a name="l00301"></a>00301         }
<a name="l00302"></a>00302         
<a name="l00303"></a>00303         
<a name="l00304"></a>00304         
<a name="l00312"></a><a class="code" href="classting_1_1atomic_1_1Flag.htm#a1779f0ee6c9d1a7941259bb00ccb8068">00312</a>         <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classting_1_1atomic_1_1Flag.htm#a1779f0ee6c9d1a7941259bb00ccb8068" title="Clear flag with release memory semantics.">ClearRelease</a>()throw(){
<a name="l00313"></a>00313                 Flag::MemoryBarrier();
<a name="l00314"></a>00314                 this-&gt;<a class="code" href="classting_1_1atomic_1_1Flag.htm#ac262ae8f3f66944c0fd0473768a70633" title="Clear flag.">Clear</a>();
<a name="l00315"></a>00315         }
<a name="l00316"></a>00316 } <a class="code" href="namespaceting_1_1atomic.htm#aa513f535e5ad73140599e383eb04f7eb">M_DECLARE_ALIGNED</a>(<span class="keyword">sizeof</span>(<span class="keywordtype">int</span>)); <span class="comment">//On most architectures, atomic operations require that the value to be naturally aligned.</span>
<a name="l00317"></a>00317 
<a name="l00318"></a>00318 
<a name="l00319"></a>00319 
<a name="l00328"></a>00328 <span class="comment">//On most architectures, atomic operations require that the value to be naturally aligned (4 bytes = sizeof(int)).</span>
<a name="l00329"></a>00329 <span class="preprocessor">#ifndef M_DOXYGEN_DONT_EXTRACT //for doxygen</span>
<a name="l00330"></a>00330 <span class="preprocessor"></span>
<a name="l00331"></a>00331 <span class="comment">//make sure theat we align by int size when using MSVC compiler.</span>
<a name="l00332"></a>00332 <a class="code" href="debug_8hpp.htm#ac34bd49b9b8483a2b40c61e7607fd878">STATIC_ASSERT</a>(<span class="keyword">sizeof</span>(<span class="keywordtype">int</span>) == 4)
<a name="l00333"></a>00333 
<a name="l00334"></a>00334 M_DECLARE_ALIGNED_MSVC(4)
<a name="l00335"></a>00335 <span class="preprocessor">#endif</span>
<a name="l00336"></a><a class="code" href="classting_1_1atomic_1_1SpinLock.htm">00336</a> <span class="preprocessor"></span><span class="keyword">class </span><a class="code" href="classting_1_1atomic_1_1SpinLock.htm" title="Spinlock class.">SpinLock</a>{
<a name="l00337"></a>00337 <span class="preprocessor">#if defined(M_ATOMIC_USE_MUTEX_FALLBACK)</span>
<a name="l00338"></a>00338 <span class="preprocessor"></span>        <a class="code" href="classting_1_1mt_1_1Mutex.htm" title="Mutex object class Mutex stands for &quot;Mutual execution&quot;.">ting::mt::Mutex</a> mutex;
<a name="l00339"></a>00339 <span class="preprocessor">#elif M_CPU == M_CPU_X86 || M_CPU == M_CPU_X86_64 || M_CPU == M_CPU_ARM</span>
<a name="l00340"></a>00340 <span class="preprocessor"></span>
<a name="l00341"></a>00341         <a class="code" href="classting_1_1atomic_1_1Flag.htm" title="Atomic flag.">atomic::Flag</a> <a class="code" href="atomic_8hpp.htm#a606c82003e3aa49e5baad6ad20278bbe">flag</a>;
<a name="l00342"></a>00342 
<a name="l00343"></a>00343 <span class="preprocessor">#else //unknown cpu architecture, will be using plain mutex</span>
<a name="l00344"></a>00344 <span class="preprocessor"></span><span class="preprocessor">#       error &quot;ASSERT(false)&quot;</span>
<a name="l00345"></a>00345 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00346"></a>00346 <span class="preprocessor"></span>
<a name="l00347"></a>00347 
<a name="l00348"></a>00348 <span class="keyword">public</span>:
<a name="l00353"></a><a class="code" href="classting_1_1atomic_1_1SpinLock.htm#a610765a64c7b84443a01fbf3b2d12b1b">00353</a>         <span class="keyword">inline</span> <a class="code" href="classting_1_1atomic_1_1SpinLock.htm#a610765a64c7b84443a01fbf3b2d12b1b" title="Constructor.">SpinLock</a>(){
<a name="l00354"></a>00354 <span class="preprocessor">#if defined(M_ATOMIC_USE_MUTEX_FALLBACK)</span>
<a name="l00355"></a>00355 <span class="preprocessor"></span>                <span class="comment">//no need to initialize mutex, it is unlocked initially itself.</span>
<a name="l00356"></a>00356 
<a name="l00357"></a>00357 <span class="preprocessor">#elif M_CPU == M_CPU_X86 || M_CPU == M_CPU_X86_64 || M_CPU == M_CPU_ARM</span>
<a name="l00358"></a>00358 <span class="preprocessor"></span>
<a name="l00359"></a>00359                 <span class="comment">//initially unlocked.</span>
<a name="l00360"></a>00360 
<a name="l00361"></a>00361 <span class="preprocessor">#else //unknown cpu architecture, will be using plain mutex</span>
<a name="l00362"></a>00362 <span class="preprocessor"></span><span class="preprocessor">#       error &quot;ASSERT(false)&quot;</span>
<a name="l00363"></a>00363 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00364"></a>00364 <span class="preprocessor"></span>        }
<a name="l00365"></a>00365 
<a name="l00366"></a><a class="code" href="atomic_8hpp.htm#a1c982003f982bb0e493355ece02be543">00366</a> 
<a name="l00367"></a>00367 
<a name="l00374"></a><a class="code" href="classting_1_1atomic_1_1SpinLock.htm#ac5d3a0dd21de1eadae7f948a4884cb9c">00374</a>         <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classting_1_1atomic_1_1SpinLock.htm#ac5d3a0dd21de1eadae7f948a4884cb9c" title="Lock the spinlock.">Lock</a>()throw(){
<a name="l00375"></a>00375 <span class="preprocessor">#if defined(M_ATOMIC_USE_MUTEX_FALLBACK)</span>
<a name="l00376"></a>00376 <span class="preprocessor"></span>                this-&gt;mutex.<a class="code" href="classting_1_1mt_1_1Mutex.htm#a202b5c9f08ebfc6e2556eddc467e440b" title="Acquire mutex lock.">Lock</a>();
<a name="l00377"></a>00377 <span class="preprocessor">#elif M_CPU == M_CPU_X86 || M_CPU == M_CPU_X86_64 || M_CPU == M_CPU_ARM</span>
<a name="l00378"></a>00378 <span class="preprocessor"></span>
<a name="l00379"></a>00379                 <span class="keywordflow">while</span>(this-&gt;<a class="code" href="atomic_8hpp.htm#a606c82003e3aa49e5baad6ad20278bbe">flag</a>.Set(<span class="keyword">true</span>)){
<a name="l00380"></a>00380                         <span class="keywordflow">while</span>(this-&gt;<a class="code" href="atomic_8hpp.htm#a606c82003e3aa49e5baad6ad20278bbe">flag</a>.Get()){}
<a name="l00381"></a>00381                 }
<a name="l00382"></a>00382                 atomic::Flag::MemoryBarrier();
<a name="l00383"></a>00383 
<a name="l00384"></a>00384 <span class="preprocessor">#else</span>
<a name="l00385"></a>00385 <span class="preprocessor"></span><span class="preprocessor">#       error &quot;ASSERT(false)&quot;</span>
<a name="l00386"></a>00386 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00387"></a><a class="code" href="atomic_8hpp.htm#a15a615a74f3e3329f9cc804a91f0dc4b">00387</a> <span class="preprocessor"></span>        }
<a name="l00388"></a>00388 
<a name="l00389"></a>00389         
<a name="l00390"></a>00390         
<a name="l00396"></a><a class="code" href="classting_1_1atomic_1_1SpinLock.htm#a4cb1696d7a59673b7b20c00e31169793">00396</a>         <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classting_1_1atomic_1_1SpinLock.htm#a4cb1696d7a59673b7b20c00e31169793" title="Lock the spinlock.">LockYield</a>()throw(){
<a name="l00397"></a>00397 <span class="preprocessor">#if defined(M_ATOMIC_USE_MUTEX_FALLBACK)</span>
<a name="l00398"></a>00398 <span class="preprocessor"></span>                this-&gt;mutex.<a class="code" href="classting_1_1mt_1_1Mutex.htm#a202b5c9f08ebfc6e2556eddc467e440b" title="Acquire mutex lock.">Lock</a>();
<a name="l00399"></a>00399 <span class="preprocessor">#elif M_CPU == M_CPU_X86 || M_CPU == M_CPU_X86_64 || M_CPU == M_CPU_ARM</span>
<a name="l00400"></a>00400 <span class="preprocessor"></span>
<a name="l00401"></a>00401                 <span class="keywordflow">while</span>(this-&gt;<a class="code" href="atomic_8hpp.htm#a606c82003e3aa49e5baad6ad20278bbe">flag</a>.Set(<span class="keyword">true</span>)){
<a name="l00402"></a>00402                         <a class="code" href="classting_1_1mt_1_1Thread.htm#a4713c4af0c49f630338aacb5cb9b91f3" title="Suspend the thread for a given number of milliseconds.">ting::mt::Thread::Sleep</a>(0);
<a name="l00403"></a>00403                 }
<a name="l00404"></a><a class="code" href="atomic_8hpp.htm#a3e8cb0d2b3219a3298cded0fdde3426b">00404</a>                 atomic::Flag::MemoryBarrier();
<a name="l00405"></a>00405 
<a name="l00406"></a>00406 <span class="preprocessor">#else</span>
<a name="l00407"></a>00407 <span class="preprocessor"></span><span class="preprocessor">#       error &quot;ASSERT(false)&quot;</span>
<a name="l00408"></a>00408 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00409"></a>00409 <span class="preprocessor"></span>        }
<a name="l00410"></a>00410         
<a name="l00411"></a>00411 
<a name="l00412"></a>00412 
<a name="l00417"></a><a class="code" href="classting_1_1atomic_1_1SpinLock.htm#aa834f0a00886fcf2a93b56bbeefc5df0">00417</a>         <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classting_1_1atomic_1_1SpinLock.htm#aa834f0a00886fcf2a93b56bbeefc5df0" title="Unlock the spinlock.">Unlock</a>()throw(){
<a name="l00418"></a>00418 <span class="preprocessor">#if defined(M_ATOMIC_USE_MUTEX_FALLBACK)</span>
<a name="l00419"></a>00419 <span class="preprocessor"></span>                this-&gt;mutex.<a class="code" href="classting_1_1mt_1_1Mutex.htm#a1def6a364443c9de7583f35f04aca892" title="Release mutex lock.">Unlock</a>();
<a name="l00420"></a>00420 <span class="preprocessor">#elif M_CPU == M_CPU_X86 || M_CPU == M_CPU_X86_64 || M_CPU == M_CPU_ARM</span>
<a name="l00421"></a>00421 <span class="preprocessor"></span>
<a name="l00422"></a>00422                 atomic::Flag::MemoryBarrier();
<a name="l00423"></a>00423                 this-&gt;<a class="code" href="atomic_8hpp.htm#a606c82003e3aa49e5baad6ad20278bbe">flag</a>.Clear();
<a name="l00424"></a>00424 
<a name="l00425"></a>00425 <span class="preprocessor">#else</span>
<a name="l00426"></a>00426 <span class="preprocessor"></span><span class="preprocessor">#       error &quot;ASSERT(false)&quot;</span>
<a name="l00427"></a>00427 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00428"></a>00428 <span class="preprocessor"></span>        }
<a name="l00429"></a>00429         
<a name="l00430"></a>00430         
<a name="l00431"></a>00431         
<a name="l00439"></a><a class="code" href="classting_1_1atomic_1_1SpinLock_1_1Guard.htm">00439</a>         <span class="keyword">class </span><a class="code" href="classting_1_1atomic_1_1SpinLock_1_1Guard.htm" title="Helper class which automatically Locks the given spinlock.">Guard</a>{
<a name="l00440"></a>00440                 <a class="code" href="classting_1_1atomic_1_1SpinLock.htm" title="Spinlock class.">SpinLock</a>&amp; sl;
<a name="l00441"></a>00441         <span class="keyword">public</span>:
<a name="l00442"></a><a class="code" href="classting_1_1atomic_1_1SpinLock_1_1Guard.htm#ac03206f6ba14420ea29eba36ca52f853">00442</a>                 <a class="code" href="classting_1_1atomic_1_1SpinLock_1_1Guard.htm#ac03206f6ba14420ea29eba36ca52f853">Guard</a>(<a class="code" href="classting_1_1atomic_1_1SpinLock.htm" title="Spinlock class.">SpinLock</a>&amp; sl)<span class="keywordflow">throw</span>() :
<a name="l00443"></a>00443                                 sl(sl)
<a name="l00444"></a>00444                 {
<a name="l00445"></a>00445                         this-&gt;sl.<a class="code" href="classting_1_1atomic_1_1SpinLock.htm#ac5d3a0dd21de1eadae7f948a4884cb9c" title="Lock the spinlock.">Lock</a>();
<a name="l00446"></a>00446                 }
<a name="l00447"></a>00447                 
<a name="l00448"></a><a class="code" href="classting_1_1atomic_1_1SpinLock_1_1Guard.htm#aa94fa61304352a33f0d3d88895bec609">00448</a>                 <a class="code" href="classting_1_1atomic_1_1SpinLock_1_1Guard.htm#aa94fa61304352a33f0d3d88895bec609">~Guard</a>()throw(){
<a name="l00449"></a>00449                         this-&gt;sl.<a class="code" href="classting_1_1atomic_1_1SpinLock.htm#aa834f0a00886fcf2a93b56bbeefc5df0" title="Unlock the spinlock.">Unlock</a>();
<a name="l00450"></a>00450                 }
<a name="l00451"></a>00451         };
<a name="l00452"></a>00452         
<a name="l00453"></a>00453         
<a name="l00454"></a>00454         
<a name="l00460"></a><a class="code" href="classting_1_1atomic_1_1SpinLock_1_1GuardYield.htm">00460</a>         <span class="keyword">class </span><a class="code" href="classting_1_1atomic_1_1SpinLock_1_1GuardYield.htm" title="Helper class which automatically Locks the given spinlock.">GuardYield</a>{
<a name="l00461"></a>00461                 <a class="code" href="classting_1_1atomic_1_1SpinLock.htm" title="Spinlock class.">SpinLock</a>&amp; sl;
<a name="l00462"></a>00462         <span class="keyword">public</span>:
<a name="l00463"></a><a class="code" href="classting_1_1atomic_1_1SpinLock_1_1GuardYield.htm#acda355f1b89bdbe8ec8749ced2ef1646">00463</a>                 <a class="code" href="classting_1_1atomic_1_1SpinLock_1_1GuardYield.htm#acda355f1b89bdbe8ec8749ced2ef1646">GuardYield</a>(<a class="code" href="classting_1_1atomic_1_1SpinLock.htm" title="Spinlock class.">SpinLock</a>&amp; sl)<span class="keywordflow">throw</span>() :
<a name="l00464"></a>00464                                 sl(sl)
<a name="l00465"></a>00465                 {
<a name="l00466"></a>00466                         this-&gt;sl.<a class="code" href="classting_1_1atomic_1_1SpinLock.htm#a4cb1696d7a59673b7b20c00e31169793" title="Lock the spinlock.">LockYield</a>();
<a name="l00467"></a>00467                 }
<a name="l00468"></a>00468                 
<a name="l00469"></a><a class="code" href="classting_1_1atomic_1_1SpinLock_1_1GuardYield.htm#a470d41cd1fd7f5616da636ed6cc64cb6">00469</a>                 <a class="code" href="classting_1_1atomic_1_1SpinLock_1_1GuardYield.htm#a470d41cd1fd7f5616da636ed6cc64cb6">~GuardYield</a>()throw(){
<a name="l00470"></a>00470                         this-&gt;sl.<a class="code" href="classting_1_1atomic_1_1SpinLock.htm#aa834f0a00886fcf2a93b56bbeefc5df0" title="Unlock the spinlock.">Unlock</a>();
<a name="l00471"></a>00471                 }
<a name="l00472"></a>00472         };
<a name="l00473"></a>00473 } <a class="code" href="namespaceting_1_1atomic.htm#aa513f535e5ad73140599e383eb04f7eb">M_DECLARE_ALIGNED</a>(<span class="keyword">sizeof</span>(<span class="keywordtype">int</span>)); <span class="comment">//On most architectures, atomic operations require that the value to be naturally aligned.</span>
<a name="l00474"></a>00474 
<a name="l00475"></a>00475 
<a name="l00476"></a>00476 
<a name="l00480"></a>00480 <span class="comment">//On most architectures, atomic operations require that the value to be naturally aligned (4 bytes = sizeof(int)).</span>
<a name="l00481"></a>00481 <span class="preprocessor">#ifndef M_DOXYGEN_DONT_EXTRACT //for doxygen</span>
<a name="l00482"></a>00482 <span class="preprocessor"></span>
<a name="l00483"></a>00483 <span class="comment">//make sure theat we align by int size when using MSVC compiler.</span>
<a name="l00484"></a>00484 <a class="code" href="debug_8hpp.htm#ac34bd49b9b8483a2b40c61e7607fd878">STATIC_ASSERT</a>(<span class="keyword">sizeof</span>(<span class="keywordtype">int</span>) == 4)
<a name="l00485"></a>00485 
<a name="l00486"></a>00486 M_DECLARE_ALIGNED_MSVC(4)
<a name="l00487"></a><a class="code" href="atomic_8hpp.htm#ac4cd494ca5b8dac7d0589fbe7dfc7765">00487</a> <span class="preprocessor">#endif</span>
<a name="l00488"></a><a class="code" href="classting_1_1atomic_1_1S32.htm">00488</a> <span class="preprocessor"></span><span class="keyword">class </span><a class="code" href="classting_1_1atomic_1_1S32.htm" title="Atomic signed 32bit integer.">S32</a>{
<a name="l00489"></a>00489 
<a name="l00490"></a><a class="code" href="atomic_8hpp.htm#a6ce59eb01b0e6ba0ca3f7ffbde486c40">00490</a> <span class="preprocessor">#if M_CPU == M_CPU_X86 || M_CPU == M_CPU_X86_64 || \</span>
<a name="l00491"></a>00491 <span class="preprocessor">        (M_CPU == M_CPU_ARM  &amp;&amp; M_CPU_VERSION &gt;= 6 &amp;&amp; M_CPU_ARM_THUMB != 1)</span>
<a name="l00492"></a>00492 <span class="preprocessor"></span>
<a name="l00493"></a>00493         <span class="comment">//no additional variables required</span>
<a name="l00494"></a>00494 <span class="preprocessor">#else</span>
<a name="l00495"></a>00495 <span class="preprocessor"></span>        <a class="code" href="atomic_8hpp.htm#a6ce59eb01b0e6ba0ca3f7ffbde486c40" title="Constructor.">atomic::SpinLock</a> spinLock;
<a name="l00496"></a>00496 <span class="preprocessor">#endif</span>
<a name="l00497"></a>00497 <span class="preprocessor"></span>
<a name="l00498"></a>00498         <span class="keyword">volatile</span> <a class="code" href="namespaceting.htm#a538865e72a75616abe86558cbe983026" title="Signed 32 bit type.">ting::s32</a> v;
<a name="l00499"></a>00499 
<a name="l00500"></a>00500 <span class="keyword">public</span>:
<a name="l00505"></a><a class="code" href="classting_1_1atomic_1_1S32.htm#a5c7d5a74b231bf941efa516c4a23a923">00505</a>         <span class="keyword">inline</span> <a class="code" href="classting_1_1atomic_1_1S32.htm#a5c7d5a74b231bf941efa516c4a23a923" title="Constructor.">S32</a>(<a class="code" href="namespaceting.htm#a538865e72a75616abe86558cbe983026" title="Signed 32 bit type.">ting::s32</a> initialValue = 0) :
<a name="l00506"></a>00506                         v(initialValue)
<a name="l00507"></a>00507         {}
<a name="l00508"></a>00508 
<a name="l00509"></a>00509 
<a name="l00510"></a>00510 
<a name="l00511"></a><a class="code" href="atomic_8hpp.htm#a5b098764879fab720c0895ab3ec10da7">00511</a>         <span class="keyword">inline</span> <a class="code" href="classting_1_1atomic_1_1S32.htm#a0b7632baa338c0bc1f3cdf774b82a29e">~S32</a>()throw(){}
<a name="l00512"></a>00512 
<a name="l00513"></a>00513 
<a name="l00514"></a>00514 
<a name="l00521"></a><a class="code" href="classting_1_1atomic_1_1S32.htm#a1293bbaf90e53a83e6d31d17368db75a">00521</a>         <span class="keyword">inline</span> <a class="code" href="namespaceting.htm#a538865e72a75616abe86558cbe983026" title="Signed 32 bit type.">ting::s32</a> <a class="code" href="classting_1_1atomic_1_1S32.htm#a1293bbaf90e53a83e6d31d17368db75a" title="Adds the value to this atomic variable and returns its initial value.">FetchAndAdd</a>(<a class="code" href="namespaceting.htm#a538865e72a75616abe86558cbe983026" title="Signed 32 bit type.">ting::s32</a> value)<span class="keywordflow">throw</span>(){
<a name="l00522"></a>00522 <span class="preprocessor">#if M_CPU == M_CPU_X86 || M_CPU == M_CPU_X86_64</span>
<a name="l00523"></a>00523 <span class="preprocessor"></span>
<a name="l00524"></a>00524                 {
<a name="l00525"></a>00525                         <a class="code" href="namespaceting.htm#a538865e72a75616abe86558cbe983026" title="Signed 32 bit type.">ting::s32</a> old;
<a name="l00526"></a>00526 <span class="preprocessor">#       if M_COMPILER == M_COMPILER_MSVC</span>
<a name="l00527"></a>00527 <span class="preprocessor"></span>                        __asm{
<a name="l00528"></a>00528                                 mov ebx, <span class="keyword">this</span>
<a name="l00529"></a>00529                                 mov eax, [value]
<a name="l00530"></a>00530                                 lock xadd [ebx].v, eax
<a name="l00531"></a>00531                                 mov [old], eax
<a name="l00532"></a>00532                         }
<a name="l00533"></a><a class="code" href="atomic_8hpp.htm#af8889cad23a39a688422bd7a39cb7425">00533</a> <span class="preprocessor">#       else</span>
<a name="l00534"></a>00534 <span class="preprocessor"></span>                        __asm__ __volatile__ (
<a name="l00535"></a>00535                                         <span class="stringliteral">&quot;lock; xaddl %0, %1&quot;</span>
<a name="l00536"></a>00536                                                         : <span class="stringliteral">&quot;=r&quot;</span>(old), <span class="stringliteral">&quot;=m&quot;</span>(this-&gt;v)
<a name="l00537"></a>00537                                                         : <span class="stringliteral">&quot;0&quot;</span>(value), <span class="stringliteral">&quot;m&quot;</span>(this-&gt;v)
<a name="l00538"></a>00538                                                         : <span class="stringliteral">&quot;memory&quot;</span>
<a name="l00539"></a>00539                                 );
<a name="l00540"></a><a class="code" href="atomic_8hpp.htm#a19f4bcf8ff5c4b0d8574c7bd196e3ecf">00540</a> <span class="preprocessor">#       endif</span>
<a name="l00541"></a>00541 <span class="preprocessor"></span>                        <span class="keywordflow">return</span> old;
<a name="l00542"></a>00542                 }
<a name="l00543"></a>00543 
<a name="l00544"></a>00544 <span class="preprocessor">#elif M_CPU == M_CPU_ARM &amp;&amp; M_CPU_VERSION &gt;= 6 &amp;&amp; M_CPU_ARM_THUMB != 1</span>
<a name="l00545"></a>00545 <span class="preprocessor"></span>                <a class="code" href="namespaceting.htm#a538865e72a75616abe86558cbe983026" title="Signed 32 bit type.">ting::s32</a> old, sum;
<a name="l00546"></a>00546                 <span class="keywordtype">int</span> res;
<a name="l00547"></a>00547                 __asm__ __volatile__(
<a name="l00548"></a>00548                                 <span class="stringliteral">&quot;1:&quot;</span>                         <span class="stringliteral">&quot;\n&quot;</span>
<a name="l00549"></a>00549                                 <span class="stringliteral">&quot;       ldrex   %0, [%4]&quot;</span>        <span class="stringliteral">&quot;\n&quot;</span> <span class="comment">// load old value</span>
<a name="l00550"></a>00550                                 <span class="stringliteral">&quot;       add     %2, %0, %3&quot;</span>      <span class="stringliteral">&quot;\n&quot;</span> <span class="comment">// %3 = %0 + %2 NOTE: in case of storing failure need to do the addition again, since the old value has probably changed</span>
<a name="l00551"></a>00551                                 <span class="stringliteral">&quot;       strex   %1, %2, [%4]&quot;</span>    <span class="stringliteral">&quot;\n&quot;</span> <span class="comment">// store new value</span>
<a name="l00552"></a>00552                                 <span class="stringliteral">&quot;       teq     %1, #0&quot;</span>          <span class="stringliteral">&quot;\n&quot;</span> <span class="comment">// check if storing the value has succeeded (compare %1 with 0)</span>
<a name="l00553"></a>00553                                 <span class="stringliteral">&quot;       bne     1b&quot;</span>              <span class="stringliteral">&quot;\n&quot;</span> <span class="comment">// jump to label 1 backwards (to the beginning) to try again if %1 is not 0, i.e. storing has failed</span>
<a name="l00554"></a><a class="code" href="atomic_8hpp.htm#ae6130bfda1ed3a246f6f26c7cb42a439">00554</a>                                                 : <span class="stringliteral">&quot;=&amp;r&quot;</span>(old), <span class="stringliteral">&quot;=&amp;r&quot;</span>(res), <span class="stringliteral">&quot;=&amp;r&quot;</span>(sum)  <span class="comment">//res is not used, thus we need this &amp; early-clobber to avoid gcc assign the same register to it as to something else.</span>
<a name="l00555"></a>00555                                                 : <span class="stringliteral">&quot;r&quot;</span>(value), <span class="stringliteral">&quot;r&quot;</span>(&amp;this-&gt;v)
<a name="l00556"></a>00556                                                 : <span class="stringliteral">&quot;cc&quot;</span>, <span class="stringliteral">&quot;memory&quot;</span> <span class="comment">//&quot;cc&quot; = &quot;condition codes&quot;</span>
<a name="l00557"></a>00557                         );
<a name="l00558"></a>00558                 <span class="keywordflow">return</span> old;
<a name="l00559"></a>00559 
<a name="l00560"></a>00560 <span class="preprocessor">#else</span>
<a name="l00561"></a>00561 <span class="preprocessor"></span>                this-&gt;spinLock.<a class="code" href="classting_1_1atomic_1_1SpinLock.htm#ac5d3a0dd21de1eadae7f948a4884cb9c" title="Lock the spinlock.">Lock</a>();
<a name="l00562"></a>00562                 <a class="code" href="namespaceting.htm#a538865e72a75616abe86558cbe983026" title="Signed 32 bit type.">ting::s32</a> old = this-&gt;v;
<a name="l00563"></a>00563                 this-&gt;v += value;
<a name="l00564"></a>00564                 this-&gt;spinLock.<a class="code" href="classting_1_1atomic_1_1SpinLock.htm#aa834f0a00886fcf2a93b56bbeefc5df0" title="Unlock the spinlock.">Unlock</a>();
<a name="l00565"></a>00565                 <span class="keywordflow">return</span> old;
<a name="l00566"></a>00566 <span class="preprocessor">#endif</span>
<a name="l00567"></a>00567 <span class="preprocessor"></span>        }
<a name="l00568"></a>00568 
<a name="l00569"></a>00569         
<a name="l00570"></a>00570         
<a name="l00577"></a><a class="code" href="classting_1_1atomic_1_1S32.htm#a32d76005478cfd1ffd58fca2858f5e3c">00577</a>         <span class="keyword">inline</span> <a class="code" href="namespaceting.htm#a538865e72a75616abe86558cbe983026" title="Signed 32 bit type.">ting::s32</a> <a class="code" href="classting_1_1atomic_1_1S32.htm#a32d76005478cfd1ffd58fca2858f5e3c" title="Adds the value to this atomic variable and returns its initial value.">FetchAndAddAcquire</a>(<a class="code" href="namespaceting.htm#a538865e72a75616abe86558cbe983026" title="Signed 32 bit type.">ting::s32</a> value)<span class="keywordflow">throw</span>(){
<a name="l00578"></a>00578                 <a class="code" href="namespaceting.htm#a538865e72a75616abe86558cbe983026" title="Signed 32 bit type.">ting::s32</a> ret = this-&gt;<a class="code" href="classting_1_1atomic_1_1S32.htm#a1293bbaf90e53a83e6d31d17368db75a" title="Adds the value to this atomic variable and returns its initial value.">FetchAndAdd</a>(value);
<a name="l00579"></a><a class="code" href="classGuard.htm#a8a999c61740952907c748f7ad73d3c15">00579</a>                 atomic::Flag::MemoryBarrier();
<a name="l00580"></a>00580                 <span class="keywordflow">return</span> ret;
<a name="l00581"></a>00581         }
<a name="l00582"></a>00582         
<a name="l00583"></a>00583         
<a name="l00584"></a>00584         
<a name="l00591"></a><a class="code" href="classting_1_1atomic_1_1S32.htm#aa8b8f984cc5cc4bb4b30b7331fb1cfae">00591</a>         <span class="keyword">inline</span> <a class="code" href="namespaceting.htm#a538865e72a75616abe86558cbe983026" title="Signed 32 bit type.">ting::s32</a> <a class="code" href="classting_1_1atomic_1_1S32.htm#aa8b8f984cc5cc4bb4b30b7331fb1cfae" title="Adds the value to this atomic variable and returns its initial value.">FetchAndAddRelease</a>(<a class="code" href="namespaceting.htm#a538865e72a75616abe86558cbe983026" title="Signed 32 bit type.">ting::s32</a> value)<span class="keywordflow">throw</span>(){
<a name="l00592"></a>00592                 atomic::Flag::MemoryBarrier();
<a name="l00593"></a>00593                 <span class="keywordflow">return</span> this-&gt;<a class="code" href="classting_1_1atomic_1_1S32.htm#a1293bbaf90e53a83e6d31d17368db75a" title="Adds the value to this atomic variable and returns its initial value.">FetchAndAdd</a>(value);
<a name="l00594"></a>00594         }
<a name="l00595"></a>00595         
<a name="l00596"></a>00596 
<a name="l00597"></a><a class="code" href="classGuardYield.htm">00597</a> 
<a name="l00608"></a><a class="code" href="classting_1_1atomic_1_1S32.htm#a4eb498172b297d3fe52f998501eee2f4">00608</a>         <span class="keyword">inline</span> <a class="code" href="namespaceting.htm#a538865e72a75616abe86558cbe983026" title="Signed 32 bit type.">ting::s32</a> <a class="code" href="classting_1_1atomic_1_1S32.htm#a4eb498172b297d3fe52f998501eee2f4" title="Atomic compare and exchange operation.">CompareAndExchange</a>(<a class="code" href="namespaceting.htm#a538865e72a75616abe86558cbe983026" title="Signed 32 bit type.">ting::s32</a> compareTo, <a class="code" href="namespaceting.htm#a538865e72a75616abe86558cbe983026" title="Signed 32 bit type.">ting::s32</a> exchangeBy)<span class="keywordflow">throw</span>(){
<a name="l00609"></a>00609 <span class="preprocessor">#if M_CPU == M_CPU_X86 || M_CPU == M_CPU_X86_64</span>
<a name="l00610"></a>00610 <span class="preprocessor"></span>
<a name="l00611"></a>00611                 <a class="code" href="namespaceting.htm#a538865e72a75616abe86558cbe983026" title="Signed 32 bit type.">ting::s32</a> old;
<a name="l00612"></a>00612 <span class="preprocessor">#       if M_COMPILER == M_COMPILER_MSVC</span>
<a name="l00613"></a>00613 <span class="preprocessor"></span>                __asm{
<a name="l00614"></a>00614                         mov ebx, <span class="keyword">this</span>
<a name="l00615"></a>00615                         mov eax, [compareTo]
<a name="l00616"></a>00616                         mov edx, [exchangeBy]
<a name="l00617"></a>00617                         lock cmpxchg [ebx].v, edx
<a name="l00618"></a>00618                         mov [old], eax
<a name="l00619"></a>00619                 }
<a name="l00620"></a>00620 <span class="preprocessor">#       else</span>
<a name="l00621"></a>00621 <span class="preprocessor"></span>                __asm__ __volatile__(
<a name="l00622"></a>00622                                 <span class="stringliteral">&quot;lock; cmpxchgl %3, %2&quot;</span>
<a name="l00623"></a>00623                                                 : <span class="stringliteral">&quot;=m&quot;</span>(this-&gt;v), <span class="stringliteral">&quot;=a&quot;</span>(old) <span class="comment">// &#39;a&#39; is &#39;eax&#39; or &#39;ax&#39; or &#39;al&#39; or &#39;ah&#39;</span>
<a name="l00624"></a>00624                                                 : <span class="stringliteral">&quot;m&quot;</span>(this-&gt;v), <span class="stringliteral">&quot;r&quot;</span>(exchangeBy), <span class="stringliteral">&quot;a&quot;</span>(compareTo)
<a name="l00625"></a>00625                                                 : <span class="stringliteral">&quot;memory&quot;</span>
<a name="l00626"></a>00626                         );
<a name="l00627"></a>00627 <span class="preprocessor">#       endif</span>
<a name="l00628"></a>00628 <span class="preprocessor"></span>                <span class="keywordflow">return</span> old;
<a name="l00629"></a>00629 
<a name="l00630"></a>00630 <span class="preprocessor">#elif M_CPU == M_CPU_ARM &amp;&amp; M_CPU_VERSION &gt;= 6 &amp;&amp; M_CPU_ARM_THUMB != 1</span>
<a name="l00631"></a>00631 <span class="preprocessor"></span>                <a class="code" href="namespaceting.htm#a538865e72a75616abe86558cbe983026" title="Signed 32 bit type.">ting::s32</a> old;
<a name="l00632"></a>00632                 <span class="keywordtype">int</span> res;
<a name="l00633"></a>00633 <span class="preprocessor">#       if M_CPU_ARM_THUMB == 2</span>
<a name="l00634"></a>00634 <span class="preprocessor"></span>                __asm__ __volatile__(
<a name="l00635"></a>00635                                 <span class="stringliteral">&quot;1:&quot;</span>                         <span class="stringliteral">&quot;\n&quot;</span>
<a name="l00636"></a>00636                                 <span class="stringliteral">&quot;       ldrex   %0, [%4]&quot;</span>        <span class="stringliteral">&quot;\n&quot;</span> <span class="comment">//load old value</span>
<a name="l00637"></a>00637                                 <span class="stringliteral">&quot;       teq     %0, %2&quot;</span>          <span class="stringliteral">&quot;\n&quot;</span> <span class="comment">//test for equality (xor operation)</span>
<a name="l00638"></a>00638                                 <span class="stringliteral">&quot;       ite     eq&quot;</span>              <span class="stringliteral">&quot;\n&quot;</span> <span class="comment">//if equal</span>
<a name="l00639"></a>00639                                 <span class="stringliteral">&quot;       strexeq %1, %3, [%4]&quot;</span>    <span class="stringliteral">&quot;\n&quot;</span> <span class="comment">//if equal, then store exchangeBy value</span>
<a name="l00640"></a>00640                                 <span class="stringliteral">&quot;       bne     2f&quot;</span>              <span class="stringliteral">&quot;\n&quot;</span> <span class="comment">//otherwise, jump to exit with clearing exclusive access, NOTE: Branching must be last instruction in IT block!</span>
<a name="l00641"></a>00641                                 <span class="stringliteral">&quot;       teq     %1, #0&quot;</span>          <span class="stringliteral">&quot;\n&quot;</span> <span class="comment">//check if storing the value has succeeded (compare %1 with 0)</span>
<a name="l00642"></a>00642                                 <span class="stringliteral">&quot;       bne     1b&quot;</span>              <span class="stringliteral">&quot;\n&quot;</span> <span class="comment">//jump to label 1 backwards (to the beginning) to try again if %1 is not 0, i.e. storing has failed</span>
<a name="l00643"></a>00643                                 <span class="stringliteral">&quot;       b       3f&quot;</span>              <span class="stringliteral">&quot;\n&quot;</span> <span class="comment">//jump to label 3 forward (exit) if succeeded</span>
<a name="l00644"></a>00644                                 <span class="stringliteral">&quot;2:&quot;</span>                         <span class="stringliteral">&quot;\n&quot;</span>
<a name="l00645"></a>00645 #               <span class="keywordflow">if</span> <a class="code" href="config_8hpp.htm#a0eff34045368f3efce190ebdc3f3bb8c">M_CPU_VERSION</a> &gt;= 7                          <span class="comment">// CLREX instruction for Thumb-2 is only supported in ARMv7</span>
<a name="l00646"></a>00646                                 <span class="stringliteral">&quot;       clrex&quot;</span>                   <span class="stringliteral">&quot;\n&quot;</span> <span class="comment">//was not equal, clear exclusive access</span>
<a name="l00647"></a>00647 #               <span class="keywordflow">else</span>
<a name="l00648"></a>00648                                 <span class="stringliteral">&quot;       strex   %1, %0, [%4]&quot;</span>    <span class="stringliteral">&quot;\n&quot;</span> <span class="comment">//store previous value, we don&#39;t care if it fails, since we just need to clear exclusive access</span>
<a name="l00649"></a>00649 #               endif
<a name="l00650"></a>00650                                 <span class="stringliteral">&quot;3:&quot;</span>                         <span class="stringliteral">&quot;\n&quot;</span>
<a name="l00651"></a>00651                                                 : <span class="stringliteral">&quot;=&amp;r&quot;</span>(old), <span class="stringliteral">&quot;=&amp;r&quot;</span>(res)  <span class="comment">//res is not used, thus we need this &amp; early-clobber to avoid gcc assign the same register to it as to something else.</span>
<a name="l00652"></a>00652                                                 : <span class="stringliteral">&quot;r&quot;</span>(compareTo), <span class="stringliteral">&quot;r&quot;</span>(exchangeBy), <span class="stringliteral">&quot;r&quot;</span>(&amp;this-&gt;v)
<a name="l00653"></a>00653                                                 : <span class="stringliteral">&quot;cc&quot;</span>, <span class="stringliteral">&quot;memory&quot;</span> <span class="comment">// &quot;cc&quot; = &quot;condition codes&quot;</span>
<a name="l00654"></a>00654                         );
<a name="l00655"></a>00655 <span class="preprocessor">#       else //non-Thumb 2 mode</span>
<a name="l00656"></a>00656 <span class="preprocessor"></span><span class="preprocessor">#               if M_CPU_ARM_THUMB != 0</span>
<a name="l00657"></a>00657 <span class="preprocessor"></span><span class="preprocessor">                        #error &quot;ASSERT(false)&quot;</span>
<a name="l00658"></a>00658 <span class="preprocessor"></span><span class="preprocessor">#               endif</span>
<a name="l00659"></a>00659 <span class="preprocessor"></span>                __asm__ __volatile__(
<a name="l00660"></a>00660                                 <span class="stringliteral">&quot;1:&quot;</span>                         <span class="stringliteral">&quot;\n&quot;</span>
<a name="l00661"></a>00661                                 <span class="stringliteral">&quot;       ldrex   %0, [%4]&quot;</span>        <span class="stringliteral">&quot;\n&quot;</span> <span class="comment">//load old value</span>
<a name="l00662"></a>00662                                 <span class="stringliteral">&quot;       teq     %0, %2&quot;</span>          <span class="stringliteral">&quot;\n&quot;</span> <span class="comment">//test for equality (xor operation)</span>
<a name="l00663"></a>00663                                 <span class="stringliteral">&quot;   bne     2f&quot;</span>              <span class="stringliteral">&quot;\n&quot;</span> <span class="comment">//jump to exit with clearing exclusive access</span>
<a name="l00664"></a>00664                                 <span class="stringliteral">&quot;       strexeq %1, %3, [%4]&quot;</span>    <span class="stringliteral">&quot;\n&quot;</span> <span class="comment">//if equal, then store exchangeBy value</span>
<a name="l00665"></a>00665                                 <span class="stringliteral">&quot;       teq     %1, #0&quot;</span>          <span class="stringliteral">&quot;\n&quot;</span> <span class="comment">//check if storing the value has succeeded (compare %1 with 0)</span>
<a name="l00666"></a>00666                                 <span class="stringliteral">&quot;       bne     1b&quot;</span>              <span class="stringliteral">&quot;\n&quot;</span> <span class="comment">//jump to label 1 backwards (to the beginning) to try again if %1 is not 0, i.e. storing has failed</span>
<a name="l00667"></a>00667                                 <span class="stringliteral">&quot;       b       3f&quot;</span>              <span class="stringliteral">&quot;\n&quot;</span> <span class="comment">//jump to exit if succeeded</span>
<a name="l00668"></a>00668                                 <span class="stringliteral">&quot;2:&quot;</span>                         <span class="stringliteral">&quot;\n&quot;</span>
<a name="l00669"></a>00669 #               <span class="keywordflow">if</span> <a class="code" href="config_8hpp.htm#a0eff34045368f3efce190ebdc3f3bb8c">M_CPU_VERSION</a> &gt;= 7                          <span class="comment">// CLREX instruction for ARM is supported in ARMv6K and higher, we don&#39;t detect this K and treat it as it is available from ARMv7</span>
<a name="l00670"></a>00670                                 <span class="stringliteral">&quot;       clrex&quot;</span>                   <span class="stringliteral">&quot;\n&quot;</span> <span class="comment">//was not equal, clear exclusive access</span>
<a name="l00671"></a>00671 #               <span class="keywordflow">else</span>
<a name="l00672"></a>00672                                 <span class="stringliteral">&quot;       strex   %1, %0, [%4]&quot;</span>    <span class="stringliteral">&quot;\n&quot;</span> <span class="comment">//store previous value, we don&#39;t care if it fails, since we just need to clear exclusive access</span>
<a name="l00673"></a>00673 #               endif
<a name="l00674"></a>00674                                 <span class="stringliteral">&quot;3:&quot;</span>
<a name="l00675"></a>00675                                                 : <span class="stringliteral">&quot;=&amp;r&quot;</span>(old), <span class="stringliteral">&quot;=&amp;r&quot;</span>(res)  <span class="comment">//res is not used, thus we need this &amp; early-clobber to avoid gcc assign the same register to it as to something else.</span>
<a name="l00676"></a>00676                                                 : <span class="stringliteral">&quot;r&quot;</span>(compareTo), <span class="stringliteral">&quot;r&quot;</span>(exchangeBy), <span class="stringliteral">&quot;r&quot;</span>(&amp;this-&gt;v)
<a name="l00677"></a>00677                                                 : <span class="stringliteral">&quot;cc&quot;</span>, <span class="stringliteral">&quot;memory&quot;</span> <span class="comment">// &quot;cc&quot; = &quot;condition codes&quot;</span>
<a name="l00678"></a>00678                         );
<a name="l00679"></a>00679 <span class="preprocessor">#       endif</span>
<a name="l00680"></a>00680 <span class="preprocessor"></span>                <span class="keywordflow">return</span> old;
<a name="l00681"></a>00681 
<a name="l00682"></a>00682 <span class="preprocessor">#else</span>
<a name="l00683"></a>00683 <span class="preprocessor"></span>                this-&gt;spinLock.<a class="code" href="classting_1_1atomic_1_1SpinLock.htm#ac5d3a0dd21de1eadae7f948a4884cb9c" title="Lock the spinlock.">Lock</a>();
<a name="l00684"></a>00684                 <a class="code" href="namespaceting.htm#a538865e72a75616abe86558cbe983026" title="Signed 32 bit type.">ting::s32</a> old = this-&gt;v;
<a name="l00685"></a>00685                 <span class="keywordflow">if</span>(old == compareTo){
<a name="l00686"></a>00686                         this-&gt;v = exchangeBy;
<a name="l00687"></a>00687                 }
<a name="l00688"></a>00688                 this-&gt;spinLock.<a class="code" href="classting_1_1atomic_1_1SpinLock.htm#aa834f0a00886fcf2a93b56bbeefc5df0" title="Unlock the spinlock.">Unlock</a>();
<a name="l00689"></a>00689                 <span class="keywordflow">return</span> old;
<a name="l00690"></a>00690 <span class="preprocessor">#endif</span>
<a name="l00691"></a>00691 <span class="preprocessor"></span>        }
<a name="l00692"></a>00692         
<a name="l00693"></a>00693         
<a name="l00694"></a>00694         
<a name="l00705"></a><a class="code" href="classting_1_1atomic_1_1S32.htm#aeadbb6f81f16c8f1c337ba8da46c7ba6">00705</a>         <span class="keyword">inline</span> <a class="code" href="namespaceting.htm#a538865e72a75616abe86558cbe983026" title="Signed 32 bit type.">ting::s32</a> <a class="code" href="classting_1_1atomic_1_1S32.htm#aeadbb6f81f16c8f1c337ba8da46c7ba6" title="Atomic compare and exchange operation.">CompareAndExchangeAcquire</a>(<a class="code" href="namespaceting.htm#a538865e72a75616abe86558cbe983026" title="Signed 32 bit type.">ting::s32</a> compareTo, <a class="code" href="namespaceting.htm#a538865e72a75616abe86558cbe983026" title="Signed 32 bit type.">ting::s32</a> exchangeBy)<span class="keywordflow">throw</span>(){
<a name="l00706"></a>00706                 <a class="code" href="namespaceting.htm#a538865e72a75616abe86558cbe983026" title="Signed 32 bit type.">ting::s32</a> ret = <a class="code" href="classting_1_1atomic_1_1S32.htm#a4eb498172b297d3fe52f998501eee2f4" title="Atomic compare and exchange operation.">CompareAndExchange</a>(compareTo, exchangeBy);
<a name="l00707"></a>00707                 atomic::Flag::MemoryBarrier();
<a name="l00708"></a>00708                 <span class="keywordflow">return</span> ret;
<a name="l00709"></a>00709         }
<a name="l00710"></a>00710         
<a name="l00711"></a>00711         
<a name="l00712"></a>00712         
<a name="l00723"></a><a class="code" href="classting_1_1atomic_1_1S32.htm#abc2bce81843186ccd47ed3c313d0065a">00723</a>         <span class="keyword">inline</span> <a class="code" href="namespaceting.htm#a538865e72a75616abe86558cbe983026" title="Signed 32 bit type.">ting::s32</a> <a class="code" href="classting_1_1atomic_1_1S32.htm#abc2bce81843186ccd47ed3c313d0065a" title="Atomic compare and exchange operation.">CompareAndExchangeRelease</a>(<a class="code" href="namespaceting.htm#a538865e72a75616abe86558cbe983026" title="Signed 32 bit type.">ting::s32</a> compareTo, <a class="code" href="namespaceting.htm#a538865e72a75616abe86558cbe983026" title="Signed 32 bit type.">ting::s32</a> exchangeBy)<span class="keywordflow">throw</span>(){
<a name="l00724"></a>00724                 atomic::Flag::MemoryBarrier();
<a name="l00725"></a>00725                 <span class="keywordflow">return</span> <a class="code" href="classting_1_1atomic_1_1S32.htm#a4eb498172b297d3fe52f998501eee2f4" title="Atomic compare and exchange operation.">CompareAndExchange</a>(compareTo, exchangeBy);
<a name="l00726"></a>00726         }
<a name="l00727"></a>00727         
<a name="l00728"></a>00728 } <a class="code" href="namespaceting_1_1atomic.htm#aa513f535e5ad73140599e383eb04f7eb">M_DECLARE_ALIGNED</a>(<span class="keyword">sizeof</span>(<span class="keywordtype">int</span>)); <span class="comment">//On most architectures, atomic operations require that the value to be naturally aligned.</span>
<a name="l00729"></a>00729 
<a name="l00730"></a>00730 
<a name="l00731"></a>00731 
<a name="l00735"></a><a class="code" href="atomic_8hpp.htm#afe48ce163895a0bb972cda1b8046e6d9">00735</a> <span class="keyword">class </span>U32{
<a name="l00736"></a>00736         <a class="code" href="atomic_8hpp.htm#a287b07ab58356e40b664415069dae742" title="Constructor.">atomic::S32</a> v;
<a name="l00737"></a>00737 <span class="keyword">public</span>:
<a name="l00742"></a><a class="code" href="classting_1_1atomic_1_1U32.htm#a076afa5ed05cd877db0d80eaef51a44c">00742</a>         <span class="keyword">inline</span> <a class="code" href="classting_1_1atomic_1_1U32.htm#a076afa5ed05cd877db0d80eaef51a44c" title="Constructor.">U32</a>(<a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">ting::u32</a> initialValue = 0) :
<a name="l00743"></a>00743                         v(ting::<a class="code" href="namespaceting.htm#a538865e72a75616abe86558cbe983026" title="Signed 32 bit type.">s32</a>(initialValue))
<a name="l00744"></a>00744         {}
<a name="l00745"></a><a class="code" href="atomic_8hpp.htm#a287b07ab58356e40b664415069dae742">00745</a>                         
<a name="l00746"></a><a class="code" href="classting_1_1atomic_1_1U32.htm#abafdec5d63ada6917ef784a87e44753c">00746</a>         <span class="keyword">inline</span> <a class="code" href="classting_1_1atomic_1_1U32.htm#abafdec5d63ada6917ef784a87e44753c">~U32</a>()throw(){}
<a name="l00747"></a>00747         
<a name="l00754"></a><a class="code" href="classting_1_1atomic_1_1U32.htm#ada47880bb0ed3519ba0fa8c0c3f456eb">00754</a>         <span class="keyword">inline</span> <a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">ting::u32</a> <a class="code" href="classting_1_1atomic_1_1U32.htm#ada47880bb0ed3519ba0fa8c0c3f456eb" title="Adds the value to this atomic variable and returns its initial value.">FetchAndAdd</a>(<a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">ting::u32</a> value)<span class="keywordflow">throw</span>(){
<a name="l00755"></a>00755                 <span class="keywordflow">return</span> <a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">ting::u32</a>(this-&gt;v.<a class="code" href="classting_1_1atomic_1_1S32.htm#a1293bbaf90e53a83e6d31d17368db75a" title="Adds the value to this atomic variable and returns its initial value.">FetchAndAdd</a>(<a class="code" href="namespaceting.htm#a538865e72a75616abe86558cbe983026" title="Signed 32 bit type.">ting::s32</a>(value)));
<a name="l00756"></a>00756         }
<a name="l00757"></a>00757         
<a name="l00764"></a><a class="code" href="classting_1_1atomic_1_1U32.htm#a47bec324be84746fc51fbb9ed5b0231a">00764</a>         <span class="keyword">inline</span> <a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">ting::u32</a> <a class="code" href="classting_1_1atomic_1_1U32.htm#a47bec324be84746fc51fbb9ed5b0231a" title="Adds the value to this atomic variable and returns its initial value.">FetchAndAddAcquire</a>(<a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">ting::u32</a> value)<span class="keywordflow">throw</span>(){
<a name="l00765"></a>00765                 <span class="keywordflow">return</span> <a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">ting::u32</a>(this-&gt;v.<a class="code" href="classting_1_1atomic_1_1S32.htm#a32d76005478cfd1ffd58fca2858f5e3c" title="Adds the value to this atomic variable and returns its initial value.">FetchAndAddAcquire</a>(<a class="code" href="namespaceting.htm#a538865e72a75616abe86558cbe983026" title="Signed 32 bit type.">ting::s32</a>(value)));
<a name="l00766"></a>00766         }
<a name="l00767"></a>00767         
<a name="l00774"></a><a class="code" href="classting_1_1atomic_1_1U32.htm#adf23e83a97877291a9e66531609fef25">00774</a>         <span class="keyword">inline</span> <a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">ting::u32</a> <a class="code" href="classting_1_1atomic_1_1U32.htm#adf23e83a97877291a9e66531609fef25" title="Adds the value to this atomic variable and returns its initial value.">FetchAndAddRelease</a>(<a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">ting::u32</a> value)<span class="keywordflow">throw</span>(){
<a name="l00775"></a>00775                 <span class="keywordflow">return</span> <a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">ting::u32</a>(this-&gt;v.<a class="code" href="classting_1_1atomic_1_1S32.htm#aa8b8f984cc5cc4bb4b30b7331fb1cfae" title="Adds the value to this atomic variable and returns its initial value.">FetchAndAddRelease</a>(<a class="code" href="namespaceting.htm#a538865e72a75616abe86558cbe983026" title="Signed 32 bit type.">ting::s32</a>(value)));
<a name="l00776"></a>00776         }
<a name="l00777"></a>00777         
<a name="l00784"></a><a class="code" href="classting_1_1atomic_1_1U32.htm#a964d8ff7012725f59b355edf642f7445">00784</a>         <span class="keyword">inline</span> <a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">ting::u32</a> <a class="code" href="classting_1_1atomic_1_1U32.htm#a964d8ff7012725f59b355edf642f7445" title="Subtracts the value from this atomic variable and returns its initial value.">FetchAndSubtract</a>(<a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">ting::u32</a> value)<span class="keywordflow">throw</span>(){
<a name="l00785"></a>00785                 <span class="keywordflow">return</span> <a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">ting::u32</a>(this-&gt;v.<a class="code" href="classting_1_1atomic_1_1S32.htm#a1293bbaf90e53a83e6d31d17368db75a" title="Adds the value to this atomic variable and returns its initial value.">FetchAndAdd</a>(-<a class="code" href="namespaceting.htm#a538865e72a75616abe86558cbe983026" title="Signed 32 bit type.">ting::s32</a>(value)));
<a name="l00786"></a>00786         }
<a name="l00787"></a>00787         
<a name="l00794"></a><a class="code" href="classting_1_1atomic_1_1U32.htm#a4c1402ac997d8953b5b48076b0da7c9d">00794</a>         <span class="keyword">inline</span> <a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">ting::u32</a> <a class="code" href="classting_1_1atomic_1_1U32.htm#a4c1402ac997d8953b5b48076b0da7c9d" title="Subtracts the value from this atomic variable and returns its initial value.">FetchAndSubtractAcquire</a>(<a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">ting::u32</a> value)<span class="keywordflow">throw</span>(){
<a name="l00795"></a>00795                 <span class="keywordflow">return</span> <a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">ting::u32</a>(this-&gt;v.<a class="code" href="classting_1_1atomic_1_1S32.htm#a32d76005478cfd1ffd58fca2858f5e3c" title="Adds the value to this atomic variable and returns its initial value.">FetchAndAddAcquire</a>(-<a class="code" href="namespaceting.htm#a538865e72a75616abe86558cbe983026" title="Signed 32 bit type.">ting::s32</a>(value)));
<a name="l00796"></a>00796         }
<a name="l00797"></a>00797         
<a name="l00804"></a><a class="code" href="classting_1_1atomic_1_1U32.htm#a67d198c49e649a0ee5f1174fd9631305">00804</a>         <span class="keyword">inline</span> <a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">ting::u32</a> <a class="code" href="classting_1_1atomic_1_1U32.htm#a67d198c49e649a0ee5f1174fd9631305" title="Subtracts the value from this atomic variable and returns its initial value.">FetchAndSubtractRelease</a>(<a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">ting::u32</a> value)<span class="keywordflow">throw</span>(){
<a name="l00805"></a>00805                 <span class="keywordflow">return</span> <a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">ting::u32</a>(this-&gt;v.<a class="code" href="classting_1_1atomic_1_1S32.htm#aa8b8f984cc5cc4bb4b30b7331fb1cfae" title="Adds the value to this atomic variable and returns its initial value.">FetchAndAddRelease</a>(-<a class="code" href="namespaceting.htm#a538865e72a75616abe86558cbe983026" title="Signed 32 bit type.">ting::s32</a>(value)));
<a name="l00806"></a>00806         }
<a name="l00807"></a>00807         
<a name="l00818"></a><a class="code" href="classting_1_1atomic_1_1U32.htm#a4ef44f1abfa90f8abda45b57cee61f0a">00818</a>         <span class="keyword">inline</span> <a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">ting::u32</a> <a class="code" href="classting_1_1atomic_1_1U32.htm#a4ef44f1abfa90f8abda45b57cee61f0a" title="Atomic compare and exchange operation.">CompareAndExchange</a>(<a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">ting::u32</a> compareTo, <a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">ting::u32</a> exchangeBy)<span class="keywordflow">throw</span>(){
<a name="l00819"></a>00819                 <span class="keywordflow">return</span> <a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">ting::u32</a>(this-&gt;v.<a class="code" href="classting_1_1atomic_1_1S32.htm#a4eb498172b297d3fe52f998501eee2f4" title="Atomic compare and exchange operation.">CompareAndExchange</a>(<a class="code" href="namespaceting.htm#a538865e72a75616abe86558cbe983026" title="Signed 32 bit type.">ting::s32</a>(compareTo), <a class="code" href="namespaceting.htm#a538865e72a75616abe86558cbe983026" title="Signed 32 bit type.">ting::s32</a>(exchangeBy)));
<a name="l00820"></a>00820         }
<a name="l00821"></a>00821 
<a name="l00832"></a><a class="code" href="classting_1_1atomic_1_1U32.htm#ade29d87fb35dc444b3b6a712ddd344dd">00832</a>         <span class="keyword">inline</span> <a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">ting::u32</a> <a class="code" href="classting_1_1atomic_1_1U32.htm#ade29d87fb35dc444b3b6a712ddd344dd" title="Atomic compare and exchange operation.">CompareAndExchangeAcquire</a>(<a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">ting::u32</a> compareTo, <a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">ting::u32</a> exchangeBy)<span class="keywordflow">throw</span>(){
<a name="l00833"></a>00833                 <span class="keywordflow">return</span> <a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">ting::u32</a>(this-&gt;v.<a class="code" href="classting_1_1atomic_1_1S32.htm#aeadbb6f81f16c8f1c337ba8da46c7ba6" title="Atomic compare and exchange operation.">CompareAndExchangeAcquire</a>(<a class="code" href="namespaceting.htm#a538865e72a75616abe86558cbe983026" title="Signed 32 bit type.">ting::s32</a>(compareTo), <a class="code" href="namespaceting.htm#a538865e72a75616abe86558cbe983026" title="Signed 32 bit type.">ting::s32</a>(exchangeBy)));
<a name="l00834"></a>00834         }
<a name="l00835"></a>00835         
<a name="l00846"></a><a class="code" href="classting_1_1atomic_1_1U32.htm#a0a1164dde39a9adacb1b91fef4e22e61">00846</a>         <span class="keyword">inline</span> <a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">ting::u32</a> <a class="code" href="classting_1_1atomic_1_1U32.htm#a0a1164dde39a9adacb1b91fef4e22e61" title="Atomic compare and exchange operation.">CompareAndExchangeRelease</a>(<a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">ting::u32</a> compareTo, <a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">ting::u32</a> exchangeBy)<span class="keywordflow">throw</span>(){
<a name="l00847"></a>00847                 <span class="keywordflow">return</span> <a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">ting::u32</a>(this-&gt;v.<a class="code" href="classting_1_1atomic_1_1S32.htm#abc2bce81843186ccd47ed3c313d0065a" title="Atomic compare and exchange operation.">CompareAndExchangeRelease</a>(<a class="code" href="namespaceting.htm#a538865e72a75616abe86558cbe983026" title="Signed 32 bit type.">ting::s32</a>(compareTo), <a class="code" href="namespaceting.htm#a538865e72a75616abe86558cbe983026" title="Signed 32 bit type.">ting::s32</a>(exchangeBy)));
<a name="l00848"></a><a class="code" href="atomic_8hpp.htm#ac51538cd69d8c6ebe26332e93160d2a0">00848</a>         }
<a name="l00849"></a>00849 };
<a name="l00850"></a>00850 
<a name="l00851"></a>00851 }<span class="comment">//~namespace atomic</span>
<a name="l00852"></a>00852 }<span class="comment">//~namespace ting</span>
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="atomic_8hpp.htm">atomic.hpp</a>      </li>

    <li class="footer">Generated on Thu Feb 21 2013 20:36:35 for libting by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
