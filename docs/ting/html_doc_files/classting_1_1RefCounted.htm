<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>libting: ting::RefCounted Class Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">libting
   &#160;<span id="projectnumber">2.0.0</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.htm"><span>Classes</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.htm"><span>Class&#160;List</span></a></li>
      <li><a href="classes.htm"><span>Class&#160;Index</span></a></li>
      <li><a href="hierarchy.htm"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.htm"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('classting_1_1RefCounted.htm','');
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pro-methods">Protected Member Functions</a> &#124;
<a href="#pro-static-methods">Static Protected Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">ting::RefCounted Class Reference</div>  </div>
</div><!--header-->
<div class="contents">
<!-- doxytag: class="ting::RefCounted" -->
<p>base class for a reference counted object.  
 <a href="classting_1_1RefCounted.htm#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="Ref_8hpp_source.htm">Ref.hpp</a>&gt;</code></p>

<p><a href="classting_1_1RefCounted-members.htm">List of all members.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><b>Counter</b></td></tr>
<tr><td colspan="2"><h2><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">unsigned&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1RefCounted.htm#af8dc6338d475fbdf23291071e4b7d5c7">NumRefs</a> () const   throw ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns current number of strong references pointing to this object.  <a href="#af8dc6338d475fbdf23291071e4b7d5c7"></a><br/></td></tr>
<tr><td colspan="2"><h2><a name="pro-methods"></a>
Protected Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1RefCounted.htm#a30ddf44c5f04b1d5512d4933676a5a97">RefCounted</a> ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructor.  <a href="#a30ddf44c5f04b1d5512d4933676a5a97"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1RefCounted.htm#aa4a7451e5971e05de0ac03ec8d826e67">~RefCounted</a> ()  throw ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Destructor.  <a href="#aa4a7451e5971e05de0ac03ec8d826e67"></a><br/></td></tr>
<tr><td colspan="2"><h2><a name="pro-static-methods"></a>
Static Protected Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1RefCounted.htm#a6fa5dc08f8d691a834e0e4baef9f3a47">operator new</a> (size_t s)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">operator new.  <a href="#a6fa5dc08f8d691a834e0e4baef9f3a47"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1RefCounted.htm#a63e539a073c41d37faefea450ff440ed">operator delete</a> (void *p)  throw ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">operator delete.  <a href="#a63e539a073c41d37faefea450ff440ed"></a><br/></td></tr>
</table>
<hr/><a name="details" id="details"></a><h2>Detailed Description</h2>
<div class="textblock"><p>base class for a reference counted object. </p>
<p>All object which are supposed to be used with reference counted pointers (<a class="el" href="classting_1_1Ref.htm" title="Reference to a reference counted object.">ting::Ref</a>) should be derived from <a class="el" href="classting_1_1RefCounted.htm" title="base class for a reference counted object.">ting::RefCounted</a>. Typical usage: </p>
<div class="fragment"><pre class="fragment">        <span class="keyword">class </span>Test : <span class="keyword">public</span> ting::<a class="code" href="classting_1_1RefCounted.htm#a30ddf44c5f04b1d5512d4933676a5a97" title="Constructor.">RefCounted</a>{
                Test(<span class="keywordtype">int</span> theA, <span class="keywordtype">int</span> theB) :
                                a(theA),
                                b(theB)
                {}
        <span class="keyword">public</span>:
                <span class="keywordtype">int</span> a;
                <span class="keywordtype">int</span> b;

                <span class="keyword">static</span> <span class="keyword">inline</span> <a class="code" href="classting_1_1Ref.htm" title="Reference to a reference counted object.">ting::Ref&lt;Test&gt;</a> New(<span class="keywordtype">int</span> theA, <span class="keywordtype">int</span> theB){
                        <span class="keywordflow">return</span> <a class="code" href="classting_1_1Ref.htm" title="Reference to a reference counted object.">ting::Ref&lt;Test&gt;</a>(<span class="keyword">new</span> Test(theA, theB));
                }
        }

        <span class="comment">//...</span>

        {
                <a class="code" href="classting_1_1Ref.htm" title="Reference to a reference counted object.">ting::Ref&lt;Test&gt;</a> t = Test::New(10, -13);
 
                t-&gt;a = 23;
                <span class="comment">//...</span>

                <a class="code" href="classting_1_1Ref.htm" title="Reference to a reference counted object.">ting::Ref&lt;Test&gt;</a> t2 = t;
                t2-&gt;b = 45;

                <span class="comment">//...</span>

        }<span class="comment">//the object will be destroyed here</span>
</pre></div><p>Note, the constructor of class Test in this example was done private and static method New() introduced to construct objects of class Test. It is recommended to do this for all <a class="el" href="classting_1_1RefCounted.htm" title="base class for a reference counted object.">ting::RefCounted</a> objects because they are not supposed to be accessed via ordinary pointers, only via <a class="el" href="classting_1_1Ref.htm" title="Reference to a reference counted object.">ting::Ref</a>. It is a good practice and it will make your code less error prone. </p>
</div><hr/><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="a30ddf44c5f04b1d5512d4933676a5a97"></a><!-- doxytag: member="ting::RefCounted::RefCounted" ref="a30ddf44c5f04b1d5512d4933676a5a97" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classting_1_1RefCounted.htm#a30ddf44c5f04b1d5512d4933676a5a97">ting::RefCounted::RefCounted</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline, protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Constructor. </p>
<p>This class is only supposed to be as base class, this is why this constructor is protected. </p>

</div>
</div>
<a class="anchor" id="aa4a7451e5971e05de0ac03ec8d826e67"></a><!-- doxytag: member="ting::RefCounted::~RefCounted" ref="aa4a7451e5971e05de0ac03ec8d826e67" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classting_1_1RefCounted.htm#aa4a7451e5971e05de0ac03ec8d826e67">ting::RefCounted::~RefCounted</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td>  throw ()<code> [inline, protected, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Destructor. </p>
<p>Destructor is protected because of the same reason as operator delete is. </p>

</div>
</div>
<hr/><h2>Member Function Documentation</h2>
<a class="anchor" id="af8dc6338d475fbdf23291071e4b7d5c7"></a><!-- doxytag: member="ting::RefCounted::NumRefs" ref="af8dc6338d475fbdf23291071e4b7d5c7" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned <a class="el" href="classting_1_1RefCounted.htm#af8dc6338d475fbdf23291071e4b7d5c7">ting::RefCounted::NumRefs</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const  throw ()<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Returns current number of strong references pointing to this object. </p>
<p>This method returns the current number of strong references. It is not guaranteed that the returned number is actual, since new references may be constructed and some may be destroyed meanwhile. One should not rely on the returned value unless he knows what he is doing! </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>number of strong references. </dd></dl>

</div>
</div>
<a class="anchor" id="a63e539a073c41d37faefea450ff440ed"></a><!-- doxytag: member="ting::RefCounted::operator delete" ref="a63e539a073c41d37faefea450ff440ed" args="(void *p)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void ting::RefCounted::operator delete </td>
          <td>(</td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>p</em></td><td>)</td>
          <td>  throw ()<code> [inline, static, protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>operator delete. </p>
<p>Releases allocated memory. This operator delete is protected because only <a class="el" href="classting_1_1Ref.htm" title="Reference to a reference counted object.">ting::Ref</a> can delete the <a class="el" href="classting_1_1RefCounted.htm" title="base class for a reference counted object.">RefCounted</a> object. NOTE: cannot make operator delete private because it should have same access level as operator new, because in case of failure in the constructor of the object (i.e. it throws an exception) the allocated memory should be freed with "delete", thus when using operator new it implicitly needs to be possible to call operator delete from the same place where the operator new is used. </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">p</td><td>- address of the memory block to release. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a6fa5dc08f8d691a834e0e4baef9f3a47"></a><!-- doxytag: member="ting::RefCounted::operator new" ref="a6fa5dc08f8d691a834e0e4baef9f3a47" args="(size_t s)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void* ting::RefCounted::operator new </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td><code> [inline, static, protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>operator new. </p>
<p>This operator new just calls and returns the result of global 'new'. This operator new is protected to enforce objects creation through static New() method, to avoid using of <a class="el" href="classting_1_1RefCounted.htm" title="base class for a reference counted object.">RefCounted</a> objects via ordinary pointers. See description of the <a class="el" href="classting_1_1RefCounted.htm" title="base class for a reference counted object.">RefCounted</a> class for more info. </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">s</td><td>- size of the memory block to allocate. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>address of the allocated memory block. </dd></dl>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="Ref_8hpp_source.htm">Ref.hpp</a></li>
</ul>
</div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="namespaceting.htm">ting</a>      </li>
      <li class="navelem"><a class="el" href="classting_1_1RefCounted.htm">RefCounted</a>      </li>

    <li class="footer">Generated on Thu Feb 21 2013 20:36:36 for libting by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
