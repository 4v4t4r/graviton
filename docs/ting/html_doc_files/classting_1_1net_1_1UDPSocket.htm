<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>libting: ting::net::UDPSocket Class Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">libting
   &#160;<span id="projectnumber">2.0.0</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.htm"><span>Classes</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.htm"><span>Class&#160;List</span></a></li>
      <li><a href="classes.htm"><span>Class&#160;Index</span></a></li>
      <li><a href="hierarchy.htm"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.htm"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('classting_1_1net_1_1UDPSocket.htm','');
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">ting::net::UDPSocket Class Reference</div>  </div>
</div><!--header-->
<div class="contents">
<!-- doxytag: class="ting::net::UDPSocket" --><!-- doxytag: inherits="ting::net::Socket" -->
<p>UDP socket class.  
 <a href="classting_1_1net_1_1UDPSocket.htm#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="UDPSocket_8hpp_source.htm">UDPSocket.hpp</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for ting::net::UDPSocket:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classting_1_1net_1_1UDPSocket.png" usemap="#ting::net::UDPSocket_map" alt=""/>
  <map id="ting::net::UDPSocket_map" name="ting::net::UDPSocket_map">
<area href="classting_1_1net_1_1Socket.htm" title="Basic socket class." alt="ting::net::Socket" shape="rect" coords="0,56,124,80"/>
<area href="classting_1_1Waitable.htm" title="Base class for objects which can be waited for." alt="ting::Waitable" shape="rect" coords="0,0,124,24"/>
</map>
 </div></div>

<p><a href="classting_1_1net_1_1UDPSocket-members.htm">List of all members.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1net_1_1UDPSocket.htm#a6ab5dbf340ed7e4134a621e903c79dab">UDPSocket</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1net_1_1UDPSocket.htm#a3388ce075b3f8d36e1fa58046e3af41e">UDPSocket</a> (const <a class="el" href="classting_1_1net_1_1UDPSocket.htm">UDPSocket</a> &amp;s)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Copy constructor.  <a href="#a3388ce075b3f8d36e1fa58046e3af41e"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classting_1_1net_1_1UDPSocket.htm">UDPSocket</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1net_1_1UDPSocket.htm#afd6aa50c71cf659301ae92d2621382ea">operator=</a> (const <a class="el" href="classting_1_1net_1_1UDPSocket.htm">UDPSocket</a> &amp;s)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Assignment operator, works similar to std::auto_ptr::operator=().  <a href="#afd6aa50c71cf659301ae92d2621382ea"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1net_1_1UDPSocket.htm#aacc5d08f2c07f5ffb5e0c19aa2761234">Open</a> (<a class="el" href="namespaceting.htm#ab6db9a617ea99ab580a064cef5030906">u16</a> port=0)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Open the socket.  <a href="#aacc5d08f2c07f5ffb5e0c19aa2761234"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1net_1_1UDPSocket.htm#a0d1954b3d805b6c13675f5d5e9e0d06d">Send</a> (const <a class="el" href="classting_1_1Buffer.htm">ting::Buffer</a>&lt; const <a class="el" href="namespaceting.htm#a2debe052f64b3825ad3e8e3ee1861e66">ting::u8</a> &gt; &amp;buf, const <a class="el" href="classting_1_1net_1_1IPAddress.htm">IPAddress</a> &amp;destinationIP)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Send datagram over UDP socket.  <a href="#a0d1954b3d805b6c13675f5d5e9e0d06d"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1net_1_1UDPSocket.htm#a1caaf1ea641435d2763a4971fc5b3150">Recv</a> (const <a class="el" href="classting_1_1Buffer.htm">ting::Buffer</a>&lt; <a class="el" href="namespaceting.htm#a2debe052f64b3825ad3e8e3ee1861e66">ting::u8</a> &gt; &amp;buf, <a class="el" href="classting_1_1net_1_1IPAddress.htm">IPAddress</a> &amp;out_SenderIP)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Receive datagram.  <a href="#a1caaf1ea641435d2763a4971fc5b3150"></a><br/></td></tr>
</table>
<hr/><a name="details" id="details"></a><h2>Detailed Description</h2>
<div class="textblock"><p>UDP socket class. </p>
<p><a class="el" href="classting_1_1net_1_1Socket.htm" title="Basic socket class.">Socket</a> for User Datagram Protocol. NOTE: Win32 specific: when using UDP socket with <a class="el" href="classting_1_1WaitSet.htm" title="Set of Waitable objects to wait for.">WaitSet</a> be aware that waiting on UDP socket for writing does not work on Win32 OS. On other operating systems it works OK. </p>
</div><hr/><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="a6ab5dbf340ed7e4134a621e903c79dab"></a><!-- doxytag: member="ting::net::UDPSocket::UDPSocket" ref="a6ab5dbf340ed7e4134a621e903c79dab" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classting_1_1net_1_1UDPSocket.htm#a6ab5dbf340ed7e4134a621e903c79dab">ting::net::UDPSocket::UDPSocket</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a3388ce075b3f8d36e1fa58046e3af41e"></a><!-- doxytag: member="ting::net::UDPSocket::UDPSocket" ref="a3388ce075b3f8d36e1fa58046e3af41e" args="(const UDPSocket &amp;s)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classting_1_1net_1_1UDPSocket.htm#a6ab5dbf340ed7e4134a621e903c79dab">ting::net::UDPSocket::UDPSocket</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classting_1_1net_1_1UDPSocket.htm">UDPSocket</a> &amp;&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Copy constructor. </p>
<p>It works the same way as for copy constructor of <a class="el" href="classting_1_1net_1_1TCPSocket.htm" title="a class which represents a TCP socket.">TCPSocket</a>. </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">s</td><td>- socket to copy from. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<hr/><h2>Member Function Documentation</h2>
<a class="anchor" id="aacc5d08f2c07f5ffb5e0c19aa2761234"></a><!-- doxytag: member="ting::net::UDPSocket::Open" ref="aacc5d08f2c07f5ffb5e0c19aa2761234" args="(u16 port=0)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classting_1_1net_1_1UDPSocket.htm#aacc5d08f2c07f5ffb5e0c19aa2761234">ting::net::UDPSocket::Open</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespaceting.htm#ab6db9a617ea99ab580a064cef5030906">u16</a>&#160;</td>
          <td class="paramname"><em>port</em> = <code>0</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Open the socket. </p>
<p>This method opens the socket, this socket can further be used to send or receive data. After the socket is opened it becomes a valid socket and <a class="el" href="classting_1_1net_1_1Socket.htm#a9cc2d5ba8fda839c7339fef269f6ecfd" title="Tells whether the socket is opened or not.">Socket::IsValid()</a> will return true for such socket. After the socket is closed it becomes invalid. In other words, a valid socket is an opened socket. In case of errors this method throws <a class="el" href="classting_1_1net_1_1Exc.htm" title="Basic exception class.">net::Exc</a>. </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">port</td><td>- IP port number on which the socket will listen for incoming datagrams. If 0 is passed then system will assign some free port if any. If there are no free ports, then it is an error and an exception will be thrown. This is useful for server-side sockets, for client-side sockets use <a class="el" href="classting_1_1net_1_1UDPSocket.htm#aacc5d08f2c07f5ffb5e0c19aa2761234" title="Open the socket.">UDPSocket::Open()</a>. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="afd6aa50c71cf659301ae92d2621382ea"></a><!-- doxytag: member="ting::net::UDPSocket::operator=" ref="afd6aa50c71cf659301ae92d2621382ea" args="(const UDPSocket &amp;s)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classting_1_1net_1_1UDPSocket.htm">UDPSocket</a>&amp; ting::net::UDPSocket::operator= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classting_1_1net_1_1UDPSocket.htm">UDPSocket</a> &amp;&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Assignment operator, works similar to std::auto_ptr::operator=(). </p>
<p>After this assignment operator completes this socket object refers to the socket the s object referred before, s become invalid. It works similar to std::auto_ptr::operator=() from standard C++ library. </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">s</td><td>- socket to assign from. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a1caaf1ea641435d2763a4971fc5b3150"></a><!-- doxytag: member="ting::net::UDPSocket::Recv" ref="a1caaf1ea641435d2763a4971fc5b3150" args="(const ting::Buffer&lt; ting::u8 &gt; &amp;buf, IPAddress &amp;out_SenderIP)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">size_t <a class="el" href="classting_1_1net_1_1UDPSocket.htm#a1caaf1ea641435d2763a4971fc5b3150">ting::net::UDPSocket::Recv</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classting_1_1Buffer.htm">ting::Buffer</a>&lt; <a class="el" href="namespaceting.htm#a2debe052f64b3825ad3e8e3ee1861e66">ting::u8</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>buf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classting_1_1net_1_1IPAddress.htm">IPAddress</a> &amp;&#160;</td>
          <td class="paramname"><em>out_SenderIP</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Receive datagram. </p>
<p>Writes a datagram to the given buffer at once if it is available. If there is no received datagram available a 0 will be returned. Note, that it will always write out the whole datagram at once. I.e. it is either all or nothing. Except for the case when the given buffer is not large enough to store the datagram, in which case the datagram is truncated to the size of the buffer and the rest of the data is lost. </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">buf</td><td>- reference to the buffer the received datagram will be stored to. The buffer should be large enough to store the whole datagram. If datagram does not fit the passed buffer, then the datagram tail will be truncated and this tail data will be lost. </td></tr>
    <tr><td class="paramname">out_SenderIP</td><td>- reference to the IP-address structure where the IP-address of the sender will be stored. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>number of bytes stored in the output buffer. </dd></dl>

</div>
</div>
<a class="anchor" id="a0d1954b3d805b6c13675f5d5e9e0d06d"></a><!-- doxytag: member="ting::net::UDPSocket::Send" ref="a0d1954b3d805b6c13675f5d5e9e0d06d" args="(const ting::Buffer&lt; const ting::u8 &gt; &amp;buf, const IPAddress &amp;destinationIP)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">size_t <a class="el" href="classting_1_1net_1_1UDPSocket.htm#a0d1954b3d805b6c13675f5d5e9e0d06d">ting::net::UDPSocket::Send</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classting_1_1Buffer.htm">ting::Buffer</a>&lt; const <a class="el" href="namespaceting.htm#a2debe052f64b3825ad3e8e3ee1861e66">ting::u8</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>buf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classting_1_1net_1_1IPAddress.htm">IPAddress</a> &amp;&#160;</td>
          <td class="paramname"><em>destinationIP</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Send datagram over UDP socket. </p>
<p>The datagram is sent to UDP socket all at once. If the datagram cannot be sent at once at the current moment, 0 will be returned. Note, that underlying protocol limits the maximum size of the datagram, trying to send the bigger datagram will result in an exception to be thrown. </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">buf</td><td>- buffer containing the datagram to send. </td></tr>
    <tr><td class="paramname">destinationIP</td><td>- the destination IP address to send the datagram to. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>number of bytes actually sent. Actually it is either 0 or the size of the datagram passed in as argument. </dd></dl>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="UDPSocket_8hpp_source.htm">UDPSocket.hpp</a></li>
</ul>
</div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="namespaceting.htm">ting</a>      </li>
      <li class="navelem"><a class="el" href="namespaceting_1_1net.htm">net</a>      </li>
      <li class="navelem"><a class="el" href="classting_1_1net_1_1UDPSocket.htm">UDPSocket</a>      </li>

    <li class="footer">Generated on Thu Feb 21 2013 20:36:38 for libting by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
