<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>libting: ting::fs::File Class Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">libting
   &#160;<span id="projectnumber">2.0.0</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.htm"><span>Classes</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.htm"><span>Class&#160;List</span></a></li>
      <li><a href="classes.htm"><span>Class&#160;Index</span></a></li>
      <li><a href="hierarchy.htm"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.htm"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('classting_1_1fs_1_1File.htm','');
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pro-methods">Protected Member Functions</a> &#124;
<a href="#pro-attribs">Protected Attributes</a>  </div>
  <div class="headertitle">
<div class="title">ting::fs::File Class Reference</div>  </div>
</div><!--header-->
<div class="contents">
<!-- doxytag: class="ting::fs::File" -->
<p>Abstract interface to a file system.  
 <a href="classting_1_1fs_1_1File.htm#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="File_8hpp_source.htm">File.hpp</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for ting::fs::File:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classting_1_1fs_1_1File.png" usemap="#ting::fs::File_map" alt=""/>
  <map id="ting::fs::File_map" name="ting::fs::File_map">
<area href="classting_1_1fs_1_1FSFile.htm" title="Native OS file system implementation of File interface." alt="ting::fs::FSFile" shape="rect" coords="0,56,91,80"/>
</map>
 </div></div>

<p><a href="classting_1_1fs_1_1File-members.htm">List of all members.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1fs_1_1File_1_1Exc.htm">Exc</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic exception class.  <a href="classting_1_1fs_1_1File_1_1Exc.htm#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1fs_1_1File_1_1Guard.htm">Guard</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classting_1_1fs_1_1File.htm" title="Abstract interface to a file system.">File</a> guard class.  <a href="classting_1_1fs_1_1File_1_1Guard.htm#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1fs_1_1File_1_1IllegalStateExc.htm">IllegalStateExc</a></td></tr>
<tr><td colspan="2"><h2><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1fs_1_1File.htm#a00e1ee34be46110fb687ca6215f6c3b4">E_Mode</a> { <a class="el" href="classting_1_1fs_1_1File.htm#a00e1ee34be46110fb687ca6215f6c3b4a127353eded4820c85411bb79b5f09bf6">READ</a>, 
<a class="el" href="classting_1_1fs_1_1File.htm#a00e1ee34be46110fb687ca6215f6c3b4a189c30d8f3718ec923ba51d8b53066ed">WRITE</a>, 
<a class="el" href="classting_1_1fs_1_1File.htm#a00e1ee34be46110fb687ca6215f6c3b4aab0570011a980fa2bcdcbd49617afce9">CREATE</a>
 }</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Modes of opening the file.  <a href="classting_1_1fs_1_1File.htm#a00e1ee34be46110fb687ca6215f6c3b4">More...</a><br/></td></tr>
<tr><td colspan="2"><h2><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1fs_1_1File.htm#a32a91c3d8a5039ea4afaccf9ca6aa25e">File</a> (const std::string &amp;pathName=std::string())</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructor.  <a href="#a32a91c3d8a5039ea4afaccf9ca6aa25e"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1fs_1_1File.htm#a4fbbadd912f141df0c85a7ba85bfbeb8">~File</a> ()  throw ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Destructor.  <a href="#a4fbbadd912f141df0c85a7ba85bfbeb8"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1fs_1_1File.htm#a2160184aa59678bc016113432fd8dc50">SetPath</a> (const std::string &amp;pathName)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the path for this <a class="el" href="classting_1_1fs_1_1File.htm" title="Abstract interface to a file system.">File</a> instance.  <a href="#a2160184aa59678bc016113432fd8dc50"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const std::string &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1fs_1_1File.htm#a2d02c33cbeced7cf6d1552852257f8af">Path</a> () const   throw ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the current path being held by this <a class="el" href="classting_1_1fs_1_1File.htm" title="Abstract interface to a file system.">File</a> instance.  <a href="#a2d02c33cbeced7cf6d1552852257f8af"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1fs_1_1File.htm#a0cc58c67e2e91596cfd543e3fb57d511">ExtractExtension</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Get file extension.  <a href="#a0cc58c67e2e91596cfd543e3fb57d511"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1fs_1_1File.htm#a2ac986537fff058c19ff70ffb1f904ac">ExtractDirectory</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Get directory part of the path.  <a href="#a2ac986537fff058c19ff70ffb1f904ac"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1fs_1_1File.htm#a75a04abf7392b39e64284439efd1f835">Open</a> (<a class="el" href="classting_1_1fs_1_1File.htm#a00e1ee34be46110fb687ca6215f6c3b4">E_Mode</a> mode)=0</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Open file.  <a href="#a75a04abf7392b39e64284439efd1f835"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1fs_1_1File.htm#a10c578b5b27f9601005c48a879d7b993">Close</a> ()=0  throw ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Close file.  <a href="#a10c578b5b27f9601005c48a879d7b993"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1fs_1_1File.htm#a30ab0c7709bbf1406173666ab9c69690">IsOpened</a> () const   throw ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if the file is opened.  <a href="#a30ab0c7709bbf1406173666ab9c69690"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1fs_1_1File.htm#aa1890a0cdb149e89c38d59668ec429ce">IsDir</a> () const   throw ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true if path points to directory.  <a href="#aa1890a0cdb149e89c38d59668ec429ce"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classting_1_1Array.htm">ting::Array</a>&lt; std::string &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1fs_1_1File.htm#a3e680cf32e988290379ab70d0c58123b">ListDirContents</a> (size_t maxEntries=0)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Get list of files and subdirectories of a directory.  <a href="#a3e680cf32e988290379ab70d0c58123b"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1fs_1_1File.htm#a03bad219d0852bdaf5b273acff7023ab">Read</a> (const <a class="el" href="classting_1_1Buffer.htm">ting::Buffer</a>&lt; <a class="el" href="namespaceting.htm#a2debe052f64b3825ad3e8e3ee1861e66">ting::u8</a> &gt; &amp;buf, size_t numBytesToRead=0, size_t offset=0)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Read data from file.  <a href="#a03bad219d0852bdaf5b273acff7023ab"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1fs_1_1File.htm#a556ca6d886aab4617188234409f640ee">Write</a> (const <a class="el" href="classting_1_1Buffer.htm">ting::Buffer</a>&lt; const <a class="el" href="namespaceting.htm#a2debe052f64b3825ad3e8e3ee1861e66">ting::u8</a> &gt; &amp;buf, size_t numBytesToWrite=0, size_t offset=0)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Write data to file.  <a href="#a556ca6d886aab4617188234409f640ee"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1fs_1_1File.htm#aff899e10d471c7101679d90986d0a0fe">SeekForward</a> (size_t numBytesToSeek)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Seek forward.  <a href="#aff899e10d471c7101679d90986d0a0fe"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1fs_1_1File.htm#a62ba851cc630b0ccda51d208c28eb309">SeekBackward</a> (size_t numBytesToSeek)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Seek backwards.  <a href="#a62ba851cc630b0ccda51d208c28eb309"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1fs_1_1File.htm#a16f8ef0e4184234731dfefb3cc0149e3">Rewind</a> ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Seek to the beginning of the file.  <a href="#a16f8ef0e4184234731dfefb3cc0149e3"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1fs_1_1File.htm#a9a1f8b4f370b87030239453cfdcb21d8">MakeDir</a> ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Create directory.  <a href="#a9a1f8b4f370b87030239453cfdcb21d8"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classting_1_1Array.htm">ting::Array</a>&lt; <a class="el" href="namespaceting.htm#a2debe052f64b3825ad3e8e3ee1861e66">ting::u8</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1fs_1_1File.htm#a6cb5b61e08e067fa98babc1857113fc0">LoadWholeFileIntoMemory</a> (size_t maxBytesToLoad=size_t(-1))</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Load the entire file into the RAM.  <a href="#a6cb5b61e08e067fa98babc1857113fc0"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1fs_1_1File.htm#a92e8106e3c1ee35729fb7695ae596aab">Exists</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Check for file/directory existence.  <a href="#a92e8106e3c1ee35729fb7695ae596aab"></a><br/></td></tr>
<tr><td colspan="2"><h2><a name="pro-methods"></a>
Protected Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1fs_1_1File.htm#ade8112c05d7e7130e19eb4705d6f1862">ReadInternal</a> (const <a class="el" href="classting_1_1Buffer.htm">ting::Buffer</a>&lt; <a class="el" href="namespaceting.htm#a2debe052f64b3825ad3e8e3ee1861e66">ting::u8</a> &gt; &amp;buf)=0</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Read data from file.  <a href="#ade8112c05d7e7130e19eb4705d6f1862"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1fs_1_1File.htm#a1a1d177ebb1d2553afe2ad0cce552a16">WriteInternal</a> (const <a class="el" href="classting_1_1Buffer.htm">ting::Buffer</a>&lt; const <a class="el" href="namespaceting.htm#a2debe052f64b3825ad3e8e3ee1861e66">ting::u8</a> &gt; &amp;buf)=0</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Write data to file.  <a href="#a1a1d177ebb1d2553afe2ad0cce552a16"></a><br/></td></tr>
<tr><td colspan="2"><h2><a name="pro-attribs"></a>
Protected Attributes</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classting_1_1Inited.htm">ting::Inited</a>&lt; bool, false &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1fs_1_1File.htm#a5e166cfb170766fe6002e3eecd28ea1f">isOpened</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classting_1_1fs_1_1File.htm#a00e1ee34be46110fb687ca6215f6c3b4">E_Mode</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1fs_1_1File.htm#a5382c3a6e37a85e0a1c240ff69075715">ioMode</a></td></tr>
</table>
<hr/><a name="details" id="details"></a><h2>Detailed Description</h2>
<div class="textblock"><p>Abstract interface to a file system. </p>
<p>This class represents an abstract interface to a file system. </p>
</div><hr/><h2>Member Enumeration Documentation</h2>
<a class="anchor" id="a00e1ee34be46110fb687ca6215f6c3b4"></a><!-- doxytag: member="ting::fs::File::E_Mode" ref="a00e1ee34be46110fb687ca6215f6c3b4" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="classting_1_1fs_1_1File.htm#a00e1ee34be46110fb687ca6215f6c3b4">ting::fs::File::E_Mode</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Modes of opening the file. </p>
<dl><dt><b>Enumerator: </b></dt><dd><table border="0" cellspacing="2" cellpadding="0">
<tr><td valign="top"><em><a class="anchor" id="a00e1ee34be46110fb687ca6215f6c3b4a127353eded4820c85411bb79b5f09bf6"></a><!-- doxytag: member="READ" ref="a00e1ee34be46110fb687ca6215f6c3b4a127353eded4820c85411bb79b5f09bf6" args="" -->READ</em>&nbsp;</td><td>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="a00e1ee34be46110fb687ca6215f6c3b4a189c30d8f3718ec923ba51d8b53066ed"></a><!-- doxytag: member="WRITE" ref="a00e1ee34be46110fb687ca6215f6c3b4a189c30d8f3718ec923ba51d8b53066ed" args="" -->WRITE</em>&nbsp;</td><td>
<p>Open existing file for read only. </p>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="a00e1ee34be46110fb687ca6215f6c3b4aab0570011a980fa2bcdcbd49617afce9"></a><!-- doxytag: member="CREATE" ref="a00e1ee34be46110fb687ca6215f6c3b4aab0570011a980fa2bcdcbd49617afce9" args="" -->CREATE</em>&nbsp;</td><td>
<p>Open existing file for read and write. </p>
<p>Create new file and open it for read and write. If file exists it will be replaced by empty file. </p>
</td></tr>
</table>
</dd>
</dl>

</div>
</div>
<hr/><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="a32a91c3d8a5039ea4afaccf9ca6aa25e"></a><!-- doxytag: member="ting::fs::File::File" ref="a32a91c3d8a5039ea4afaccf9ca6aa25e" args="(const std::string &amp;pathName=std::string())" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classting_1_1fs_1_1File.htm#a32a91c3d8a5039ea4afaccf9ca6aa25e">ting::fs::File::File</a> </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>pathName</em> = <code>std::string()</code></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Constructor. </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">pathName</td><td>- initial path to set to the newly created <a class="el" href="classting_1_1fs_1_1File.htm" title="Abstract interface to a file system.">File</a> instance. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a4fbbadd912f141df0c85a7ba85bfbeb8"></a><!-- doxytag: member="ting::fs::File::~File" ref="a4fbbadd912f141df0c85a7ba85bfbeb8" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classting_1_1fs_1_1File.htm#a4fbbadd912f141df0c85a7ba85bfbeb8">ting::fs::File::~File</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td>  throw ()<code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Destructor. </p>
<p>This destructor does not call <a class="el" href="classting_1_1fs_1_1File.htm#a10c578b5b27f9601005c48a879d7b993" title="Close file.">Close()</a> method, but it has an ASSERT which checks if the file is closed. The file shall be closed upon the object destruction, all the implementations should assure that. </p>

</div>
</div>
<hr/><h2>Member Function Documentation</h2>
<a class="anchor" id="a10c578b5b27f9601005c48a879d7b993"></a><!-- doxytag: member="ting::fs::File::Close" ref="a10c578b5b27f9601005c48a879d7b993" args="()=0" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual void <a class="el" href="classting_1_1fs_1_1File.htm#a10c578b5b27f9601005c48a879d7b993">ting::fs::File::Close</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td>  throw ()<code> [pure virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Close file. </p>

<p>Implemented in <a class="el" href="classting_1_1fs_1_1FSFile.htm#a5c6ded477a4139e67e27a565fba6bfd3">ting::fs::FSFile</a>.</p>

</div>
</div>
<a class="anchor" id="a92e8106e3c1ee35729fb7695ae596aab"></a><!-- doxytag: member="ting::fs::File::Exists" ref="a92e8106e3c1ee35729fb7695ae596aab" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool <a class="el" href="classting_1_1fs_1_1File.htm#a92e8106e3c1ee35729fb7695ae596aab">ting::fs::File::Exists</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Check for file/directory existence. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>true - if file/directory exists. </dd>
<dd>
false - otherwise. </dd></dl>

<p>Reimplemented in <a class="el" href="classting_1_1fs_1_1FSFile.htm#a607c89925082c7fc14569809a3f9ac87">ting::fs::FSFile</a>.</p>

</div>
</div>
<a class="anchor" id="a2ac986537fff058c19ff70ffb1f904ac"></a><!-- doxytag: member="ting::fs::File::ExtractDirectory" ref="a2ac986537fff058c19ff70ffb1f904ac" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string <a class="el" href="classting_1_1fs_1_1File.htm#a2ac986537fff058c19ff70ffb1f904ac">ting::fs::File::ExtractDirectory</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get directory part of the path. </p>
<p>Example: if path is '/home/user/some.file.txt' then the return value will be '/home/user/'. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>String representation of directory part of the path. </dd></dl>

</div>
</div>
<a class="anchor" id="a0cc58c67e2e91596cfd543e3fb57d511"></a><!-- doxytag: member="ting::fs::File::ExtractExtension" ref="a0cc58c67e2e91596cfd543e3fb57d511" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string <a class="el" href="classting_1_1fs_1_1File.htm#a0cc58c67e2e91596cfd543e3fb57d511">ting::fs::File::ExtractExtension</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get file extension. </p>
<p>Returns a string containing the tail part of the file path, everything that goes after the last dot character ('.') in the file path string. I.e. if the file path is '/home/user/some.file.txt' then the return value will be 'txt'. Note, that on *nix systems if the file name starts with a dot then this file is treated as hidden, in that case it is thought that the file has no extension. I.e., for example , if the file path is '/home/user/.myfile' then the file has no extension and this function will return an empty string. Although, if the file path is '/home/user/.myfile.txt' then the file does have an extension and the function will return 'txt'. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>String representing file extension. </dd></dl>

</div>
</div>
<a class="anchor" id="aa1890a0cdb149e89c38d59668ec429ce"></a><!-- doxytag: member="ting::fs::File::IsDir" ref="aa1890a0cdb149e89c38d59668ec429ce" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classting_1_1fs_1_1File.htm#aa1890a0cdb149e89c38d59668ec429ce">ting::fs::File::IsDir</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const  throw ()</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Returns true if path points to directory. </p>
<p>Determines if the current path is a directory. This function just checks if the path finishes with '/' character, and if it does then it is a directory. Empty path refers to the current directory. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>true - if current path points to a directory. </dd>
<dd>
false - otherwise. </dd></dl>

</div>
</div>
<a class="anchor" id="a30ab0c7709bbf1406173666ab9c69690"></a><!-- doxytag: member="ting::fs::File::IsOpened" ref="a30ab0c7709bbf1406173666ab9c69690" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classting_1_1fs_1_1File.htm#a30ab0c7709bbf1406173666ab9c69690">ting::fs::File::IsOpened</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const  throw ()<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Check if the file is opened. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>true - if the file is opened. </dd>
<dd>
false - otherwise. </dd></dl>

</div>
</div>
<a class="anchor" id="a3e680cf32e988290379ab70d0c58123b"></a><!-- doxytag: member="ting::fs::File::ListDirContents" ref="a3e680cf32e988290379ab70d0c58123b" args="(size_t maxEntries=0)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classting_1_1Array.htm">ting::Array</a>&lt;std::string&gt; <a class="el" href="classting_1_1fs_1_1File.htm#a3e680cf32e988290379ab70d0c58123b">ting::fs::File::ListDirContents</a> </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>maxEntries</em> = <code>0</code></td><td>)</td>
          <td><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get list of files and subdirectories of a directory. </p>
<p>If this <a class="el" href="classting_1_1fs_1_1File.htm" title="Abstract interface to a file system.">File</a> instance holds a path to a directory then this method can be used to obtain the contents of the directory. </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">maxEntries</td><td>- maximum number of entries in the returned list. 0 means no limit. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>The array of string objects representing the directory entries. </dd></dl>

<p>Reimplemented in <a class="el" href="classting_1_1fs_1_1FSFile.htm#a46c8158df7765455fdc52f075fe40e07">ting::fs::FSFile</a>.</p>

</div>
</div>
<a class="anchor" id="a6cb5b61e08e067fa98babc1857113fc0"></a><!-- doxytag: member="ting::fs::File::LoadWholeFileIntoMemory" ref="a6cb5b61e08e067fa98babc1857113fc0" args="(size_t maxBytesToLoad=size_t(&#45;1))" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classting_1_1Array.htm">ting::Array</a>&lt;<a class="el" href="namespaceting.htm#a2debe052f64b3825ad3e8e3ee1861e66">ting::u8</a>&gt; <a class="el" href="classting_1_1fs_1_1File.htm#a6cb5b61e08e067fa98babc1857113fc0">ting::fs::File::LoadWholeFileIntoMemory</a> </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>maxBytesToLoad</em> = <code>size_t(-1)</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Load the entire file into the RAM. </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">maxBytesToLoad</td><td>- maximum bytes to load. Default value is the maximum limit the size_t type can hold. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd><a class="el" href="classting_1_1Array.htm" title="wrapper above new[]/delete[].">Array</a> containing loaded file data. </dd></dl>
<dl class="exception"><dt><b>Exceptions:</b></dt><dd>
  <table class="exception">
    <tr><td class="paramname"><a class="el" href="classting_1_1fs_1_1File_1_1IllegalStateExc.htm">IllegalStateExc</a></td><td>- if file is already opened. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a9a1f8b4f370b87030239453cfdcb21d8"></a><!-- doxytag: member="ting::fs::File::MakeDir" ref="a9a1f8b4f370b87030239453cfdcb21d8" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual void <a class="el" href="classting_1_1fs_1_1File.htm#a9a1f8b4f370b87030239453cfdcb21d8">ting::fs::File::MakeDir</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Create directory. </p>
<p>If this <a class="el" href="classting_1_1fs_1_1File.htm" title="Abstract interface to a file system.">File</a> instance is a directory then try to create that directory on file system. Not all file systems are writable, so not all of them support directory creation. </p>
<dl class="exception"><dt><b>Exceptions:</b></dt><dd>
  <table class="exception">
    <tr><td class="paramname"><a class="el" href="classting_1_1fs_1_1File_1_1IllegalStateExc.htm">IllegalStateExc</a></td><td>- if file is opened. </td></tr>
  </table>
  </dd>
</dl>

<p>Reimplemented in <a class="el" href="classting_1_1fs_1_1FSFile.htm#aebd0668a03646facdcd9bca41d60e507">ting::fs::FSFile</a>.</p>

</div>
</div>
<a class="anchor" id="a75a04abf7392b39e64284439efd1f835"></a><!-- doxytag: member="ting::fs::File::Open" ref="a75a04abf7392b39e64284439efd1f835" args="(E_Mode mode)=0" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual void <a class="el" href="classting_1_1fs_1_1File.htm#a75a04abf7392b39e64284439efd1f835">ting::fs::File::Open</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classting_1_1fs_1_1File.htm#a00e1ee34be46110fb687ca6215f6c3b4">E_Mode</a>&#160;</td>
          <td class="paramname"><em>mode</em></td><td>)</td>
          <td><code> [pure virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Open file. </p>
<p>Opens file for reading/writing or creates the file. </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">mode</td><td>- file opening mode (reading/writing/create). </td></tr>
  </table>
  </dd>
</dl>
<dl class="exception"><dt><b>Exceptions:</b></dt><dd>
  <table class="exception">
    <tr><td class="paramname"><a class="el" href="classting_1_1fs_1_1File_1_1IllegalStateExc.htm">IllegalStateExc</a></td><td>- if file already opened. </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="classting_1_1fs_1_1FSFile.htm#ab299340d05bc84adfca116480c9b8c21">ting::fs::FSFile</a>.</p>

</div>
</div>
<a class="anchor" id="a2d02c33cbeced7cf6d1552852257f8af"></a><!-- doxytag: member="ting::fs::File::Path" ref="a2d02c33cbeced7cf6d1552852257f8af" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const std::string&amp; <a class="el" href="classting_1_1fs_1_1File.htm#a2d02c33cbeced7cf6d1552852257f8af">ting::fs::File::Path</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const  throw ()<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get the current path being held by this <a class="el" href="classting_1_1fs_1_1File.htm" title="Abstract interface to a file system.">File</a> instance. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>The path this <a class="el" href="classting_1_1fs_1_1File.htm" title="Abstract interface to a file system.">File</a> instance holds. </dd></dl>

</div>
</div>
<a class="anchor" id="a03bad219d0852bdaf5b273acff7023ab"></a><!-- doxytag: member="ting::fs::File::Read" ref="a03bad219d0852bdaf5b273acff7023ab" args="(const ting::Buffer&lt; ting::u8 &gt; &amp;buf, size_t numBytesToRead=0, size_t offset=0)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">size_t <a class="el" href="classting_1_1fs_1_1File.htm#a03bad219d0852bdaf5b273acff7023ab">ting::fs::File::Read</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classting_1_1Buffer.htm">ting::Buffer</a>&lt; <a class="el" href="namespaceting.htm#a2debe052f64b3825ad3e8e3ee1861e66">ting::u8</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>buf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>numBytesToRead</em> = <code>0</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>offset</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Read data from file. </p>
<p>All sane file systems should support file reading. Returns number of bytes actually read. It always reads the requested number of bytes, unless end of file reached, in which case the return value will be less than number of bytes to read was requested by argument. </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">buf</td><td>- buffer where to store the read data. </td></tr>
    <tr><td class="paramname">numBytesToRead</td><td>- number of bytes to read. If this value is more than the buffer holds (minus the offset) then an exception will be thrown. Zero passed value means the whole buffer size. </td></tr>
    <tr><td class="paramname">offset</td><td>- offset into the buffer from where to start storing the read data. Offset should be less or equal to the size of the buffer, otherwise an exception is thrown. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Number of bytes actually read. Shall always be equal to number of bytes requested to read except the case when end of file reached. </dd></dl>
<dl class="exception"><dt><b>Exceptions:</b></dt><dd>
  <table class="exception">
    <tr><td class="paramname"><a class="el" href="classting_1_1fs_1_1File_1_1IllegalStateExc.htm">IllegalStateExc</a></td><td>- if file is not opened. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ade8112c05d7e7130e19eb4705d6f1862"></a><!-- doxytag: member="ting::fs::File::ReadInternal" ref="ade8112c05d7e7130e19eb4705d6f1862" args="(const ting::Buffer&lt; ting::u8 &gt; &amp;buf)=0" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual size_t <a class="el" href="classting_1_1fs_1_1File.htm#ade8112c05d7e7130e19eb4705d6f1862">ting::fs::File::ReadInternal</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classting_1_1Buffer.htm">ting::Buffer</a>&lt; <a class="el" href="namespaceting.htm#a2debe052f64b3825ad3e8e3ee1861e66">ting::u8</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>buf</em></td><td>)</td>
          <td><code> [protected, pure virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Read data from file. </p>
<p>Override this function to implement reading routine. This function is called by <a class="el" href="classting_1_1fs_1_1File.htm#a03bad219d0852bdaf5b273acff7023ab" title="Read data from file.">Read()</a> method after it has done some safety checks. It is assumed that the whole passed buffer needs to be filled with data. </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">buf</td><td>- buffer to fill with read data. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>number of bytes actually read. </dd></dl>

<p>Implemented in <a class="el" href="classting_1_1fs_1_1FSFile.htm#a803e07106f5270de2272eb5efcd6761f">ting::fs::FSFile</a>.</p>

</div>
</div>
<a class="anchor" id="a16f8ef0e4184234731dfefb3cc0149e3"></a><!-- doxytag: member="ting::fs::File::Rewind" ref="a16f8ef0e4184234731dfefb3cc0149e3" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual void <a class="el" href="classting_1_1fs_1_1File.htm#a16f8ef0e4184234731dfefb3cc0149e3">ting::fs::File::Rewind</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Seek to the beginning of the file. </p>
<p>Not all file systems support rewinding. </p>
<dl class="exception"><dt><b>Exceptions:</b></dt><dd>
  <table class="exception">
    <tr><td class="paramname"><a class="el" href="classting_1_1fs_1_1File_1_1IllegalStateExc.htm">IllegalStateExc</a></td><td>- if file is not opened. </td></tr>
  </table>
  </dd>
</dl>

<p>Reimplemented in <a class="el" href="classting_1_1fs_1_1FSFile.htm#a77778439062093090f358de90a779d20">ting::fs::FSFile</a>.</p>

</div>
</div>
<a class="anchor" id="a62ba851cc630b0ccda51d208c28eb309"></a><!-- doxytag: member="ting::fs::File::SeekBackward" ref="a62ba851cc630b0ccda51d208c28eb309" args="(size_t numBytesToSeek)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual void <a class="el" href="classting_1_1fs_1_1File.htm#a62ba851cc630b0ccda51d208c28eb309">ting::fs::File::SeekBackward</a> </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>numBytesToSeek</em></td><td>)</td>
          <td><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Seek backwards. </p>
<p>Seek file pointer backwards relatively to he current position. Not all file systems support seeking backwards. </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">numBytesToSeek</td><td>- number of bytes to skip. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>number of bytes actually skipped. </dd></dl>
<dl class="exception"><dt><b>Exceptions:</b></dt><dd>
  <table class="exception">
    <tr><td class="paramname"><a class="el" href="classting_1_1fs_1_1File_1_1IllegalStateExc.htm">IllegalStateExc</a></td><td>- if file is not opened. </td></tr>
  </table>
  </dd>
</dl>

<p>Reimplemented in <a class="el" href="classting_1_1fs_1_1FSFile.htm#ac36deb577ebde76a2c9e8e78d2746504">ting::fs::FSFile</a>.</p>

</div>
</div>
<a class="anchor" id="aff899e10d471c7101679d90986d0a0fe"></a><!-- doxytag: member="ting::fs::File::SeekForward" ref="aff899e10d471c7101679d90986d0a0fe" args="(size_t numBytesToSeek)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual void <a class="el" href="classting_1_1fs_1_1File.htm#aff899e10d471c7101679d90986d0a0fe">ting::fs::File::SeekForward</a> </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>numBytesToSeek</em></td><td>)</td>
          <td><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Seek forward. </p>
<p>Seek file pointer forward relatively to current position. There is a default implementation of this function which uses <a class="el" href="classting_1_1fs_1_1File.htm#a03bad219d0852bdaf5b273acff7023ab" title="Read data from file.">Read()</a> method to skip the specified number of bytes by reading the data and wasting it away. </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">numBytesToSeek</td><td>- number of bytes to skip. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>number of bytes actually skipped. </dd></dl>
<dl class="exception"><dt><b>Exceptions:</b></dt><dd>
  <table class="exception">
    <tr><td class="paramname"><a class="el" href="classting_1_1fs_1_1File_1_1IllegalStateExc.htm">IllegalStateExc</a></td><td>- if file is not opened. </td></tr>
  </table>
  </dd>
</dl>

<p>Reimplemented in <a class="el" href="classting_1_1fs_1_1FSFile.htm#adbdf4fc043af1377b66ac5d3466896ae">ting::fs::FSFile</a>.</p>

</div>
</div>
<a class="anchor" id="a2160184aa59678bc016113432fd8dc50"></a><!-- doxytag: member="ting::fs::File::SetPath" ref="a2160184aa59678bc016113432fd8dc50" args="(const std::string &amp;pathName)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classting_1_1fs_1_1File.htm#a2160184aa59678bc016113432fd8dc50">ting::fs::File::SetPath</a> </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>pathName</em></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set the path for this <a class="el" href="classting_1_1fs_1_1File.htm" title="Abstract interface to a file system.">File</a> instance. </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">pathName</td><td>- the path to a file or directory. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a556ca6d886aab4617188234409f640ee"></a><!-- doxytag: member="ting::fs::File::Write" ref="a556ca6d886aab4617188234409f640ee" args="(const ting::Buffer&lt; const ting::u8 &gt; &amp;buf, size_t numBytesToWrite=0, size_t offset=0)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">size_t <a class="el" href="classting_1_1fs_1_1File.htm#a556ca6d886aab4617188234409f640ee">ting::fs::File::Write</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classting_1_1Buffer.htm">ting::Buffer</a>&lt; const <a class="el" href="namespaceting.htm#a2debe052f64b3825ad3e8e3ee1861e66">ting::u8</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>buf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>numBytesToWrite</em> = <code>0</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>offset</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Write data to file. </p>
<p>Not all file systems support writing to a file, some file systems are read-only. </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">buf</td><td>- buffer holding the data to write. </td></tr>
    <tr><td class="paramname">numBytesToWrite</td><td>- number of bytes to write. If this value is more than the buffer holds (minus the offset) then an exception will be thrown. Zero passed value means the whole buffer size. </td></tr>
    <tr><td class="paramname">offset</td><td>- offset into the buffer from where to start taking the data for writing. Offset should be less or equal to the size of the buffer, otherwise an exception is thrown. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Number of bytes actually written. Normally, should always write all the passed data, the only reasonable case when less data is written is when there is no more free space in the file system. </dd></dl>
<dl class="exception"><dt><b>Exceptions:</b></dt><dd>
  <table class="exception">
    <tr><td class="paramname"><a class="el" href="classting_1_1fs_1_1File_1_1IllegalStateExc.htm">IllegalStateExc</a></td><td>- if file is not opened. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a1a1d177ebb1d2553afe2ad0cce552a16"></a><!-- doxytag: member="ting::fs::File::WriteInternal" ref="a1a1d177ebb1d2553afe2ad0cce552a16" args="(const ting::Buffer&lt; const ting::u8 &gt; &amp;buf)=0" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual size_t <a class="el" href="classting_1_1fs_1_1File.htm#a1a1d177ebb1d2553afe2ad0cce552a16">ting::fs::File::WriteInternal</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classting_1_1Buffer.htm">ting::Buffer</a>&lt; const <a class="el" href="namespaceting.htm#a2debe052f64b3825ad3e8e3ee1861e66">ting::u8</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>buf</em></td><td>)</td>
          <td><code> [protected, pure virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Write data to file. </p>
<p>Override this function to implement writing routine. This function is called by <a class="el" href="classting_1_1fs_1_1File.htm#a556ca6d886aab4617188234409f640ee" title="Write data to file.">Write()</a> method after it has done some safety checks. It is assumed that the whole passed buffer needs to be written to the file. </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">buf</td><td>- buffer containing the data to write. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>number of bytes actually written. </dd></dl>

<p>Implemented in <a class="el" href="classting_1_1fs_1_1FSFile.htm#ab664c71a5f3cfdf0fdeac260cea55d2c">ting::fs::FSFile</a>.</p>

</div>
</div>
<hr/><h2>Member Data Documentation</h2>
<a class="anchor" id="a5382c3a6e37a85e0a1c240ff69075715"></a><!-- doxytag: member="ting::fs::File::ioMode" ref="a5382c3a6e37a85e0a1c240ff69075715" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classting_1_1fs_1_1File.htm#a00e1ee34be46110fb687ca6215f6c3b4">E_Mode</a> <a class="el" href="classting_1_1fs_1_1File.htm#a5382c3a6e37a85e0a1c240ff69075715">ting::fs::File::ioMode</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a5e166cfb170766fe6002e3eecd28ea1f"></a><!-- doxytag: member="ting::fs::File::isOpened" ref="a5e166cfb170766fe6002e3eecd28ea1f" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classting_1_1Inited.htm">ting::Inited</a>&lt;bool, false&gt; <a class="el" href="classting_1_1fs_1_1File.htm#a5e166cfb170766fe6002e3eecd28ea1f">ting::fs::File::isOpened</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="File_8hpp_source.htm">File.hpp</a></li>
</ul>
</div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="namespaceting.htm">ting</a>      </li>
      <li class="navelem"><a class="el" href="namespaceting_1_1fs.htm">fs</a>      </li>
      <li class="navelem"><a class="el" href="classting_1_1fs_1_1File.htm">File</a>      </li>

    <li class="footer">Generated on Thu Feb 21 2013 20:36:37 for libting by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
