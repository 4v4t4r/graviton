<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>libting: Singleton.hpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">libting
   &#160;<span id="projectnumber">2.0.0</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.htm"><span>File&#160;List</span></a></li>
      <li><a href="globals.htm"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('Singleton_8hpp.htm','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">Singleton.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="Singleton_8hpp.htm">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* The MIT License:</span>
<a name="l00002"></a>00002 <span class="comment"></span>
<a name="l00003"></a>00003 <span class="comment">Copyright (c) 2009-2012 Ivan Gagis &lt;igagis@gmail.com&gt;</span>
<a name="l00004"></a>00004 <span class="comment"></span>
<a name="l00005"></a>00005 <span class="comment">Permission is hereby granted, free of charge, to any person obtaining a copy</span>
<a name="l00006"></a>00006 <span class="comment">of this software and associated documentation files (the &quot;Software&quot;), to deal</span>
<a name="l00007"></a>00007 <span class="comment">in the Software without restriction, including without limitation the rights</span>
<a name="l00008"></a>00008 <span class="comment">to use, copy, modify, merge, publish, distribute, sublicense, and/or sell</span>
<a name="l00009"></a>00009 <span class="comment">copies of the Software, and to permit persons to whom the Software is</span>
<a name="l00010"></a>00010 <span class="comment">furnished to do so, subject to the following conditions:</span>
<a name="l00011"></a>00011 <span class="comment"></span>
<a name="l00012"></a>00012 <span class="comment">The above copyright notice and this permission notice shall be included in</span>
<a name="l00013"></a>00013 <span class="comment">all copies or substantial portions of the Software.</span>
<a name="l00014"></a>00014 <span class="comment"></span>
<a name="l00015"></a>00015 <span class="comment">THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span>
<a name="l00016"></a>00016 <span class="comment">IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span>
<a name="l00017"></a>00017 <span class="comment">FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span>
<a name="l00018"></a>00018 <span class="comment">AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span>
<a name="l00019"></a>00019 <span class="comment">LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span>
<a name="l00020"></a>00020 <span class="comment">OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN</span>
<a name="l00021"></a>00021 <span class="comment">THE SOFTWARE. */</span>
<a name="l00022"></a>00022 
<a name="l00023"></a>00023 <span class="comment">// Home page: http://ting.googlecode.com</span>
<a name="l00024"></a>00024 
<a name="l00025"></a>00025 
<a name="l00026"></a>00026 
<a name="l00033"></a>00033 <span class="preprocessor">#pragma once</span>
<a name="l00034"></a>00034 <span class="preprocessor"></span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &quot;<a class="code" href="Exc_8hpp.htm">Exc.hpp</a>&quot;</span>
<a name="l00036"></a>00036 <span class="preprocessor">#include &quot;<a class="code" href="debug_8hpp.htm">debug.hpp</a>&quot;</span>
<a name="l00037"></a>00037 <span class="preprocessor">#include &quot;<a class="code" href="types_8hpp.htm" title="General types definitions.">types.hpp</a>&quot;</span>
<a name="l00038"></a>00038 
<a name="l00039"></a>00039 
<a name="l00040"></a>00040 
<a name="l00041"></a>00041 <span class="keyword">namespace </span>ting{
<a name="l00042"></a>00042 
<a name="l00043"></a>00043 
<a name="l00044"></a>00044 
<a name="l00072"></a><a class="code" href="classting_1_1IntrusiveSingleton.htm">00072</a> <span class="keyword">template</span> &lt;<span class="keyword">class</span> T, <span class="keyword">class</span> T_InstanceOwner = T&gt; <span class="keyword">class </span><a class="code" href="classting_1_1IntrusiveSingleton.htm" title="Intrusive singleton base class.">IntrusiveSingleton</a>{
<a name="l00073"></a>00073 
<a name="l00074"></a>00074 <span class="keyword">protected</span>:<span class="comment">//use only as a base class</span>
<a name="l00075"></a><a class="code" href="classting_1_1IntrusiveSingleton.htm#acda85027995a790fecd706fa1f2f71cc">00075</a>         <a class="code" href="classting_1_1IntrusiveSingleton.htm#acda85027995a790fecd706fa1f2f71cc">IntrusiveSingleton</a>(){
<a name="l00076"></a>00076                 <span class="keywordflow">if</span>(T_InstanceOwner::instance != 0){
<a name="l00077"></a>00077                         <span class="keywordflow">throw</span> <a class="code" href="classting_1_1Exc.htm" title="Basic exception class.">ting::Exc</a>(<span class="stringliteral">&quot;Singleton::Singleton(): instance is already created&quot;</span>);
<a name="l00078"></a>00078                 }
<a name="l00079"></a>00079 
<a name="l00080"></a>00080                 T_InstanceOwner::instance = <span class="keyword">static_cast&lt;</span>T*<span class="keyword">&gt;</span>(<span class="keyword">this</span>);
<a name="l00081"></a>00081         }
<a name="l00082"></a>00082 
<a name="l00083"></a><a class="code" href="classting_1_1IntrusiveSingleton.htm#adeeff7d34c0b5910d50e810adcc70121">00083</a>         <span class="keyword">typedef</span> <a class="code" href="classting_1_1Inited.htm" title="Thin wrapper above any C++ built-in type allowing initialization from int.">ting::Inited&lt;T*, 0&gt;</a> <a class="code" href="classting_1_1IntrusiveSingleton.htm#adeeff7d34c0b5910d50e810adcc70121">T_Instance</a>;
<a name="l00084"></a>00084         
<a name="l00085"></a>00085 <span class="keyword">private</span>:
<a name="l00086"></a>00086 
<a name="l00087"></a>00087         <span class="comment">//copying is not allowed</span>
<a name="l00088"></a>00088         <a class="code" href="classting_1_1IntrusiveSingleton.htm#acda85027995a790fecd706fa1f2f71cc">IntrusiveSingleton</a>(<span class="keyword">const</span> <a class="code" href="classting_1_1IntrusiveSingleton.htm" title="Intrusive singleton base class.">IntrusiveSingleton</a>&amp;);
<a name="l00089"></a>00089         <a class="code" href="classting_1_1IntrusiveSingleton.htm" title="Intrusive singleton base class.">IntrusiveSingleton</a>&amp; operator=(<span class="keyword">const</span> <a class="code" href="classting_1_1IntrusiveSingleton.htm" title="Intrusive singleton base class.">IntrusiveSingleton</a>&amp;);
<a name="l00090"></a>00090         
<a name="l00091"></a>00091 <span class="keyword">public</span>:
<a name="l00092"></a>00092         
<a name="l00099"></a><a class="code" href="classting_1_1IntrusiveSingleton.htm#a0a9252ea1d59b7dcfe01853655c9d084">00099</a>         <span class="keyword">inline</span> <span class="keyword">static</span> <span class="keywordtype">bool</span> <a class="code" href="classting_1_1IntrusiveSingleton.htm#a0a9252ea1d59b7dcfe01853655c9d084" title="tells if singleton object is created or not.">IsCreated</a>(){
<a name="l00100"></a>00100                 <span class="keywordflow">return</span> T_InstanceOwner::instance != 0;
<a name="l00101"></a>00101         }
<a name="l00102"></a>00102 
<a name="l00107"></a><a class="code" href="classting_1_1IntrusiveSingleton.htm#a7a29320c2ac5be560f5609a03705365a">00107</a>         <span class="keyword">inline</span> <span class="keyword">static</span> T&amp; <a class="code" href="classting_1_1IntrusiveSingleton.htm#a7a29320c2ac5be560f5609a03705365a" title="get singleton instance.">Inst</a>(){
<a name="l00108"></a>00108                 <a class="code" href="debug_8hpp.htm#aaf04cfaa53d7b0bfcdeec60eaf7eed3a">ASSERT_INFO</a>(<a class="code" href="classting_1_1IntrusiveSingleton.htm#a0a9252ea1d59b7dcfe01853655c9d084" title="tells if singleton object is created or not.">IsCreated</a>(), <span class="stringliteral">&quot;IntrusiveSingleton::Inst(): Singleton object is not created&quot;</span>)
<a name="l00109"></a>00109                 <span class="keywordflow">return</span> *T_InstanceOwner::instance;
<a name="l00110"></a>00110         }
<a name="l00111"></a>00111 
<a name="l00112"></a><a class="code" href="classting_1_1IntrusiveSingleton.htm#ac6199123a09646e46a5b6436df1c08be">00112</a>         <a class="code" href="classting_1_1IntrusiveSingleton.htm#ac6199123a09646e46a5b6436df1c08be">~IntrusiveSingleton</a>(){
<a name="l00113"></a>00113                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(T_InstanceOwner::instance == static_cast&lt;T*&gt;(<span class="keyword">this</span>))
<a name="l00114"></a>00114                 T_InstanceOwner::instance = 0;
<a name="l00115"></a>00115         }
<a name="l00116"></a>00116 };
<a name="l00117"></a>00117 
<a name="l00118"></a>00118 
<a name="l00119"></a>00119 
<a name="l00141"></a><a class="code" href="classting_1_1Singleton.htm">00141</a> <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt; <span class="keyword">class </span><a class="code" href="classting_1_1Singleton.htm" title="Singleton base class.">Singleton</a> : <span class="keyword">public</span> <a class="code" href="classting_1_1IntrusiveSingleton.htm" title="Intrusive singleton base class.">IntrusiveSingleton</a>&lt;T, Singleton&lt;T&gt; &gt;{
<a name="l00142"></a><a class="code" href="classting_1_1Singleton.htm#a85b4d8f55682a30457b0c11652c7f1f3">00142</a>         <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classting_1_1IntrusiveSingleton.htm" title="Intrusive singleton base class.">IntrusiveSingleton</a>&lt;T, <a class="code" href="classting_1_1Singleton.htm" title="Singleton base class.">Singleton</a>&lt;T&gt; &gt;;
<a name="l00143"></a>00143 <span class="keyword">public</span>:
<a name="l00144"></a><a class="code" href="classting_1_1Singleton.htm#adf0a0e3ed67d7b0910e0da689f9537e5">00144</a>         <span class="keyword">inline</span> <a class="code" href="classting_1_1Singleton.htm#adf0a0e3ed67d7b0910e0da689f9537e5">Singleton</a>(){}
<a name="l00145"></a>00145         
<a name="l00146"></a>00146 <span class="keyword">private</span>:
<a name="l00147"></a>00147 
<a name="l00148"></a>00148         <span class="comment">//copying is not allowed</span>
<a name="l00149"></a>00149         <a class="code" href="classting_1_1Singleton.htm#adf0a0e3ed67d7b0910e0da689f9537e5">Singleton</a>(<span class="keyword">const</span> <a class="code" href="classting_1_1Singleton.htm" title="Singleton base class.">Singleton</a>&amp;);
<a name="l00150"></a>00150         <a class="code" href="classting_1_1Singleton.htm" title="Singleton base class.">Singleton</a>&amp; operator=(<span class="keyword">const</span> <a class="code" href="classting_1_1Singleton.htm" title="Singleton base class.">Singleton</a>&amp;);
<a name="l00151"></a>00151 
<a name="l00152"></a>00152 <span class="keyword">private</span>:
<a name="l00153"></a>00153         
<a name="l00154"></a>00154         <span class="keyword">static</span> <span class="keyword">typename</span> <a class="code" href="classting_1_1IntrusiveSingleton.htm" title="Intrusive singleton base class.">IntrusiveSingleton&lt;T, Singleton&lt;T&gt;</a> &gt;<a class="code" href="classting_1_1IntrusiveSingleton.htm#adeeff7d34c0b5910d50e810adcc70121">::T_Instance</a> instance;
<a name="l00155"></a>00155 };
<a name="l00156"></a>00156 
<a name="l00157"></a>00157 <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt; <span class="keyword">typename</span> <a class="code" href="classting_1_1IntrusiveSingleton.htm" title="Intrusive singleton base class.">ting::IntrusiveSingleton&lt;T, Singleton&lt;T&gt;</a> &gt;::T_Instance <a class="code" href="classting_1_1Singleton.htm" title="Singleton base class.">ting::Singleton&lt;T&gt;::instance</a>;
<a name="l00158"></a>00158 
<a name="l00159"></a>00159 }<span class="comment">//~namespace ting</span>
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="Singleton_8hpp.htm">Singleton.hpp</a>      </li>

    <li class="footer">Generated on Thu Feb 21 2013 20:36:35 for libting by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
