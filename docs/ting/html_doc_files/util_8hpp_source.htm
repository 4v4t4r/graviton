<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>libting: util.hpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">libting
   &#160;<span id="projectnumber">2.0.0</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.htm"><span>File&#160;List</span></a></li>
      <li><a href="globals.htm"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('util_8hpp.htm','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">util.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="util_8hpp.htm">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* The MIT License:</span>
<a name="l00002"></a>00002 <span class="comment"></span>
<a name="l00003"></a>00003 <span class="comment">Copyright (c) 2009-2012 Ivan Gagis &lt;igagis@gmail.com&gt;</span>
<a name="l00004"></a>00004 <span class="comment"></span>
<a name="l00005"></a>00005 <span class="comment">Permission is hereby granted, free of charge, to any person obtaining a copy</span>
<a name="l00006"></a>00006 <span class="comment">of this software and associated documentation files (the &quot;Software&quot;), to deal</span>
<a name="l00007"></a>00007 <span class="comment">in the Software without restriction, including without limitation the rights</span>
<a name="l00008"></a>00008 <span class="comment">to use, copy, modify, merge, publish, distribute, sublicense, and/or sell</span>
<a name="l00009"></a>00009 <span class="comment">copies of the Software, and to permit persons to whom the Software is</span>
<a name="l00010"></a>00010 <span class="comment">furnished to do so, subject to the following conditions:</span>
<a name="l00011"></a>00011 <span class="comment"></span>
<a name="l00012"></a>00012 <span class="comment">The above copyright notice and this permission notice shall be included in</span>
<a name="l00013"></a>00013 <span class="comment">all copies or substantial portions of the Software.</span>
<a name="l00014"></a>00014 <span class="comment"></span>
<a name="l00015"></a>00015 <span class="comment">THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span>
<a name="l00016"></a>00016 <span class="comment">IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span>
<a name="l00017"></a>00017 <span class="comment">FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span>
<a name="l00018"></a>00018 <span class="comment">AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span>
<a name="l00019"></a>00019 <span class="comment">LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span>
<a name="l00020"></a>00020 <span class="comment">OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN</span>
<a name="l00021"></a>00021 <span class="comment">THE SOFTWARE. */</span>
<a name="l00022"></a>00022 
<a name="l00023"></a>00023 <span class="comment">// Home page: http://ting.googlecode.com</span>
<a name="l00024"></a>00024 
<a name="l00025"></a>00025 
<a name="l00026"></a>00026 
<a name="l00033"></a>00033 <span class="preprocessor">#pragma once</span>
<a name="l00034"></a>00034 <span class="preprocessor"></span>
<a name="l00035"></a>00035 <span class="comment">//#ifdef _MSC_VER //If Microsoft C++ compiler</span>
<a name="l00036"></a>00036 <span class="comment">//#pragma warning(disable:4290)</span>
<a name="l00037"></a>00037 <span class="comment">//#endif</span>
<a name="l00038"></a>00038 
<a name="l00039"></a>00039 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00040"></a>00040 
<a name="l00041"></a>00041 <span class="preprocessor">#include &quot;<a class="code" href="debug_8hpp.htm">debug.hpp</a>&quot;</span> <span class="comment">//debugging facilities</span>
<a name="l00042"></a>00042 <span class="preprocessor">#include &quot;<a class="code" href="types_8hpp.htm" title="General types definitions.">types.hpp</a>&quot;</span>
<a name="l00043"></a>00043 
<a name="l00044"></a>00044 <span class="comment">//define macro used to align structures in memory</span>
<a name="l00045"></a>00045 <span class="preprocessor">#ifdef _MSC_VER //If Microsoft C++ compiler</span>
<a name="l00046"></a>00046 <span class="preprocessor"></span><span class="preprocessor">#define M_DECLARE_ALIGNED(x)</span>
<a name="l00047"></a>00047 <span class="preprocessor"></span><span class="preprocessor">#define M_DECLARE_ALIGNED_MSVC(x) __declspec(align(x))</span>
<a name="l00048"></a>00048 <span class="preprocessor"></span>
<a name="l00049"></a>00049 <span class="preprocessor">#elif defined(__GNUG__)//GNU g++ compiler</span>
<a name="l00050"></a>00050 <span class="preprocessor"></span><span class="preprocessor">#define M_DECLARE_ALIGNED(x) __attribute__ ((aligned(x)))</span>
<a name="l00051"></a>00051 <span class="preprocessor"></span><span class="preprocessor">#define M_DECLARE_ALIGNED_MSVC(x)</span>
<a name="l00052"></a>00052 <span class="preprocessor"></span>
<a name="l00053"></a>00053 <span class="preprocessor">#else</span>
<a name="l00054"></a>00054 <span class="preprocessor"></span><span class="preprocessor">#error &quot;unknown compiler&quot;</span>
<a name="l00055"></a>00055 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00056"></a>00056 <span class="preprocessor"></span>
<a name="l00057"></a>00057 
<a name="l00058"></a>00058 <span class="keyword">namespace </span>ting{
<a name="l00059"></a><a class="code" href="namespaceting_1_1util.htm">00059</a> <span class="keyword">namespace </span>util{
<a name="l00060"></a>00060 
<a name="l00061"></a>00061 
<a name="l00062"></a>00062 
<a name="l00088"></a><a class="code" href="namespaceting_1_1util.htm#a92613f027958c700b84ed17ebe85bcea">00088</a> <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt; <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespaceting_1_1util.htm#a92613f027958c700b84ed17ebe85bcea" title="Clamp value top.">ClampTop</a>(T&amp; <a class="code" href="atomic_8hpp.htm#a06cc42a46c3f1cdf8c7f856fe28fc463">v</a>, <span class="keyword">const</span> T top)<span class="keywordflow">throw</span>(){
<a name="l00089"></a>00089         <span class="keywordflow">if</span>(<a class="code" href="atomic_8hpp.htm#a06cc42a46c3f1cdf8c7f856fe28fc463">v</a> &gt; top){
<a name="l00090"></a>00090                 <a class="code" href="atomic_8hpp.htm#a06cc42a46c3f1cdf8c7f856fe28fc463">v</a> = top;
<a name="l00091"></a>00091         }
<a name="l00092"></a>00092 }
<a name="l00093"></a>00093 
<a name="l00094"></a>00094 
<a name="l00101"></a><a class="code" href="namespaceting_1_1util.htm#aa2070ab534d7f6999345ecf4f099f2be">00101</a> <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt; <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespaceting_1_1util.htm#aa2070ab534d7f6999345ecf4f099f2be" title="Clamp value bottom.">ClampBottom</a>(T&amp; <a class="code" href="atomic_8hpp.htm#a06cc42a46c3f1cdf8c7f856fe28fc463">v</a>, <span class="keyword">const</span> T bottom)<span class="keywordflow">throw</span>(){
<a name="l00102"></a>00102         <span class="keywordflow">if</span>(<a class="code" href="atomic_8hpp.htm#a06cc42a46c3f1cdf8c7f856fe28fc463">v</a> &lt; bottom){
<a name="l00103"></a>00103                 <a class="code" href="atomic_8hpp.htm#a06cc42a46c3f1cdf8c7f856fe28fc463">v</a> = bottom;
<a name="l00104"></a>00104         }
<a name="l00105"></a>00105 }
<a name="l00106"></a>00106 
<a name="l00107"></a>00107 
<a name="l00108"></a>00108 
<a name="l00115"></a><a class="code" href="namespaceting_1_1util.htm#abee0309fe71090279ad4382a10b0e684">00115</a> <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespaceting_1_1util.htm#abee0309fe71090279ad4382a10b0e684" title="serialize 16 bit value, little-endian.">Serialize16LE</a>(<a class="code" href="namespaceting.htm#ab6db9a617ea99ab580a064cef5030906" title="Unsigned 16 bit type.">u16</a> value, <a class="code" href="namespaceting.htm#a2debe052f64b3825ad3e8e3ee1861e66" title="Unsigned 8 bit type.">u8</a>* out_buf)<span class="keywordflow">throw</span>(){
<a name="l00116"></a>00116         out_buf[0] = value &amp; 0xff;
<a name="l00117"></a>00117         out_buf[1] = value &gt;&gt; 8;
<a name="l00118"></a>00118 }
<a name="l00119"></a>00119 
<a name="l00120"></a>00120 
<a name="l00121"></a>00121 
<a name="l00128"></a><a class="code" href="namespaceting_1_1util.htm#a83ab06ea7b2f939050213915959ac43c">00128</a> <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespaceting_1_1util.htm#a83ab06ea7b2f939050213915959ac43c" title="serialize 32 bit value, little-endian.">Serialize32LE</a>(<a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">u32</a> value, <a class="code" href="namespaceting.htm#a2debe052f64b3825ad3e8e3ee1861e66" title="Unsigned 8 bit type.">u8</a>* out_buf)<span class="keywordflow">throw</span>(){
<a name="l00129"></a>00129         *out_buf = <a class="code" href="namespaceting.htm#a2debe052f64b3825ad3e8e3ee1861e66" title="Unsigned 8 bit type.">u8</a>(value &amp; 0xff);
<a name="l00130"></a>00130         ++out_buf;
<a name="l00131"></a>00131         *out_buf = <a class="code" href="namespaceting.htm#a2debe052f64b3825ad3e8e3ee1861e66" title="Unsigned 8 bit type.">u8</a>((value &gt;&gt; 8) &amp; 0xff);
<a name="l00132"></a>00132         ++out_buf;
<a name="l00133"></a>00133         *out_buf = <a class="code" href="namespaceting.htm#a2debe052f64b3825ad3e8e3ee1861e66" title="Unsigned 8 bit type.">u8</a>((value &gt;&gt; 16) &amp; 0xff);
<a name="l00134"></a>00134         ++out_buf;
<a name="l00135"></a>00135         *out_buf = <a class="code" href="namespaceting.htm#a2debe052f64b3825ad3e8e3ee1861e66" title="Unsigned 8 bit type.">u8</a>((value &gt;&gt; 24) &amp; 0xff);
<a name="l00136"></a>00136 }
<a name="l00137"></a>00137 
<a name="l00138"></a>00138 
<a name="l00139"></a>00139 
<a name="l00147"></a><a class="code" href="namespaceting_1_1util.htm#ab01ecd0dbbf73476df4a61e2e166b2df">00147</a> <span class="keyword">inline</span> <a class="code" href="namespaceting.htm#ab6db9a617ea99ab580a064cef5030906" title="Unsigned 16 bit type.">u16</a> <a class="code" href="namespaceting_1_1util.htm#ab01ecd0dbbf73476df4a61e2e166b2df" title="de-serialize 16 bit value, little-endian.">Deserialize16LE</a>(<span class="keyword">const</span> <a class="code" href="namespaceting.htm#a2debe052f64b3825ad3e8e3ee1861e66" title="Unsigned 8 bit type.">u8</a>* buf)<span class="keywordflow">throw</span>(){
<a name="l00148"></a>00148         <a class="code" href="namespaceting.htm#ab6db9a617ea99ab580a064cef5030906" title="Unsigned 16 bit type.">u16</a> ret;
<a name="l00149"></a>00149 
<a name="l00150"></a>00150         <span class="comment">//assume little-endian</span>
<a name="l00151"></a>00151         ret = <a class="code" href="namespaceting.htm#ab6db9a617ea99ab580a064cef5030906" title="Unsigned 16 bit type.">u16</a>(*buf);
<a name="l00152"></a>00152         ++buf;
<a name="l00153"></a>00153         ret |= ((<a class="code" href="namespaceting.htm#ab6db9a617ea99ab580a064cef5030906" title="Unsigned 16 bit type.">u16</a>(*buf)) &lt;&lt; 8);
<a name="l00154"></a>00154 
<a name="l00155"></a>00155         <span class="keywordflow">return</span> ret;
<a name="l00156"></a>00156 }
<a name="l00157"></a>00157 
<a name="l00158"></a>00158 
<a name="l00159"></a>00159 
<a name="l00167"></a><a class="code" href="namespaceting_1_1util.htm#a6ab2e22ee7e2027f584e38a064949028">00167</a> <span class="keyword">inline</span> <a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">u32</a> <a class="code" href="namespaceting_1_1util.htm#a6ab2e22ee7e2027f584e38a064949028" title="de-serialize 32 bit value, little-endian.">Deserialize32LE</a>(<span class="keyword">const</span> <a class="code" href="namespaceting.htm#a2debe052f64b3825ad3e8e3ee1861e66" title="Unsigned 8 bit type.">u8</a>* buf)<span class="keywordflow">throw</span>(){
<a name="l00168"></a>00168         <a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">u32</a> ret;
<a name="l00169"></a>00169 
<a name="l00170"></a>00170         <span class="comment">//assume little-endian</span>
<a name="l00171"></a>00171         ret = <a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">u32</a>(*buf);
<a name="l00172"></a>00172         ++buf;
<a name="l00173"></a>00173         ret |= ((<a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">u32</a>(*buf)) &lt;&lt; 8);
<a name="l00174"></a>00174         ++buf;
<a name="l00175"></a>00175         ret |= ((<a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">u32</a>(*buf)) &lt;&lt; 16);
<a name="l00176"></a>00176         ++buf;
<a name="l00177"></a>00177         ret |= ((<a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">u32</a>(*buf)) &lt;&lt; 24);
<a name="l00178"></a>00178 
<a name="l00179"></a>00179         <span class="keywordflow">return</span> ret;
<a name="l00180"></a>00180 }
<a name="l00181"></a>00181 
<a name="l00182"></a>00182 
<a name="l00183"></a>00183 
<a name="l00190"></a><a class="code" href="namespaceting_1_1util.htm#ac11d029718681c20d79a6cfc15104fd0">00190</a> <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespaceting_1_1util.htm#ac11d029718681c20d79a6cfc15104fd0" title="serialize 16 bit value, big-endian.">Serialize16BE</a>(<a class="code" href="namespaceting.htm#ab6db9a617ea99ab580a064cef5030906" title="Unsigned 16 bit type.">u16</a> value, <a class="code" href="namespaceting.htm#a2debe052f64b3825ad3e8e3ee1861e66" title="Unsigned 8 bit type.">u8</a>* out_buf)<span class="keywordflow">throw</span>(){
<a name="l00191"></a>00191         out_buf[0] = value &gt;&gt; 8;
<a name="l00192"></a>00192         out_buf[1] = value &amp; 0xff;
<a name="l00193"></a>00193 }
<a name="l00194"></a>00194 
<a name="l00195"></a>00195 
<a name="l00196"></a>00196 
<a name="l00203"></a><a class="code" href="namespaceting_1_1util.htm#aa5e04e47738f97764fb0483c2119aa4c">00203</a> <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespaceting_1_1util.htm#aa5e04e47738f97764fb0483c2119aa4c" title="serialize 32 bit value, big-endian.">Serialize32BE</a>(<a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">u32</a> value, <a class="code" href="namespaceting.htm#a2debe052f64b3825ad3e8e3ee1861e66" title="Unsigned 8 bit type.">u8</a>* out_buf)<span class="keywordflow">throw</span>(){
<a name="l00204"></a>00204         *out_buf = <a class="code" href="namespaceting.htm#a2debe052f64b3825ad3e8e3ee1861e66" title="Unsigned 8 bit type.">u8</a>((value &gt;&gt; 24) &amp; 0xff);
<a name="l00205"></a>00205         ++out_buf;
<a name="l00206"></a>00206         *out_buf = <a class="code" href="namespaceting.htm#a2debe052f64b3825ad3e8e3ee1861e66" title="Unsigned 8 bit type.">u8</a>((value &gt;&gt; 16) &amp; 0xff);
<a name="l00207"></a>00207         ++out_buf;
<a name="l00208"></a>00208         *out_buf = <a class="code" href="namespaceting.htm#a2debe052f64b3825ad3e8e3ee1861e66" title="Unsigned 8 bit type.">u8</a>((value &gt;&gt; 8) &amp; 0xff);
<a name="l00209"></a>00209         ++out_buf;
<a name="l00210"></a>00210         *out_buf = <a class="code" href="namespaceting.htm#a2debe052f64b3825ad3e8e3ee1861e66" title="Unsigned 8 bit type.">u8</a>(value &amp; 0xff);
<a name="l00211"></a>00211 }
<a name="l00212"></a>00212 
<a name="l00213"></a>00213 
<a name="l00214"></a>00214 
<a name="l00222"></a><a class="code" href="namespaceting_1_1util.htm#a287180a9cb89f5c8a6d060e27f281727">00222</a> <span class="keyword">inline</span> <a class="code" href="namespaceting.htm#ab6db9a617ea99ab580a064cef5030906" title="Unsigned 16 bit type.">u16</a> <a class="code" href="namespaceting_1_1util.htm#a287180a9cb89f5c8a6d060e27f281727" title="de-serialize 16 bit value, big-endian.">Deserialize16BE</a>(<span class="keyword">const</span> <a class="code" href="namespaceting.htm#a2debe052f64b3825ad3e8e3ee1861e66" title="Unsigned 8 bit type.">u8</a>* buf)<span class="keywordflow">throw</span>(){
<a name="l00223"></a>00223         <a class="code" href="namespaceting.htm#ab6db9a617ea99ab580a064cef5030906" title="Unsigned 16 bit type.">u16</a> ret;
<a name="l00224"></a>00224 
<a name="l00225"></a>00225         <span class="comment">//assume big-endian</span>
<a name="l00226"></a>00226         ret = ((<a class="code" href="namespaceting.htm#ab6db9a617ea99ab580a064cef5030906" title="Unsigned 16 bit type.">u16</a>(*buf)) &lt;&lt; 8);
<a name="l00227"></a>00227         ++buf;
<a name="l00228"></a>00228         ret |= <a class="code" href="namespaceting.htm#ab6db9a617ea99ab580a064cef5030906" title="Unsigned 16 bit type.">u16</a>(*buf);
<a name="l00229"></a>00229 
<a name="l00230"></a>00230         <span class="keywordflow">return</span> ret;
<a name="l00231"></a>00231 }
<a name="l00232"></a>00232 
<a name="l00233"></a>00233 
<a name="l00234"></a>00234 
<a name="l00242"></a><a class="code" href="namespaceting_1_1util.htm#adebbff7e07d2ecf54610eff898545394">00242</a> <span class="keyword">inline</span> <a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">u32</a> <a class="code" href="namespaceting_1_1util.htm#adebbff7e07d2ecf54610eff898545394" title="de-serialize 32 bit value, big-endian.">Deserialize32BE</a>(<span class="keyword">const</span> <a class="code" href="namespaceting.htm#a2debe052f64b3825ad3e8e3ee1861e66" title="Unsigned 8 bit type.">u8</a>* buf)<span class="keywordflow">throw</span>(){
<a name="l00243"></a>00243         <a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">u32</a> ret;
<a name="l00244"></a>00244 
<a name="l00245"></a>00245         <span class="comment">//assume big-endian</span>
<a name="l00246"></a>00246         ret = ((<a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">u32</a>(*buf)) &lt;&lt; 24);
<a name="l00247"></a>00247         ++buf;
<a name="l00248"></a>00248         ret |= ((<a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">u32</a>(*buf)) &lt;&lt; 16);
<a name="l00249"></a>00249         ++buf;
<a name="l00250"></a>00250         ret |= ((<a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">u32</a>(*buf)) &lt;&lt; 8);
<a name="l00251"></a>00251         ++buf;
<a name="l00252"></a>00252         ret |= <a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">u32</a>(*buf);
<a name="l00253"></a>00253 
<a name="l00254"></a>00254         <span class="keywordflow">return</span> ret;
<a name="l00255"></a>00255 }
<a name="l00256"></a>00256 
<a name="l00257"></a>00257 
<a name="l00258"></a>00258 
<a name="l00259"></a>00259 }<span class="comment">//~namespace</span>
<a name="l00260"></a>00260 }<span class="comment">//~namespace ting</span>
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="util_8hpp.htm">util.hpp</a>      </li>

    <li class="footer">Generated on Thu Feb 21 2013 20:36:35 for libting by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
