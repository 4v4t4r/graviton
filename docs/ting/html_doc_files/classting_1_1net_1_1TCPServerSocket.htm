<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>libting: ting::net::TCPServerSocket Class Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">libting
   &#160;<span id="projectnumber">2.0.0</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.htm"><span>Classes</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.htm"><span>Class&#160;List</span></a></li>
      <li><a href="classes.htm"><span>Class&#160;Index</span></a></li>
      <li><a href="hierarchy.htm"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.htm"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('classting_1_1net_1_1TCPServerSocket.htm','');
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">ting::net::TCPServerSocket Class Reference</div>  </div>
</div><!--header-->
<div class="contents">
<!-- doxytag: class="ting::net::TCPServerSocket" --><!-- doxytag: inherits="ting::net::Socket" -->
<p>a class which represents a TCP server socket.  
 <a href="classting_1_1net_1_1TCPServerSocket.htm#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="TCPServerSocket_8hpp_source.htm">TCPServerSocket.hpp</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for ting::net::TCPServerSocket:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classting_1_1net_1_1TCPServerSocket.png" usemap="#ting::net::TCPServerSocket_map" alt=""/>
  <map id="ting::net::TCPServerSocket_map" name="ting::net::TCPServerSocket_map">
<area href="classting_1_1net_1_1Socket.htm" title="Basic socket class." alt="ting::net::Socket" shape="rect" coords="0,56,162,80"/>
<area href="classting_1_1Waitable.htm" title="Base class for objects which can be waited for." alt="ting::Waitable" shape="rect" coords="0,0,162,24"/>
</map>
 </div></div>

<p><a href="classting_1_1net_1_1TCPServerSocket-members.htm">List of all members.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1net_1_1TCPServerSocket.htm#a318bab7fb5fd80e935cee67f9e91be69">TCPServerSocket</a> ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates an invalid (unopened) TCP server socket.  <a href="#a318bab7fb5fd80e935cee67f9e91be69"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1net_1_1TCPServerSocket.htm#afb3e6ff85a3891585f1d3084c16c8e90">TCPServerSocket</a> (const <a class="el" href="classting_1_1net_1_1TCPServerSocket.htm">TCPServerSocket</a> &amp;s)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">A copy constructor.  <a href="#afb3e6ff85a3891585f1d3084c16c8e90"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classting_1_1net_1_1TCPServerSocket.htm">TCPServerSocket</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1net_1_1TCPServerSocket.htm#a5c9f8a09333df1b40a6357caf72fd758">operator=</a> (const <a class="el" href="classting_1_1net_1_1TCPServerSocket.htm">TCPServerSocket</a> &amp;s)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Assignment operator, works similar to std::auto_ptr::operator=().  <a href="#a5c9f8a09333df1b40a6357caf72fd758"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1net_1_1TCPServerSocket.htm#a4f14369fcca692e6162105e5b1130aad">Open</a> (<a class="el" href="namespaceting.htm#ab6db9a617ea99ab580a064cef5030906">u16</a> port, bool disableNaggle=false, <a class="el" href="namespaceting.htm#ab6db9a617ea99ab580a064cef5030906">u16</a> queueLength=50)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Connects the socket or starts listening on it.  <a href="#a4f14369fcca692e6162105e5b1130aad"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classting_1_1net_1_1TCPSocket.htm">TCPSocket</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1net_1_1TCPServerSocket.htm#a1d96a9ab8a48aff99dd93ae6353637ee">Accept</a> ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Accepts one of the pending connections, non-blocking.  <a href="#a1d96a9ab8a48aff99dd93ae6353637ee"></a><br/></td></tr>
</table>
<hr/><a name="details" id="details"></a><h2>Detailed Description</h2>
<div class="textblock"><p>a class which represents a TCP server socket. </p>
<p>TCP server socket is the socket which can listen for new connections and accept them creating an ordinary TCP socket for it. </p>
</div><hr/><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="a318bab7fb5fd80e935cee67f9e91be69"></a><!-- doxytag: member="ting::net::TCPServerSocket::TCPServerSocket" ref="a318bab7fb5fd80e935cee67f9e91be69" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classting_1_1net_1_1TCPServerSocket.htm#a318bab7fb5fd80e935cee67f9e91be69">ting::net::TCPServerSocket::TCPServerSocket</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Creates an invalid (unopened) TCP server socket. </p>

</div>
</div>
<a class="anchor" id="afb3e6ff85a3891585f1d3084c16c8e90"></a><!-- doxytag: member="ting::net::TCPServerSocket::TCPServerSocket" ref="afb3e6ff85a3891585f1d3084c16c8e90" args="(const TCPServerSocket &amp;s)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classting_1_1net_1_1TCPServerSocket.htm#a318bab7fb5fd80e935cee67f9e91be69">ting::net::TCPServerSocket::TCPServerSocket</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classting_1_1net_1_1TCPServerSocket.htm">TCPServerSocket</a> &amp;&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>A copy constructor. </p>
<p>Copy constructor creates a new socket object which refers to the same socket as s. After constructor completes the s becomes invalid. In other words, the behavior of copy constructor is similar to one of std::auto_ptr class from standard C++ library. </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">s</td><td>- other TCP socket to make a copy from. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<hr/><h2>Member Function Documentation</h2>
<a class="anchor" id="a1d96a9ab8a48aff99dd93ae6353637ee"></a><!-- doxytag: member="ting::net::TCPServerSocket::Accept" ref="a1d96a9ab8a48aff99dd93ae6353637ee" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classting_1_1net_1_1TCPSocket.htm">TCPSocket</a> <a class="el" href="classting_1_1net_1_1TCPServerSocket.htm#a1d96a9ab8a48aff99dd93ae6353637ee">ting::net::TCPServerSocket::Accept</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Accepts one of the pending connections, non-blocking. </p>
<p>Accepts one of the pending connections and returns a TCP socket object which represents either a valid connected socket or an invalid socket object. This function does not block if there is no any pending connections, it just returns invalid socket object in this case. One can periodically check for incoming connections by calling this method. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd><a class="el" href="classting_1_1net_1_1TCPSocket.htm" title="a class which represents a TCP socket.">TCPSocket</a> object. One can later check if the returned socket object is valid or not by calling <a class="el" href="classting_1_1net_1_1Socket.htm#a9cc2d5ba8fda839c7339fef269f6ecfd" title="Tells whether the socket is opened or not.">Socket::IsValid()</a> method on that object.<ul>
<li>if the socket is valid then it is a newly connected socket, further it can be used to send or receive data.</li>
<li>if the socket is invalid then there was no any connections pending, so no connection was accepted. </li>
</ul>
</dd></dl>

</div>
</div>
<a class="anchor" id="a4f14369fcca692e6162105e5b1130aad"></a><!-- doxytag: member="ting::net::TCPServerSocket::Open" ref="a4f14369fcca692e6162105e5b1130aad" args="(u16 port, bool disableNaggle=false, u16 queueLength=50)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classting_1_1net_1_1TCPServerSocket.htm#a4f14369fcca692e6162105e5b1130aad">ting::net::TCPServerSocket::Open</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespaceting.htm#ab6db9a617ea99ab580a064cef5030906">u16</a>&#160;</td>
          <td class="paramname"><em>port</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>disableNaggle</em> = <code>false</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespaceting.htm#ab6db9a617ea99ab580a064cef5030906">u16</a>&#160;</td>
          <td class="paramname"><em>queueLength</em> = <code>50</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Connects the socket or starts listening on it. </p>
<p>This method starts listening on the socket for incoming connections. </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">port</td><td>- IP port number to listen on. </td></tr>
    <tr><td class="paramname">disableNaggle</td><td>- enable/disable Naggle algorithm for all accepted connections. </td></tr>
    <tr><td class="paramname">queueLength</td><td>- the maximum length of the queue of pending connections. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a5c9f8a09333df1b40a6357caf72fd758"></a><!-- doxytag: member="ting::net::TCPServerSocket::operator=" ref="a5c9f8a09333df1b40a6357caf72fd758" args="(const TCPServerSocket &amp;s)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classting_1_1net_1_1TCPServerSocket.htm">TCPServerSocket</a>&amp; ting::net::TCPServerSocket::operator= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classting_1_1net_1_1TCPServerSocket.htm">TCPServerSocket</a> &amp;&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Assignment operator, works similar to std::auto_ptr::operator=(). </p>
<p>After this assignment operator completes this socket object refers to the socket the s object referred, s become invalid. It works similar to std::auto_ptr::operator=() from standard C++ library. </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">s</td><td>- socket to assign from. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="TCPServerSocket_8hpp_source.htm">TCPServerSocket.hpp</a></li>
</ul>
</div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="namespaceting.htm">ting</a>      </li>
      <li class="navelem"><a class="el" href="namespaceting_1_1net.htm">net</a>      </li>
      <li class="navelem"><a class="el" href="classting_1_1net_1_1TCPServerSocket.htm">TCPServerSocket</a>      </li>

    <li class="footer">Generated on Thu Feb 21 2013 20:36:38 for libting by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
