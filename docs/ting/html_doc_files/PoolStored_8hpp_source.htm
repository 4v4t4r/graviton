<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>libting: PoolStored.hpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">libting
   &#160;<span id="projectnumber">2.0.0</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.htm"><span>File&#160;List</span></a></li>
      <li><a href="globals.htm"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('PoolStored_8hpp.htm','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">PoolStored.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="PoolStored_8hpp.htm">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* The MIT License:</span>
<a name="l00002"></a>00002 <span class="comment"></span>
<a name="l00003"></a>00003 <span class="comment">Copyright (c) 2009-2012 Ivan Gagis &lt;igagis@gmail.com&gt;</span>
<a name="l00004"></a>00004 <span class="comment"></span>
<a name="l00005"></a>00005 <span class="comment">Permission is hereby granted, free of charge, to any person obtaining a copy</span>
<a name="l00006"></a>00006 <span class="comment">of this software and associated documentation files (the &quot;Software&quot;), to deal</span>
<a name="l00007"></a>00007 <span class="comment">in the Software without restriction, including without limitation the rights</span>
<a name="l00008"></a>00008 <span class="comment">to use, copy, modify, merge, publish, distribute, sublicense, and/or sell</span>
<a name="l00009"></a>00009 <span class="comment">copies of the Software, and to permit persons to whom the Software is</span>
<a name="l00010"></a>00010 <span class="comment">furnished to do so, subject to the following conditions:</span>
<a name="l00011"></a>00011 <span class="comment"></span>
<a name="l00012"></a>00012 <span class="comment">The above copyright notice and this permission notice shall be included in</span>
<a name="l00013"></a>00013 <span class="comment">all copies or substantial portions of the Software.</span>
<a name="l00014"></a>00014 <span class="comment"></span>
<a name="l00015"></a>00015 <span class="comment">THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span>
<a name="l00016"></a>00016 <span class="comment">IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span>
<a name="l00017"></a>00017 <span class="comment">FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span>
<a name="l00018"></a>00018 <span class="comment">AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span>
<a name="l00019"></a>00019 <span class="comment">LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span>
<a name="l00020"></a>00020 <span class="comment">OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN</span>
<a name="l00021"></a>00021 <span class="comment">THE SOFTWARE. */</span>
<a name="l00022"></a>00022 
<a name="l00023"></a>00023 <span class="comment">// Home page: http://ting.googlecode.com</span>
<a name="l00024"></a>00024 
<a name="l00025"></a>00025 
<a name="l00026"></a>00026 
<a name="l00035"></a>00035 <span class="preprocessor">#pragma once</span>
<a name="l00036"></a>00036 <span class="preprocessor"></span>
<a name="l00037"></a>00037 <span class="preprocessor">#include &lt;new&gt;</span>
<a name="l00038"></a>00038 <span class="preprocessor">#include &lt;list&gt;</span>
<a name="l00039"></a>00039 
<a name="l00040"></a>00040 <span class="preprocessor">#include &quot;<a class="code" href="debug_8hpp.htm">debug.hpp</a>&quot;</span>
<a name="l00041"></a>00041 <span class="preprocessor">#include &quot;<a class="code" href="types_8hpp.htm" title="General types definitions.">types.hpp</a>&quot;</span>
<a name="l00042"></a>00042 <span class="preprocessor">#include &quot;<a class="code" href="Exc_8hpp.htm">Exc.hpp</a>&quot;</span>
<a name="l00043"></a>00043 <span class="preprocessor">#include &quot;<a class="code" href="Array_8hpp.htm" title="automatic array class. Array class. It is an auto pointer for new[] / delete[].">Array.hpp</a>&quot;</span>
<a name="l00044"></a>00044 <span class="preprocessor">#include &quot;<a class="code" href="atomic_8hpp.htm">atomic.hpp</a>&quot;</span>
<a name="l00045"></a>00045 
<a name="l00046"></a>00046 
<a name="l00047"></a>00047 <span class="comment">//#define M_ENABLE_POOL_TRACE</span>
<a name="l00048"></a>00048 <span class="preprocessor">#ifdef M_ENABLE_POOL_TRACE</span>
<a name="l00049"></a>00049 <span class="preprocessor"></span><span class="preprocessor">#       define M_POOL_TRACE(x) TRACE(&lt;&lt;&quot;[POOL] &quot;) TRACE(x)</span>
<a name="l00050"></a>00050 <span class="preprocessor"></span><span class="preprocessor">#else</span>
<a name="l00051"></a><a class="code" href="PoolStored_8hpp.htm#a3e978bbbf622c62c71b0f847b31a0dae">00051</a> <span class="preprocessor"></span><span class="preprocessor">#       define M_POOL_TRACE(x)</span>
<a name="l00052"></a>00052 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00053"></a>00053 <span class="preprocessor"></span>
<a name="l00054"></a>00054 <span class="keyword">namespace </span>ting{
<a name="l00055"></a>00055 
<a name="l00056"></a>00056 <span class="comment">//make sure theat we align PoolElem by int size when using MSVC compiler.</span>
<a name="l00057"></a>00057 <a class="code" href="debug_8hpp.htm#ac34bd49b9b8483a2b40c61e7607fd878">STATIC_ASSERT</a>(<span class="keyword">sizeof</span>(<span class="keywordtype">int</span>) == 4)
<a name="l00058"></a>00058 
<a name="l00059"></a>00059 
<a name="l00060"></a>00060 
<a name="l00061"></a><a class="code" href="classting_1_1MemoryPool.htm">00061</a> template &lt;<span class="keywordtype">size_t</span> element_size, <span class="keywordtype">size_t</span> num_elements_in_chunk = 32&gt; class <a class="code" href="classting_1_1MemoryPool.htm">MemoryPool</a>{             
<a name="l00062"></a>00062         <span class="keyword">struct </span>BufHolder{
<a name="l00063"></a>00063                 <a class="code" href="namespaceting.htm#a2debe052f64b3825ad3e8e3ee1861e66" title="Unsigned 8 bit type.">u8</a> buf[element_size];
<a name="l00064"></a>00064         };
<a name="l00065"></a>00065         
<a name="l00066"></a>00066         <span class="keyword">struct </span>Chunk;
<a name="l00067"></a>00067 
<a name="l00068"></a>00068         M_DECLARE_ALIGNED_MSVC(4) <span class="keyword">struct </span>PoolElem : <span class="keyword">public</span> BufHolder{
<a name="l00069"></a>00069                 PoolElem *next; <span class="comment">//initialized only when the PoolElem is freed for the first time.</span>
<a name="l00070"></a>00070                 Chunk* parent; <span class="comment">//initialized only upon PoolElem allocation</span>
<a name="l00071"></a>00071         }
<a name="l00072"></a>00072         <span class="comment">//Align by sizeof(int) boundary, just to be more safe.</span>
<a name="l00073"></a>00073         <span class="comment">//I once had a problem with pthread mutex when it was not aligned by 4 byte boundary,</span>
<a name="l00074"></a>00074         <span class="comment">//so I resolved this by declaring PoolElem structure as aligned by sizeof(int).</span>
<a name="l00075"></a>00075         <a class="code" href="namespaceting_1_1atomic.htm#aa513f535e5ad73140599e383eb04f7eb">M_DECLARE_ALIGNED</a>(<span class="keyword">sizeof</span>(<span class="keywordtype">int</span>));
<a name="l00076"></a>00076 
<a name="l00077"></a>00077         <span class="keyword">struct </span>Chunk : <span class="keyword">public</span> ting::<a class="code" href="classting_1_1StaticBuffer.htm" title="static buffer class template.">StaticBuffer</a>&lt;PoolElem, num_elements_in_chunk&gt;{
<a name="l00078"></a>00078                 Chunk *next, *prev; <span class="comment">//for linked list</span>
<a name="l00079"></a>00079                 
<a name="l00080"></a>00080                 <a class="code" href="classting_1_1Inited.htm">ting::Inited&lt;size_t, 0&gt;</a> numAllocated;
<a name="l00081"></a>00081                 
<a name="l00082"></a>00082                 <a class="code" href="classting_1_1Inited.htm">ting::Inited&lt;size_t, 0&gt;</a> freeIndex;<span class="comment">//Used for first pass of elements allocation.</span>
<a name="l00083"></a>00083                 
<a name="l00084"></a>00084                 <a class="code" href="classting_1_1Inited.htm">ting::Inited&lt;PoolElem*, 0&gt;</a> firstFree;<span class="comment">//After element is freed it is placed into the single-linked list of free elements.</span>
<a name="l00085"></a>00085                 
<a name="l00086"></a>00086                 <span class="keyword">inline</span> Chunk(){
<a name="l00087"></a>00087                         <span class="comment">//there is no reason in memory pool with only 1 element per chunk.</span>
<a name="l00088"></a>00088                         <span class="comment">//This assumption will also help later to  determine if chunk was</span>
<a name="l00089"></a>00089                         <span class="comment">//not full before it become empty, so it should reside in the free</span>
<a name="l00090"></a>00090                         <span class="comment">//chunks list upon turning empty.</span>
<a name="l00091"></a>00091                         <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(this-&gt;Size() &gt; 1)
<a name="l00092"></a>00092                 }
<a name="l00093"></a>00093 
<a name="l00094"></a>00094                 <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsFull()<span class="keyword">const</span> <span class="keywordflow">throw</span>(){
<a name="l00095"></a>00095                         <span class="keywordflow">return</span> this-&gt;numAllocated == this-&gt;Size();
<a name="l00096"></a>00096                 }
<a name="l00097"></a>00097                 
<a name="l00098"></a>00098                 <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsEmpty()<span class="keyword">const</span> <span class="keywordflow">throw</span>(){
<a name="l00099"></a>00099                         <span class="keywordflow">return</span> this-&gt;numAllocated == 0;
<a name="l00100"></a>00100                 }
<a name="l00101"></a>00101                 
<a name="l00102"></a>00102                 <span class="keyword">inline</span> PoolElem* Alloc(){
<a name="l00103"></a>00103                         <span class="keywordflow">if</span>(this-&gt;freeIndex != this-&gt;Size()){
<a name="l00104"></a>00104                                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(this-&gt;freeIndex &lt; this-&gt;Size())
<a name="l00105"></a>00105                                 PoolElem* ret = &amp;this-&gt;operator[](this-&gt;freeIndex);
<a name="l00106"></a>00106                                 ++this-&gt;numAllocated;
<a name="l00107"></a>00107                                 ++this-&gt;freeIndex;
<a name="l00108"></a>00108                                 ret-&gt;parent = <span class="keyword">this</span>;
<a name="l00109"></a>00109                                 <span class="keywordflow">return</span> ret;
<a name="l00110"></a>00110                         }
<a name="l00111"></a>00111                         
<a name="l00112"></a>00112                         <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(this-&gt;firstFree)
<a name="l00113"></a>00113                         
<a name="l00114"></a>00114                         PoolElem* ret = this-&gt;firstFree;
<a name="l00115"></a>00115                         <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(ret-&gt;parent == <span class="keyword">this</span>)
<a name="l00116"></a>00116                         this-&gt;firstFree = ret-&gt;next;
<a name="l00117"></a>00117                         ++this-&gt;numAllocated;
<a name="l00118"></a>00118                         <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(this-&gt;numAllocated &lt;= this-&gt;Size())
<a name="l00119"></a>00119                         <span class="keywordflow">return</span> ret;
<a name="l00120"></a>00120                 }
<a name="l00121"></a>00121 
<a name="l00122"></a>00122         <span class="keyword">private</span>:
<a name="l00123"></a>00123                 Chunk(<span class="keyword">const</span> Chunk&amp;);
<a name="l00124"></a>00124                 Chunk&amp; operator=(<span class="keyword">const</span> Chunk&amp;);<span class="comment">//assignment is not allowed (no operator=() implementation provided)</span>
<a name="l00125"></a>00125         };
<a name="l00126"></a>00126 
<a name="l00127"></a>00127         <a class="code" href="classting_1_1Inited.htm">ting::Inited&lt;unsigned, 0&gt;</a> numChunks; <span class="comment">//this is only used for making sure that there are no chunks upon memory pool destruction</span>
<a name="l00128"></a>00128         <a class="code" href="classting_1_1Inited.htm">ting::Inited&lt;Chunk*, 0&gt;</a> freeHead; <span class="comment">//head of the free chunks list (looped list)</span>
<a name="l00129"></a>00129         
<a name="l00130"></a>00130         <a class="code" href="classting_1_1atomic_1_1SpinLock.htm" title="Spinlock class.">ting::atomic::SpinLock</a> lock;
<a name="l00131"></a>00131         
<a name="l00132"></a>00132 <span class="keyword">public</span>:
<a name="l00133"></a><a class="code" href="classting_1_1MemoryPool.htm#a209089c2053f3add3f461a9e358a03e4">00133</a>         <a class="code" href="classting_1_1MemoryPool.htm#a209089c2053f3add3f461a9e358a03e4">~MemoryPool</a>()throw(){
<a name="l00134"></a>00134                 <a class="code" href="debug_8hpp.htm#aaf04cfaa53d7b0bfcdeec60eaf7eed3a">ASSERT_INFO</a>(this-&gt;numChunks == 0, <span class="stringliteral">&quot;MemoryPool: cannot destroy memory pool because it is not empty. Check for static PoolStored objects, they are not allowed, e.g. static Ref/WeakRef are not allowed!&quot;</span>)
<a name="l00135"></a>00135         }
<a name="l00136"></a>00136         
<a name="l00137"></a>00137 <span class="keyword">public</span>:
<a name="l00138"></a><a class="code" href="classting_1_1MemoryPool.htm#afa761def3d9bbb895ea812317c6ea594">00138</a>         <span class="keywordtype">void</span>* <a class="code" href="classting_1_1MemoryPool.htm#afa761def3d9bbb895ea812317c6ea594">Alloc_ts</a>(){
<a name="l00139"></a>00139                 <a class="code" href="classting_1_1atomic_1_1SpinLock_1_1GuardYield.htm" title="Helper class which automatically Locks the given spinlock.">atomic::SpinLock::GuardYield</a> guard(this-&gt;lock);
<a name="l00140"></a>00140                 
<a name="l00141"></a>00141                 <span class="keywordflow">if</span>(this-&gt;freeHead == 0){
<a name="l00142"></a>00142                         Chunk* c = <span class="keyword">new</span> Chunk();
<a name="l00143"></a>00143                         c-&gt;next = c;
<a name="l00144"></a>00144                         c-&gt;prev = c;
<a name="l00145"></a>00145                         this-&gt;freeHead = c;
<a name="l00146"></a>00146                         ++this-&gt;numChunks;
<a name="l00147"></a>00147                 }
<a name="l00148"></a>00148                 
<a name="l00149"></a>00149                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(this-&gt;freeHead)
<a name="l00150"></a>00150                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(!this-&gt;freeHead-&gt;IsFull())
<a name="l00151"></a>00151                 
<a name="l00152"></a>00152                 <span class="keywordtype">void</span>* ret = static_cast&lt;BufHolder*&gt;(this-&gt;freeHead-&gt;Alloc());
<a name="l00153"></a>00153                 
<a name="l00154"></a>00154                 <span class="keywordflow">if</span>(this-&gt;freeHead-&gt;IsFull()){
<a name="l00155"></a>00155                         <span class="comment">//remove chunk from free chunks list</span>
<a name="l00156"></a>00156                         <span class="keywordflow">if</span>(this-&gt;freeHead-&gt;next == this-&gt;freeHead){<span class="comment">//if it is the only one chunk in the list</span>
<a name="l00157"></a>00157                                 this-&gt;freeHead = 0;
<a name="l00158"></a>00158                         }<span class="keywordflow">else</span>{
<a name="l00159"></a>00159                                 this-&gt;freeHead-&gt;prev-&gt;next = this-&gt;freeHead-&gt;next;
<a name="l00160"></a>00160                                 this-&gt;freeHead-&gt;next-&gt;prev = this-&gt;freeHead-&gt;prev;
<a name="l00161"></a>00161                                 this-&gt;freeHead = this-&gt;freeHead-&gt;next;
<a name="l00162"></a>00162                         }
<a name="l00163"></a>00163                 }
<a name="l00164"></a>00164                 
<a name="l00165"></a>00165                 <span class="keywordflow">return</span> ret;
<a name="l00166"></a>00166         }
<a name="l00167"></a>00167 
<a name="l00168"></a><a class="code" href="classting_1_1MemoryPool.htm#ae83013d44c4f765430ee5c483035aad7">00168</a>         <span class="keywordtype">void</span> <a class="code" href="classting_1_1MemoryPool.htm#ae83013d44c4f765430ee5c483035aad7">Free_ts</a>(<span class="keywordtype">void</span>* p)<span class="keywordflow">throw</span>(){
<a name="l00169"></a>00169                 <span class="keywordflow">if</span>(p == 0){
<a name="l00170"></a>00170                         <span class="keywordflow">return</span>;
<a name="l00171"></a>00171                 }
<a name="l00172"></a>00172                 
<a name="l00173"></a>00173                 <a class="code" href="classting_1_1atomic_1_1SpinLock_1_1GuardYield.htm" title="Helper class which automatically Locks the given spinlock.">atomic::SpinLock::GuardYield</a> guard(this-&gt;lock);
<a name="l00174"></a>00174                 
<a name="l00175"></a>00175                 PoolElem* e = <span class="keyword">static_cast&lt;</span>PoolElem*<span class="keyword">&gt;</span>(<span class="keyword">static_cast&lt;</span>BufHolder*<span class="keyword">&gt;</span>(p));
<a name="l00176"></a>00176                 
<a name="l00177"></a>00177                 Chunk *c = e-&gt;parent;
<a name="l00178"></a>00178                 
<a name="l00179"></a>00179                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(c-&gt;numAllocated &gt; 0)
<a name="l00180"></a>00180                 
<a name="l00181"></a>00181                 <span class="keywordflow">if</span>(c-&gt;numAllocated == 1){<span class="comment">//freeing last element in the chunk</span>
<a name="l00182"></a>00182                         <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(c-&gt;Size() &gt;= 2)
<a name="l00183"></a>00183                         <span class="comment">//remove chunk, it should be in free chunks list</span>
<a name="l00184"></a>00184                         <span class="keywordflow">if</span>(this-&gt;freeHead-&gt;next == this-&gt;freeHead){<span class="comment">//if it is the only one chunk in the list</span>
<a name="l00185"></a>00185                                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(this-&gt;freeHead-&gt;prev == this-&gt;freeHead)
<a name="l00186"></a>00186                                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(this-&gt;freeHead == c)
<a name="l00187"></a>00187                                 this-&gt;freeHead = 0;
<a name="l00188"></a>00188                         }<span class="keywordflow">else</span>{
<a name="l00189"></a>00189                                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(this-&gt;freeHead-&gt;prev != this-&gt;freeHead)
<a name="l00190"></a>00190                                 this-&gt;freeHead-&gt;prev-&gt;next = this-&gt;freeHead-&gt;next;
<a name="l00191"></a>00191                                 this-&gt;freeHead-&gt;next-&gt;prev = this-&gt;freeHead-&gt;prev;
<a name="l00192"></a>00192                                 <span class="keywordflow">if</span>(this-&gt;freeHead == c){
<a name="l00193"></a>00193                                         this-&gt;freeHead = this-&gt;freeHead-&gt;next;
<a name="l00194"></a>00194                                 }
<a name="l00195"></a>00195                         }
<a name="l00196"></a>00196                         <span class="keyword">delete</span> c;
<a name="l00197"></a>00197                         --this-&gt;numChunks;
<a name="l00198"></a>00198                         <span class="keywordflow">return</span>;
<a name="l00199"></a>00199                 }
<a name="l00200"></a>00200                 
<a name="l00201"></a>00201                 <span class="keywordflow">if</span>(c-&gt;IsFull()){<span class="comment">//if chunk is full before freeing the element, need to add to the list of free chunks</span>
<a name="l00202"></a>00202                         <span class="comment">//move chunk to the beginning of the list</span>
<a name="l00203"></a>00203                         <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(c != this-&gt;freeHead)
<a name="l00204"></a>00204                         <span class="keywordflow">if</span>(this-&gt;freeHead == 0){
<a name="l00205"></a>00205                                 c-&gt;next = c;
<a name="l00206"></a>00206                                 c-&gt;prev = c;
<a name="l00207"></a>00207                                 this-&gt;freeHead = c;
<a name="l00208"></a>00208                         }<span class="keywordflow">else</span>{
<a name="l00209"></a>00209                                 c-&gt;prev = this-&gt;freeHead;
<a name="l00210"></a>00210                                 c-&gt;next = this-&gt;freeHead-&gt;next;
<a name="l00211"></a>00211                                 c-&gt;prev-&gt;next = c;
<a name="l00212"></a>00212                                 c-&gt;next-&gt;prev = c;
<a name="l00213"></a>00213                         }
<a name="l00214"></a>00214                 }
<a name="l00215"></a>00215                 
<a name="l00216"></a>00216                 e-&gt;next = c-&gt;firstFree;
<a name="l00217"></a>00217                 c-&gt;firstFree = e;
<a name="l00218"></a>00218                 --c-&gt;numAllocated;
<a name="l00219"></a>00219         }
<a name="l00220"></a>00220 };<span class="comment">//~template class MemoryPool</span>
<a name="l00221"></a>00221 
<a name="l00222"></a>00222 
<a name="l00223"></a>00223 
<a name="l00224"></a><a class="code" href="classting_1_1StaticMemoryPool.htm">00224</a> <span class="keyword">template</span> &lt;<span class="keywordtype">size_t</span> element_size, <span class="keywordtype">size_t</span> num_elements_in_chunk&gt; <span class="keyword">class </span><a class="code" href="classting_1_1StaticMemoryPool.htm">StaticMemoryPool</a>{
<a name="l00225"></a>00225         <span class="keyword">static</span> <a class="code" href="classting_1_1MemoryPool.htm">MemoryPool&lt;element_size, num_elements_in_chunk&gt;</a> instance;
<a name="l00226"></a>00226 <span class="keyword">public</span>:
<a name="l00227"></a>00227         
<a name="l00228"></a><a class="code" href="classting_1_1StaticMemoryPool.htm#a28c843ffc056c16b6a1809dccf58e4ee">00228</a>         <span class="keyword">static</span> <span class="keyword">inline</span> <span class="keywordtype">void</span>* <a class="code" href="classting_1_1StaticMemoryPool.htm#a28c843ffc056c16b6a1809dccf58e4ee">Alloc_ts</a>(){
<a name="l00229"></a>00229                 <span class="keywordflow">return</span> instance.Alloc_ts();
<a name="l00230"></a>00230         }
<a name="l00231"></a>00231         
<a name="l00232"></a><a class="code" href="classting_1_1StaticMemoryPool.htm#af2365ba5c3a44c45f6b4065294107a69">00232</a>         <span class="keyword">static</span> <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classting_1_1StaticMemoryPool.htm#af2365ba5c3a44c45f6b4065294107a69">Free_ts</a>(<span class="keywordtype">void</span>* p)<span class="keywordflow">throw</span>(){
<a name="l00233"></a>00233                 instance.Free_ts(p);
<a name="l00234"></a>00234         }
<a name="l00235"></a>00235 };
<a name="l00236"></a>00236 
<a name="l00237"></a>00237 
<a name="l00238"></a>00238 
<a name="l00239"></a>00239 <span class="keyword">template</span> &lt;<span class="keywordtype">size_t</span> element_size, <span class="keywordtype">size_t</span> num_elements_in_chunk&gt; <span class="keyword">typename</span> <a class="code" href="classting_1_1MemoryPool.htm">ting::MemoryPool&lt;element_size, num_elements_in_chunk&gt;</a> <a class="code" href="classting_1_1StaticMemoryPool.htm">ting::StaticMemoryPool&lt;element_size, num_elements_in_chunk&gt;::instance</a>;
<a name="l00240"></a>00240 
<a name="l00241"></a>00241 
<a name="l00242"></a>00242 
<a name="l00257"></a><a class="code" href="classting_1_1PoolStored.htm">00257</a> <span class="keyword">template</span> &lt;<span class="keyword">class</span> T, <span class="keywordtype">unsigned</span> num_elements_in_chunk&gt; <span class="keyword">class </span><a class="code" href="classting_1_1PoolStored.htm" title="Base class for pool-stored objects.">PoolStored</a>{
<a name="l00258"></a>00258 
<a name="l00259"></a>00259 <span class="keyword">protected</span>:
<a name="l00260"></a>00260         <span class="comment">//this should only be used as a base class</span>
<a name="l00261"></a><a class="code" href="classting_1_1PoolStored.htm#a18ea22f7fc51b5f73e57618ee89d1394">00261</a>         <a class="code" href="classting_1_1PoolStored.htm#a18ea22f7fc51b5f73e57618ee89d1394">PoolStored</a>(){}
<a name="l00262"></a>00262 
<a name="l00263"></a>00263 <span class="keyword">public</span>:
<a name="l00264"></a>00264 
<a name="l00265"></a><a class="code" href="classting_1_1PoolStored.htm#ab79ee5b75feace824faaddf118dc6e18">00265</a>         <span class="keyword">inline</span> <span class="keyword">static</span> <span class="keywordtype">void</span>* <a class="code" href="classting_1_1PoolStored.htm#ab79ee5b75feace824faaddf118dc6e18">operator new</a>(<span class="keywordtype">size_t</span> size){
<a name="l00266"></a>00266                 <a class="code" href="PoolStored_8hpp.htm#a3e978bbbf622c62c71b0f847b31a0dae">M_POOL_TRACE</a>(&lt;&lt; <span class="stringliteral">&quot;new(): size = &quot;</span> &lt;&lt; size &lt;&lt; std::endl)
<a name="l00267"></a>00267                 <span class="keywordflow">if</span>(size != <span class="keyword">sizeof</span>(T)){
<a name="l00268"></a>00268                         <span class="keywordflow">throw</span> <a class="code" href="classting_1_1Exc.htm" title="Basic exception class.">ting::Exc</a>(<span class="stringliteral">&quot;PoolStored::operator new(): attempt to allocate memory block of incorrect size&quot;</span>);
<a name="l00269"></a>00269                 }
<a name="l00270"></a>00270 
<a name="l00271"></a>00271                 <span class="keywordflow">return</span> <a class="code" href="classting_1_1StaticMemoryPool.htm">StaticMemoryPool&lt;sizeof(T), num_elements_in_chunk&gt;::Alloc_ts</a>();
<a name="l00272"></a>00272         }
<a name="l00273"></a>00273 
<a name="l00274"></a><a class="code" href="classting_1_1PoolStored.htm#a10e4322420e7ebd64bec65ba6e2f4d33">00274</a>         <span class="keyword">inline</span> <span class="keyword">static</span> <span class="keywordtype">void</span> <a class="code" href="classting_1_1PoolStored.htm#a10e4322420e7ebd64bec65ba6e2f4d33">operator delete</a>(<span class="keywordtype">void</span> *p)<span class="keywordflow">throw</span>(){
<a name="l00275"></a>00275                 <a class="code" href="classting_1_1StaticMemoryPool.htm">StaticMemoryPool&lt;sizeof(T), num_elements_in_chunk&gt;::Free_ts</a>(p);
<a name="l00276"></a>00276         }
<a name="l00277"></a>00277 
<a name="l00278"></a>00278 <span class="keyword">private</span>:
<a name="l00279"></a>00279 };
<a name="l00280"></a>00280 
<a name="l00281"></a>00281 
<a name="l00282"></a>00282 
<a name="l00283"></a>00283 }<span class="comment">//~namespace ting</span>
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="PoolStored_8hpp.htm">PoolStored.hpp</a>      </li>

    <li class="footer">Generated on Thu Feb 21 2013 20:36:35 for libting by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
