<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>libting: WaitSet.hpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">libting
   &#160;<span id="projectnumber">2.0.0</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.htm"><span>File&#160;List</span></a></li>
      <li><a href="globals.htm"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('WaitSet_8hpp.htm','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">WaitSet.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="WaitSet_8hpp.htm">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* The MIT License:</span>
<a name="l00002"></a>00002 <span class="comment"></span>
<a name="l00003"></a>00003 <span class="comment">Copyright (c) 2009-2012 Ivan Gagis &lt;igagis@gmail.com&gt;</span>
<a name="l00004"></a>00004 <span class="comment"></span>
<a name="l00005"></a>00005 <span class="comment">Permission is hereby granted, free of charge, to any person obtaining a copy</span>
<a name="l00006"></a>00006 <span class="comment">of this software and associated documentation files (the &quot;Software&quot;), to deal</span>
<a name="l00007"></a>00007 <span class="comment">in the Software without restriction, including without limitation the rights</span>
<a name="l00008"></a>00008 <span class="comment">to use, copy, modify, merge, publish, distribute, sublicense, and/or sell</span>
<a name="l00009"></a>00009 <span class="comment">copies of the Software, and to permit persons to whom the Software is</span>
<a name="l00010"></a>00010 <span class="comment">furnished to do so, subject to the following conditions:</span>
<a name="l00011"></a>00011 <span class="comment"></span>
<a name="l00012"></a>00012 <span class="comment">The above copyright notice and this permission notice shall be included in</span>
<a name="l00013"></a>00013 <span class="comment">all copies or substantial portions of the Software.</span>
<a name="l00014"></a>00014 <span class="comment"></span>
<a name="l00015"></a>00015 <span class="comment">THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span>
<a name="l00016"></a>00016 <span class="comment">IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span>
<a name="l00017"></a>00017 <span class="comment">FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span>
<a name="l00018"></a>00018 <span class="comment">AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span>
<a name="l00019"></a>00019 <span class="comment">LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span>
<a name="l00020"></a>00020 <span class="comment">OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN</span>
<a name="l00021"></a>00021 <span class="comment">THE SOFTWARE. */</span>
<a name="l00022"></a>00022 
<a name="l00023"></a>00023 <span class="comment">// Home page: http://ting.googlecode.com</span>
<a name="l00024"></a>00024 
<a name="l00025"></a>00025 
<a name="l00026"></a>00026 
<a name="l00034"></a>00034 <span class="preprocessor">#pragma once</span>
<a name="l00035"></a>00035 <span class="preprocessor"></span>
<a name="l00036"></a>00036 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00037"></a>00037 <span class="preprocessor">#include &lt;sstream&gt;</span>
<a name="l00038"></a>00038 <span class="preprocessor">#include &lt;cerrno&gt;</span>
<a name="l00039"></a>00039 
<a name="l00040"></a>00040 <span class="preprocessor">#include &quot;<a class="code" href="config_8hpp.htm">config.hpp</a>&quot;</span>
<a name="l00041"></a>00041 <span class="preprocessor">#include &quot;<a class="code" href="types_8hpp.htm" title="General types definitions.">types.hpp</a>&quot;</span>
<a name="l00042"></a>00042 <span class="preprocessor">#include &quot;<a class="code" href="debug_8hpp.htm">debug.hpp</a>&quot;</span>
<a name="l00043"></a>00043 <span class="preprocessor">#include &quot;<a class="code" href="Exc_8hpp.htm">Exc.hpp</a>&quot;</span>
<a name="l00044"></a>00044 <span class="preprocessor">#include &quot;<a class="code" href="Array_8hpp.htm" title="automatic array class. Array class. It is an auto pointer for new[] / delete[].">Array.hpp</a>&quot;</span>
<a name="l00045"></a>00045 
<a name="l00046"></a>00046 
<a name="l00047"></a>00047 <span class="preprocessor">#if M_OS == M_OS_WINDOWS</span>
<a name="l00048"></a>00048 <span class="preprocessor"></span>
<a name="l00049"></a>00049 <span class="comment">//if _WINSOCKAPI_ macro is not defined then it means that the winsock header file</span>
<a name="l00050"></a>00050 <span class="comment">//has not been included. Here we temporarily define the macro in order to prevent</span>
<a name="l00051"></a>00051 <span class="comment">//inclusion of winsock.h from within the windows.h. Because it may later conflict with</span>
<a name="l00052"></a>00052 <span class="comment">//winsock2.h if it is included later.</span>
<a name="l00053"></a>00053 <span class="preprocessor">#       ifndef _WINSOCKAPI_</span>
<a name="l00054"></a>00054 <span class="preprocessor"></span><span class="preprocessor">#               define _WINSOCKAPI_</span>
<a name="l00055"></a>00055 <span class="preprocessor"></span><span class="preprocessor">#               include &lt;windows.h&gt;</span>
<a name="l00056"></a>00056 <span class="preprocessor">#               undef _WINSOCKAPI_</span>
<a name="l00057"></a>00057 <span class="preprocessor"></span><span class="preprocessor">#       else</span>
<a name="l00058"></a>00058 <span class="preprocessor"></span><span class="preprocessor">#               include &lt;windows.h&gt;</span>
<a name="l00059"></a>00059 <span class="preprocessor">#       endif</span>
<a name="l00060"></a>00060 <span class="preprocessor"></span>
<a name="l00061"></a>00061 <span class="preprocessor">#elif M_OS == M_OS_LINUX</span>
<a name="l00062"></a>00062 <span class="preprocessor"></span><span class="preprocessor">#       include &lt;sys/epoll.h&gt;</span>
<a name="l00063"></a>00063 
<a name="l00064"></a>00064 <span class="preprocessor">#elif M_OS == M_OS_MACOSX</span>
<a name="l00065"></a>00065 <span class="preprocessor"></span><span class="preprocessor">#       include &lt;sys/types.h&gt;</span>
<a name="l00066"></a>00066 <span class="preprocessor">#       include &lt;sys/event.h&gt;</span>
<a name="l00067"></a>00067 <span class="preprocessor">#       include &lt;sys/time.h&gt;</span>
<a name="l00068"></a>00068 
<a name="l00069"></a>00069 <span class="preprocessor">#else</span>
<a name="l00070"></a>00070 <span class="preprocessor"></span><span class="preprocessor">#       error &quot;Unsupported OS&quot;</span>
<a name="l00071"></a>00071 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00072"></a>00072 <span class="preprocessor"></span>
<a name="l00073"></a>00073 
<a name="l00074"></a>00074 <span class="comment">//disable warning about throw specification is ignored.</span>
<a name="l00075"></a>00075 <span class="preprocessor">#if M_COMPILER == M_COMPILER_MSVC</span>
<a name="l00076"></a>00076 <span class="preprocessor"></span><span class="preprocessor">#       pragma warning(push) //push warnings state</span>
<a name="l00077"></a>00077 <span class="preprocessor"></span><span class="preprocessor">#       pragma warning( disable : 4290)</span>
<a name="l00078"></a>00078 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00079"></a>00079 <span class="preprocessor"></span>
<a name="l00080"></a>00080 
<a name="l00081"></a>00081 
<a name="l00082"></a>00082 <span class="keyword">namespace </span>ting{
<a name="l00083"></a>00083 
<a name="l00084"></a>00084 
<a name="l00085"></a>00085 
<a name="l00090"></a><a class="code" href="classting_1_1Waitable.htm">00090</a> <span class="keyword">class </span><a class="code" href="classting_1_1Waitable.htm" title="Base class for objects which can be waited for.">Waitable</a>{
<a name="l00091"></a><a class="code" href="classting_1_1Waitable.htm#afce7603b771a811ca6d9d25f27149773">00091</a>         <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classting_1_1WaitSet.htm" title="Set of Waitable objects to wait for.">WaitSet</a>;
<a name="l00092"></a>00092 
<a name="l00093"></a>00093         <a class="code" href="classting_1_1Inited.htm">ting::Inited&lt;bool, false&gt;</a> isAdded;
<a name="l00094"></a>00094 
<a name="l00095"></a>00095         <a class="code" href="classting_1_1Inited.htm">ting::Inited&lt;void*, 0&gt;</a> userData;
<a name="l00096"></a>00096 
<a name="l00097"></a>00097 <span class="keyword">public</span>:
<a name="l00098"></a><a class="code" href="classting_1_1Waitable.htm#ad06cce175fd90cd3bda3960ffc7d7abe">00098</a>         <span class="keyword">enum</span> <a class="code" href="classting_1_1Waitable.htm#ad06cce175fd90cd3bda3960ffc7d7abe">EReadinessFlags</a>{
<a name="l00099"></a><a class="code" href="classting_1_1Waitable.htm#ad06cce175fd90cd3bda3960ffc7d7abeaad54d466c6ce198aad8115773b3abf1b">00099</a>                 <a class="code" href="classting_1_1Waitable.htm#ad06cce175fd90cd3bda3960ffc7d7abeaad54d466c6ce198aad8115773b3abf1b">NOT_READY</a> = 0,      <span class="comment">// bin: 00000000</span>
<a name="l00100"></a><a class="code" href="classting_1_1Waitable.htm#ad06cce175fd90cd3bda3960ffc7d7abeab8c09c1a43e6f127ee2dbd6ceb1623e7">00100</a>                 <a class="code" href="classting_1_1Waitable.htm#ad06cce175fd90cd3bda3960ffc7d7abeab8c09c1a43e6f127ee2dbd6ceb1623e7">READ</a> = 1,           <span class="comment">// bin: 00000001</span>
<a name="l00101"></a><a class="code" href="classting_1_1Waitable.htm#ad06cce175fd90cd3bda3960ffc7d7abea9c9432c7952f916f1072696bbc35e2db">00101</a>                 <a class="code" href="classting_1_1Waitable.htm#ad06cce175fd90cd3bda3960ffc7d7abea9c9432c7952f916f1072696bbc35e2db">WRITE</a> = 2,          <span class="comment">// bin: 00000010</span>
<a name="l00102"></a><a class="code" href="classting_1_1Waitable.htm#ad06cce175fd90cd3bda3960ffc7d7abeaaceab4f998e5df47f9cf4f20dba89460">00102</a>                 <a class="code" href="classting_1_1Waitable.htm#ad06cce175fd90cd3bda3960ffc7d7abeaaceab4f998e5df47f9cf4f20dba89460">READ_AND_WRITE</a> = 3, <span class="comment">// bin: 00000011</span>
<a name="l00103"></a><a class="code" href="classting_1_1Waitable.htm#ad06cce175fd90cd3bda3960ffc7d7abeaf1d0dcf8356f54bcc50c956988250537">00103</a>                 <a class="code" href="classting_1_1Waitable.htm#ad06cce175fd90cd3bda3960ffc7d7abeaf1d0dcf8356f54bcc50c956988250537">ERROR_CONDITION</a> = 4 <span class="comment">// bin: 00000100</span>
<a name="l00104"></a>00104         };
<a name="l00105"></a>00105 
<a name="l00106"></a>00106 <span class="keyword">protected</span>:
<a name="l00107"></a><a class="code" href="classting_1_1Waitable.htm#a08d25d16b30597469216717faeacdba0">00107</a>         <a class="code" href="classting_1_1Inited.htm">ting::Inited&lt;u32, NOT_READY&gt;</a> <a class="code" href="classting_1_1Waitable.htm#a08d25d16b30597469216717faeacdba0">readinessFlags</a>;
<a name="l00108"></a>00108 
<a name="l00109"></a><a class="code" href="classting_1_1Waitable.htm#a9cb812eaea0bd35bce31c14b755940a6">00109</a>         <span class="keyword">inline</span> <a class="code" href="classting_1_1Waitable.htm#a9cb812eaea0bd35bce31c14b755940a6">Waitable</a>(){}
<a name="l00110"></a>00110 
<a name="l00111"></a>00111 
<a name="l00112"></a>00112 
<a name="l00113"></a><a class="code" href="classting_1_1Waitable.htm#ab9a6eba77ca2a8bdffe97683374ba6be">00113</a>         <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="classting_1_1Waitable.htm#ab9a6eba77ca2a8bdffe97683374ba6be">IsAdded</a>()<span class="keyword">const</span> throw(){
<a name="l00114"></a>00114                 <span class="keywordflow">return</span> this-&gt;isAdded;
<a name="l00115"></a>00115         }
<a name="l00116"></a>00116 
<a name="l00117"></a>00117 
<a name="l00118"></a>00118 
<a name="l00126"></a><a class="code" href="classting_1_1Waitable.htm#a24f9d8bba51de7b3ec7b447279361130">00126</a>         <span class="keyword">inline</span> <a class="code" href="classting_1_1Waitable.htm#a9cb812eaea0bd35bce31c14b755940a6">Waitable</a>(<span class="keyword">const</span> <a class="code" href="classting_1_1Waitable.htm" title="Base class for objects which can be waited for.">Waitable</a>&amp; w) :
<a name="l00127"></a>00127                         isAdded(false),
<a name="l00128"></a>00128                         userData(w.userData),
<a name="l00129"></a>00129                         <a class="code" href="classting_1_1Waitable.htm#a08d25d16b30597469216717faeacdba0">readinessFlags</a>(<a class="code" href="classting_1_1Waitable.htm#ad06cce175fd90cd3bda3960ffc7d7abeaad54d466c6ce198aad8115773b3abf1b">NOT_READY</a>)<span class="comment">//Treat copied Waitable as NOT_READY</span>
<a name="l00130"></a>00130         {
<a name="l00131"></a>00131                 <span class="comment">//cannot copy from waitable which is added to WaitSet</span>
<a name="l00132"></a>00132                 <span class="keywordflow">if</span>(w.isAdded){
<a name="l00133"></a>00133                         <span class="keywordflow">throw</span> <a class="code" href="classting_1_1Exc.htm" title="Basic exception class.">ting::Exc</a>(<span class="stringliteral">&quot;Waitable::Waitable(copy): cannot copy Waitable which is added to WaitSet&quot;</span>);
<a name="l00134"></a>00134                 }
<a name="l00135"></a>00135 
<a name="l00136"></a>00136                 <span class="keyword">const_cast&lt;</span><a class="code" href="classting_1_1Waitable.htm" title="Base class for objects which can be waited for.">Waitable</a>&amp;<span class="keyword">&gt;</span>(w).<a class="code" href="classting_1_1Waitable.htm#a0de89037f9e0c0e6ae399c5daab94a33">ClearAllReadinessFlags</a>();
<a name="l00137"></a>00137                 <span class="keyword">const_cast&lt;</span><a class="code" href="classting_1_1Waitable.htm" title="Base class for objects which can be waited for.">Waitable</a>&amp;<span class="keyword">&gt;</span>(w).userData = 0;
<a name="l00138"></a>00138         }
<a name="l00139"></a>00139 
<a name="l00140"></a>00140 
<a name="l00141"></a>00141 
<a name="l00149"></a><a class="code" href="classting_1_1Waitable.htm#a9a732341413d7ebd2b9a610adaeb3ea1">00149</a>         <span class="keyword">inline</span> <a class="code" href="classting_1_1Waitable.htm" title="Base class for objects which can be waited for.">Waitable</a>&amp; <a class="code" href="classting_1_1Waitable.htm#a9a732341413d7ebd2b9a610adaeb3ea1" title="Assignment operator.">operator=</a>(<span class="keyword">const</span> <a class="code" href="classting_1_1Waitable.htm" title="Base class for objects which can be waited for.">Waitable</a>&amp; w){
<a name="l00150"></a>00150                 <span class="comment">//cannot copy because this Waitable is added to WaitSet</span>
<a name="l00151"></a>00151                 <span class="keywordflow">if</span>(this-&gt;isAdded){
<a name="l00152"></a>00152                         <span class="keywordflow">throw</span> <a class="code" href="classting_1_1Exc.htm" title="Basic exception class.">ting::Exc</a>(<span class="stringliteral">&quot;Waitable::Waitable(copy): cannot copy while this Waitable is added to WaitSet&quot;</span>);
<a name="l00153"></a>00153                 }
<a name="l00154"></a>00154 
<a name="l00155"></a>00155                 <span class="comment">//cannot copy from waitable which is adde to WaitSet</span>
<a name="l00156"></a>00156                 <span class="keywordflow">if</span>(w.isAdded){
<a name="l00157"></a>00157                         <span class="keywordflow">throw</span> <a class="code" href="classting_1_1Exc.htm" title="Basic exception class.">ting::Exc</a>(<span class="stringliteral">&quot;Waitable::Waitable(copy): cannot copy Waitable which is added to WaitSet&quot;</span>);
<a name="l00158"></a>00158                 }
<a name="l00159"></a>00159 
<a name="l00160"></a>00160                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(!this-&gt;isAdded)
<a name="l00161"></a>00161 
<a name="l00162"></a>00162                 <span class="comment">//Clear readiness flags on copying.</span>
<a name="l00163"></a>00163                 <span class="comment">//Will need to wait for readiness again, using the WaitSet.</span>
<a name="l00164"></a>00164                 this-&gt;<a class="code" href="classting_1_1Waitable.htm#a0de89037f9e0c0e6ae399c5daab94a33">ClearAllReadinessFlags</a>();
<a name="l00165"></a>00165                 <span class="keyword">const_cast&lt;</span><a class="code" href="classting_1_1Waitable.htm" title="Base class for objects which can be waited for.">Waitable</a>&amp;<span class="keyword">&gt;</span>(w).<a class="code" href="classting_1_1Waitable.htm#a0de89037f9e0c0e6ae399c5daab94a33">ClearAllReadinessFlags</a>();
<a name="l00166"></a>00166 
<a name="l00167"></a>00167                 this-&gt;userData = w.userData;
<a name="l00168"></a>00168                 <span class="keyword">const_cast&lt;</span><a class="code" href="classting_1_1Waitable.htm" title="Base class for objects which can be waited for.">Waitable</a>&amp;<span class="keyword">&gt;</span>(w).userData = 0;
<a name="l00169"></a>00169                 <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00170"></a>00170         }
<a name="l00171"></a>00171 
<a name="l00172"></a>00172 
<a name="l00173"></a>00173 
<a name="l00174"></a><a class="code" href="classting_1_1Waitable.htm#a88ad92a99e4828aa5d5003dcabfb97b8">00174</a>         <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classting_1_1Waitable.htm#a88ad92a99e4828aa5d5003dcabfb97b8">SetCanReadFlag</a>()throw(){
<a name="l00175"></a>00175                 this-&gt;<a class="code" href="classting_1_1Waitable.htm#a08d25d16b30597469216717faeacdba0">readinessFlags</a> |= <a class="code" href="classting_1_1Waitable.htm#ad06cce175fd90cd3bda3960ffc7d7abeab8c09c1a43e6f127ee2dbd6ceb1623e7">READ</a>;
<a name="l00176"></a>00176         }
<a name="l00177"></a>00177 
<a name="l00178"></a><a class="code" href="classting_1_1Waitable.htm#ae7a518cea602c4d2c050d0f0faa4902d">00178</a>         <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classting_1_1Waitable.htm#ae7a518cea602c4d2c050d0f0faa4902d">ClearCanReadFlag</a>()throw(){
<a name="l00179"></a>00179                 this-&gt;<a class="code" href="classting_1_1Waitable.htm#a08d25d16b30597469216717faeacdba0">readinessFlags</a> &amp;= (~<a class="code" href="classting_1_1Waitable.htm#ad06cce175fd90cd3bda3960ffc7d7abeab8c09c1a43e6f127ee2dbd6ceb1623e7">READ</a>);
<a name="l00180"></a>00180         }
<a name="l00181"></a>00181 
<a name="l00182"></a><a class="code" href="classting_1_1Waitable.htm#aa65a87874bfe89d950901948176184d5">00182</a>         <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classting_1_1Waitable.htm#aa65a87874bfe89d950901948176184d5">SetCanWriteFlag</a>()throw(){
<a name="l00183"></a>00183                 this-&gt;<a class="code" href="classting_1_1Waitable.htm#a08d25d16b30597469216717faeacdba0">readinessFlags</a> |= <a class="code" href="classting_1_1Waitable.htm#ad06cce175fd90cd3bda3960ffc7d7abea9c9432c7952f916f1072696bbc35e2db">WRITE</a>;
<a name="l00184"></a>00184         }
<a name="l00185"></a>00185 
<a name="l00186"></a><a class="code" href="classting_1_1Waitable.htm#af593425a807d59fbef4c0206dcd91935">00186</a>         <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classting_1_1Waitable.htm#af593425a807d59fbef4c0206dcd91935">ClearCanWriteFlag</a>()throw(){
<a name="l00187"></a>00187                 this-&gt;<a class="code" href="classting_1_1Waitable.htm#a08d25d16b30597469216717faeacdba0">readinessFlags</a> &amp;= (~<a class="code" href="classting_1_1Waitable.htm#ad06cce175fd90cd3bda3960ffc7d7abea9c9432c7952f916f1072696bbc35e2db">WRITE</a>);
<a name="l00188"></a>00188         }
<a name="l00189"></a>00189 
<a name="l00190"></a><a class="code" href="classting_1_1Waitable.htm#ae003993b07a23a6941b9a0bdd977fceb">00190</a>         <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classting_1_1Waitable.htm#ae003993b07a23a6941b9a0bdd977fceb">SetErrorFlag</a>()throw(){
<a name="l00191"></a>00191                 this-&gt;<a class="code" href="classting_1_1Waitable.htm#a08d25d16b30597469216717faeacdba0">readinessFlags</a> |= <a class="code" href="classting_1_1Waitable.htm#ad06cce175fd90cd3bda3960ffc7d7abeaf1d0dcf8356f54bcc50c956988250537">ERROR_CONDITION</a>;
<a name="l00192"></a>00192         }
<a name="l00193"></a>00193 
<a name="l00194"></a><a class="code" href="classting_1_1Waitable.htm#ae33b2cd58cd93cd6a26eabcb1cdcb679">00194</a>         <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classting_1_1Waitable.htm#ae33b2cd58cd93cd6a26eabcb1cdcb679">ClearErrorFlag</a>()throw(){
<a name="l00195"></a>00195                 this-&gt;<a class="code" href="classting_1_1Waitable.htm#a08d25d16b30597469216717faeacdba0">readinessFlags</a> &amp;= (~<a class="code" href="classting_1_1Waitable.htm#ad06cce175fd90cd3bda3960ffc7d7abeaf1d0dcf8356f54bcc50c956988250537">ERROR_CONDITION</a>);
<a name="l00196"></a>00196         }
<a name="l00197"></a>00197 
<a name="l00198"></a><a class="code" href="classting_1_1Waitable.htm#a0de89037f9e0c0e6ae399c5daab94a33">00198</a>         <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classting_1_1Waitable.htm#a0de89037f9e0c0e6ae399c5daab94a33">ClearAllReadinessFlags</a>()throw(){
<a name="l00199"></a>00199                 this-&gt;<a class="code" href="classting_1_1Waitable.htm#a08d25d16b30597469216717faeacdba0">readinessFlags</a> = <a class="code" href="classting_1_1Waitable.htm#ad06cce175fd90cd3bda3960ffc7d7abeaad54d466c6ce198aad8115773b3abf1b">NOT_READY</a>;
<a name="l00200"></a>00200         }
<a name="l00201"></a>00201 
<a name="l00202"></a>00202 <span class="keyword">public</span>:
<a name="l00203"></a><a class="code" href="classting_1_1Waitable.htm#a5bbd882bcbe8c4a690a706b77b32637e">00203</a>         <span class="keyword">virtual</span> <a class="code" href="classting_1_1Waitable.htm#a5bbd882bcbe8c4a690a706b77b32637e">~Waitable</a>()throw(){
<a name="l00204"></a>00204                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(!this-&gt;isAdded)
<a name="l00205"></a>00205         }
<a name="l00206"></a>00206 
<a name="l00211"></a><a class="code" href="classting_1_1Waitable.htm#a3fba19627cd194aaa1153760ccf85091">00211</a>         <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="classting_1_1Waitable.htm#a3fba19627cd194aaa1153760ccf85091" title="Check if &quot;Can read&quot; flag is set.">CanRead</a>()<span class="keyword">const</span> throw(){
<a name="l00212"></a>00212                 <span class="keywordflow">return</span> (this-&gt;<a class="code" href="classting_1_1Waitable.htm#a08d25d16b30597469216717faeacdba0">readinessFlags</a> &amp; <a class="code" href="classting_1_1Waitable.htm#ad06cce175fd90cd3bda3960ffc7d7abeab8c09c1a43e6f127ee2dbd6ceb1623e7">READ</a>) != 0;
<a name="l00213"></a>00213         }
<a name="l00214"></a>00214 
<a name="l00219"></a><a class="code" href="classting_1_1Waitable.htm#abac837a916df462a0c1888941834d93d">00219</a>         <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="classting_1_1Waitable.htm#abac837a916df462a0c1888941834d93d" title="Check if &quot;Can write&quot; flag is set.">CanWrite</a>()<span class="keyword">const</span> throw(){
<a name="l00220"></a>00220                 <span class="keywordflow">return</span> (this-&gt;<a class="code" href="classting_1_1Waitable.htm#a08d25d16b30597469216717faeacdba0">readinessFlags</a> &amp; <a class="code" href="classting_1_1Waitable.htm#ad06cce175fd90cd3bda3960ffc7d7abea9c9432c7952f916f1072696bbc35e2db">WRITE</a>) != 0;
<a name="l00221"></a>00221         }
<a name="l00222"></a>00222 
<a name="l00227"></a><a class="code" href="classting_1_1Waitable.htm#a46b9dab7b78519dbe1b39f4d9e07d776">00227</a>         <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="classting_1_1Waitable.htm#a46b9dab7b78519dbe1b39f4d9e07d776" title="Check if &quot;error&quot; flag is set.">ErrorCondition</a>()<span class="keyword">const</span> throw(){
<a name="l00228"></a>00228                 <span class="keywordflow">return</span> (this-&gt;<a class="code" href="classting_1_1Waitable.htm#a08d25d16b30597469216717faeacdba0">readinessFlags</a> &amp; <a class="code" href="classting_1_1Waitable.htm#ad06cce175fd90cd3bda3960ffc7d7abeaf1d0dcf8356f54bcc50c956988250537">ERROR_CONDITION</a>) != 0;
<a name="l00229"></a>00229         }
<a name="l00230"></a>00230 
<a name="l00237"></a><a class="code" href="classting_1_1Waitable.htm#aa773fa77eaafc97f7da9133444152bee">00237</a>         <span class="keyword">inline</span> <span class="keywordtype">void</span>* <a class="code" href="classting_1_1Waitable.htm#aa773fa77eaafc97f7da9133444152bee" title="Get user data associated with this Waitable.">GetUserData</a>()throw(){
<a name="l00238"></a>00238                 <span class="keywordflow">return</span> this-&gt;userData;
<a name="l00239"></a>00239         }
<a name="l00240"></a>00240 
<a name="l00246"></a><a class="code" href="classting_1_1Waitable.htm#a1706e88628091350339ef217eebfdd0f">00246</a>         <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classting_1_1Waitable.htm#a1706e88628091350339ef217eebfdd0f" title="Set user data.">SetUserData</a>(<span class="keywordtype">void</span>* data)<span class="keywordflow">throw</span>(){
<a name="l00247"></a>00247                 this-&gt;userData = data;
<a name="l00248"></a>00248         }
<a name="l00249"></a>00249 
<a name="l00250"></a>00250 <span class="preprocessor">#if M_OS == M_OS_WINDOWS</span>
<a name="l00251"></a>00251 <span class="preprocessor"></span><span class="keyword">protected</span>:
<a name="l00252"></a>00252         <span class="keyword">virtual</span> HANDLE GetHandle() = 0;
<a name="l00253"></a>00253 
<a name="l00254"></a>00254         <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetWaitingEvents(<a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">u32</a> <span class="comment">/*flagsToWaitFor*/</span>){}
<a name="l00255"></a>00255 
<a name="l00256"></a>00256         <span class="comment">//returns true if signaled</span>
<a name="l00257"></a>00257         <span class="keyword">virtual</span> <span class="keywordtype">bool</span> CheckSignaled(){
<a name="l00258"></a>00258                 <span class="keywordflow">return</span> this-&gt;<a class="code" href="classting_1_1Waitable.htm#a08d25d16b30597469216717faeacdba0">readinessFlags</a> != 0;
<a name="l00259"></a>00259         }
<a name="l00260"></a>00260 
<a name="l00261"></a>00261 
<a name="l00262"></a>00262 
<a name="l00263"></a>00263 <span class="preprocessor">#elif M_OS == M_OS_LINUX || M_OS == M_OS_MACOSX || M_OS == M_OS_SOLARIS</span>
<a name="l00264"></a>00264 <span class="preprocessor"></span><span class="keyword">protected</span>:
<a name="l00265"></a>00265         <span class="keyword">virtual</span> <span class="keywordtype">int</span> GetHandle() = 0;
<a name="l00266"></a>00266 
<a name="l00267"></a>00267 
<a name="l00268"></a>00268 
<a name="l00269"></a>00269 <span class="preprocessor">#else</span>
<a name="l00270"></a>00270 <span class="preprocessor"></span><span class="preprocessor">#       error &quot;Unsupported OS&quot;</span>
<a name="l00271"></a>00271 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00272"></a>00272 <span class="preprocessor"></span>
<a name="l00273"></a>00273 };<span class="comment">//~class Waitable</span>
<a name="l00274"></a>00274 
<a name="l00275"></a>00275 
<a name="l00276"></a>00276 
<a name="l00277"></a>00277 
<a name="l00278"></a>00278 
<a name="l00282"></a><a class="code" href="classting_1_1WaitSet.htm">00282</a> <span class="keyword">class </span><a class="code" href="classting_1_1WaitSet.htm" title="Set of Waitable objects to wait for.">WaitSet</a>{
<a name="l00283"></a>00283         <span class="keyword">const</span> <span class="keywordtype">unsigned</span> size;
<a name="l00284"></a>00284         <a class="code" href="classting_1_1Inited.htm">ting::Inited&lt;unsigned, 0&gt;</a> numWaitables;<span class="comment">//number of Waitables added</span>
<a name="l00285"></a>00285 
<a name="l00286"></a>00286 <span class="preprocessor">#if M_OS == M_OS_WINDOWS</span>
<a name="l00287"></a>00287 <span class="preprocessor"></span>        <a class="code" href="classting_1_1Array.htm" title="wrapper above new[]/delete[].">Array&lt;Waitable*&gt;</a> waitables;
<a name="l00288"></a>00288         <a class="code" href="classting_1_1Array.htm" title="wrapper above new[]/delete[].">Array&lt;HANDLE&gt;</a> handles; <span class="comment">//used to pass array of HANDLEs to WaitForMultipleObjectsEx()</span>
<a name="l00289"></a>00289 
<a name="l00290"></a>00290 <span class="preprocessor">#elif M_OS == M_OS_LINUX</span>
<a name="l00291"></a>00291 <span class="preprocessor"></span>        <span class="keywordtype">int</span> epollSet;
<a name="l00292"></a>00292 
<a name="l00293"></a>00293         <a class="code" href="classting_1_1Array.htm" title="wrapper above new[]/delete[].">Array&lt;epoll_event&gt;</a> revents;<span class="comment">//used for getting the result from epoll_wait()</span>
<a name="l00294"></a>00294 <span class="preprocessor">#elif M_OS == M_OS_MACOSX</span>
<a name="l00295"></a>00295 <span class="preprocessor"></span>        <span class="keywordtype">int</span> kq_queue; <span class="comment">// kqueue, file descriptor</span>
<a name="l00296"></a>00296         <a class="code" href="classting_1_1Array.htm" title="wrapper above new[]/delete[].">Array&lt;struct kevent&gt;</a> kq_output; <span class="comment">// events (size*2)</span>
<a name="l00297"></a>00297 
<a name="l00298"></a>00298         <span class="comment">//TODO: move to .cpp?</span>
<a name="l00299"></a>00299         <span class="keywordtype">void</span> SetEvent(<a class="code" href="classting_1_1Waitable.htm" title="Base class for objects which can be waited for.">Waitable</a> *w, <span class="keywordtype">bool</span> read_write, <span class="keywordtype">bool</span> add_remove){
<a name="l00300"></a>00300                 int16_t filter = (read_write) ? EVFILT_READ : EVFILT_WRITE;
<a name="l00301"></a>00301                 uint16_t flags = (add_remove) ? EV_ADD : EV_DELETE;
<a name="l00302"></a>00302                 <span class="keyword">struct </span>kevent input, output;
<a name="l00303"></a>00303                 <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">struct </span>timespec tmout = {0, 0};<span class="comment">//TODO: why static???</span>
<a name="l00304"></a>00304 
<a name="l00305"></a>00305                 <span class="comment">//add a new event</span>
<a name="l00306"></a>00306                 EV_SET(&amp;input, w-&gt;GetHandle(), filter, flags | EV_RECEIPT, 0, 0, (<span class="keywordtype">void</span>*)w);
<a name="l00307"></a>00307 
<a name="l00308"></a>00308                 <span class="comment">//now try to add this event to the kqueue</span>
<a name="l00309"></a>00309                 <span class="keywordtype">int</span> result = kevent(kq_queue, &amp;input, 1, &amp;output, 1, &amp;tmout);
<a name="l00310"></a>00310                 <span class="keywordflow">if</span>(result == -1){
<a name="l00311"></a>00311                         <span class="comment">//TODO: ???</span>
<a name="l00312"></a>00312                         <span class="comment">//std::cout &lt;&lt; &quot;ERROR on Set &quot; &lt;&lt; errno &lt;&lt; &quot;!&quot; &lt;&lt; std::endl;</span>
<a name="l00313"></a>00313                 }
<a name="l00314"></a>00314 
<a name="l00315"></a>00315                 <span class="keywordflow">if</span>(result == -1 &amp;&amp; errno == ENOENT){
<a name="l00316"></a>00316                         <span class="comment">//TODO: ???</span>
<a name="l00317"></a>00317                         <span class="comment">//std::cout &lt;&lt; &quot;blah&quot; &lt;&lt; std::endl;</span>
<a name="l00318"></a>00318                 }
<a name="l00319"></a>00319 
<a name="l00320"></a>00320                 <span class="comment">//TODO: add assertion on result???</span>
<a name="l00321"></a>00321         }
<a name="l00322"></a>00322 
<a name="l00323"></a>00323         <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">bool</span> EVENT_READ  = <span class="keyword">true</span>;
<a name="l00324"></a>00324         <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">bool</span> EVENT_WRITE = <span class="keyword">false</span>;
<a name="l00325"></a>00325 
<a name="l00326"></a>00326         <span class="keywordtype">void</span> AddEvent(<a class="code" href="classting_1_1Waitable.htm" title="Base class for objects which can be waited for.">Waitable</a> *w, <span class="keywordtype">bool</span> rw){
<a name="l00327"></a>00327                 SetEvent(w, rw, <span class="keyword">true</span>);
<a name="l00328"></a>00328         }
<a name="l00329"></a>00329 
<a name="l00330"></a>00330         <span class="keywordtype">void</span> RemoveEvent(<a class="code" href="classting_1_1Waitable.htm" title="Base class for objects which can be waited for.">Waitable</a> *w, <span class="keywordtype">bool</span> rw){
<a name="l00331"></a>00331                 SetEvent(w, rw, <span class="keyword">false</span>);
<a name="l00332"></a>00332         }
<a name="l00333"></a>00333 <span class="preprocessor">#else</span>
<a name="l00334"></a>00334 <span class="preprocessor"></span><span class="preprocessor">#       error &quot;Unsupported OS&quot;</span>
<a name="l00335"></a>00335 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00336"></a>00336 <span class="preprocessor"></span>
<a name="l00337"></a>00337 <span class="keyword">public</span>:
<a name="l00338"></a>00338 
<a name="l00343"></a><a class="code" href="classting_1_1WaitSet.htm#a27c079f5a712a033adba2013723d0c98">00343</a>         <a class="code" href="classting_1_1WaitSet.htm#a27c079f5a712a033adba2013723d0c98" title="Constructor.">WaitSet</a>(<span class="keywordtype">unsigned</span> maxSize) :
<a name="l00344"></a>00344                         size(maxSize)
<a name="l00345"></a>00345 #if <a class="code" href="config_8hpp.htm#a87150211e85597a448907e1d5fe07a2c">M_OS</a> == <a class="code" href="config_8hpp.htm#acb954902e4c2ae974098ae7d9c5bef3e">M_OS_WINDOWS</a>
<a name="l00346"></a>00346                         ,waitables(maxSize)
<a name="l00347"></a>00347                         ,handles(maxSize)
<a name="l00348"></a>00348         {
<a name="l00349"></a>00349                 <a class="code" href="debug_8hpp.htm#aaf04cfaa53d7b0bfcdeec60eaf7eed3a">ASSERT_INFO</a>(maxSize &lt;= MAXIMUM_WAIT_OBJECTS, <span class="stringliteral">&quot;maxSize should be less than &quot;</span> &lt;&lt; MAXIMUM_WAIT_OBJECTS)
<a name="l00350"></a>00350                 <span class="keywordflow">if</span>(maxSize &gt; MAXIMUM_WAIT_OBJECTS){
<a name="l00351"></a>00351                         <span class="keywordflow">throw</span> <a class="code" href="classting_1_1Exc.htm" title="Basic exception class.">ting::Exc</a>(<span class="stringliteral">&quot;WaitSet::WaitSet(): requested WaitSet size is too big&quot;</span>);
<a name="l00352"></a>00352                 }
<a name="l00353"></a>00353         }
<a name="l00354"></a>00354 
<a name="l00355"></a>00355 <span class="preprocessor">#elif M_OS == M_OS_LINUX</span>
<a name="l00356"></a>00356 <span class="preprocessor"></span>                        ,revents(maxSize)
<a name="l00357"></a>00357         {
<a name="l00358"></a>00358                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(<span class="keywordtype">int</span>(maxSize) &gt; 0)
<a name="l00359"></a>00359                 this-&gt;epollSet = epoll_create(<span class="keywordtype">int</span>(maxSize));
<a name="l00360"></a>00360                 if(this-&gt;epollSet &lt; 0){
<a name="l00361"></a>00361                         <span class="keywordflow">throw</span> <a class="code" href="classting_1_1Exc.htm" title="Basic exception class.">ting::Exc</a>(<span class="stringliteral">&quot;WaitSet::WaitSet(): epoll_create() failed&quot;</span>);
<a name="l00362"></a>00362                 }
<a name="l00363"></a>00363         }
<a name="l00364"></a>00364 <span class="preprocessor">#elif M_OS == M_OS_MACOSX</span>
<a name="l00365"></a>00365 <span class="preprocessor"></span>                        ,kq_output(maxSize * 2)
<a name="l00366"></a>00366         {
<a name="l00367"></a>00367                 this-&gt;kq_queue = kqueue();
<a name="l00368"></a>00368                 <span class="keywordflow">if</span>(this-&gt;kq_queue == -1){
<a name="l00369"></a>00369                         <span class="keywordflow">throw</span> <a class="code" href="classting_1_1Exc.htm" title="Basic exception class.">ting::Exc</a>(<span class="stringliteral">&quot;WaitSet::WaitSet(): kqueue creation failed&quot;</span>);
<a name="l00370"></a>00370                 }
<a name="l00371"></a>00371         }
<a name="l00372"></a>00372 <span class="preprocessor">#else</span>
<a name="l00373"></a>00373 <span class="preprocessor"></span><span class="preprocessor">#       error &quot;Unsupported OS&quot;</span>
<a name="l00374"></a>00374 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00375"></a>00375 <span class="preprocessor"></span>
<a name="l00376"></a>00376 
<a name="l00377"></a>00377 
<a name="l00385"></a>00385         ~<a class="code" href="classting_1_1WaitSet.htm#a27c079f5a712a033adba2013723d0c98" title="Constructor.">WaitSet</a>()throw(){
<a name="l00386"></a>00386                 <span class="comment">//assert the wait set is empty</span>
<a name="l00387"></a>00387                 <a class="code" href="debug_8hpp.htm#aaf04cfaa53d7b0bfcdeec60eaf7eed3a">ASSERT_INFO</a>(this-&gt;numWaitables == 0, <span class="stringliteral">&quot;attempt to destroy WaitSet containig Waitables&quot;</span>)
<a name="l00388"></a>00388 <span class="preprocessor">#if M_OS == M_OS_WINDOWS</span>
<a name="l00389"></a>00389 <span class="preprocessor"></span>                <span class="comment">//do nothing</span>
<a name="l00390"></a>00390 <span class="preprocessor">#elif M_OS == M_OS_LINUX</span>
<a name="l00391"></a>00391 <span class="preprocessor"></span>                close(this-&gt;epollSet);
<a name="l00392"></a>00392 <span class="preprocessor">#elif M_OS == M_OS_MACOSX</span>
<a name="l00393"></a>00393 <span class="preprocessor"></span>                close(this-&gt;kq_queue);
<a name="l00394"></a>00394 <span class="preprocessor">#else</span>
<a name="l00395"></a>00395 <span class="preprocessor"></span><span class="preprocessor">#       error &quot;Unsupported OS&quot;</span>
<a name="l00396"></a>00396 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00397"></a>00397 <span class="preprocessor"></span>        }
<a name="l00398"></a>00398 
<a name="l00399"></a>00399 
<a name="l00400"></a>00400 
<a name="l00405"></a><a class="code" href="classting_1_1WaitSet.htm#a21a2bcc5384749ea533b2c1b291a1419">00405</a>         <span class="keyword">inline</span> <span class="keywordtype">unsigned</span> <a class="code" href="classting_1_1WaitSet.htm#a21a2bcc5384749ea533b2c1b291a1419" title="Get maximum size of the wait set.">Size</a>()<span class="keyword">const</span> throw(){
<a name="l00406"></a>00406                 <span class="keywordflow">return</span> this-&gt;size;
<a name="l00407"></a>00407         }
<a name="l00408"></a>00408 
<a name="l00413"></a><a class="code" href="classting_1_1WaitSet.htm#a313f480f74bc0466c551b005402d1f03">00413</a>         <span class="keyword">inline</span> <span class="keywordtype">unsigned</span> <a class="code" href="classting_1_1WaitSet.htm#a313f480f74bc0466c551b005402d1f03" title="Get number of Waitables already added to this WaitSet.">NumWaitables</a>()<span class="keyword">const</span> throw(){
<a name="l00414"></a>00414                 <span class="keywordflow">return</span> this-&gt;numWaitables;
<a name="l00415"></a>00415         }
<a name="l00416"></a>00416 
<a name="l00417"></a>00417 
<a name="l00424"></a>00424         <span class="keywordtype">void</span> <a class="code" href="classting_1_1WaitSet.htm#a82c740315d7e0ab0414394086334ae97" title="Add Waitable object to the wait set.">Add</a>(<a class="code" href="classting_1_1Waitable.htm" title="Base class for objects which can be waited for.">Waitable</a>* w, <a class="code" href="classting_1_1Waitable.htm#ad06cce175fd90cd3bda3960ffc7d7abe">Waitable::EReadinessFlags</a> flagsToWaitFor);
<a name="l00425"></a>00425 
<a name="l00426"></a>00426 
<a name="l00427"></a>00427 
<a name="l00436"></a>00436         <span class="keywordtype">void</span> <a class="code" href="classting_1_1WaitSet.htm#ad5e4ef0601355c7285e6b7e8136d75ec" title="Change wait flags for a given Waitable.">Change</a>(<a class="code" href="classting_1_1Waitable.htm" title="Base class for objects which can be waited for.">Waitable</a>* w, <a class="code" href="classting_1_1Waitable.htm#ad06cce175fd90cd3bda3960ffc7d7abe">Waitable::EReadinessFlags</a> flagsToWaitFor);
<a name="l00437"></a>00437 
<a name="l00438"></a>00438 
<a name="l00439"></a>00439 
<a name="l00446"></a>00446         <span class="keywordtype">void</span> <a class="code" href="classting_1_1WaitSet.htm#a83feb2b9422c4d039e01b6a908e3e8c0" title="Remove Waitable from wait set.">Remove</a>(<a class="code" href="classting_1_1Waitable.htm" title="Base class for objects which can be waited for.">Waitable</a>* w)<span class="keywordflow">throw</span>();
<a name="l00447"></a>00447 
<a name="l00448"></a>00448 
<a name="l00449"></a>00449 
<a name="l00466"></a><a class="code" href="classting_1_1WaitSet.htm#a9f6d4ac786e9a731abcda2242b59bf39">00466</a>         <span class="keyword">inline</span> <span class="keywordtype">unsigned</span> <a class="code" href="classting_1_1WaitSet.htm#a9f6d4ac786e9a731abcda2242b59bf39" title="wait for event.">Wait</a>(<a class="code" href="classting_1_1Buffer.htm" title="Memory buffer wrapper template class.">Buffer&lt;Waitable*&gt;</a>* out_events = 0){
<a name="l00467"></a>00467                 <span class="keywordflow">return</span> this-&gt;<a class="code" href="classting_1_1WaitSet.htm#a9f6d4ac786e9a731abcda2242b59bf39" title="wait for event.">Wait</a>(<span class="keyword">true</span>, 0, out_events);
<a name="l00468"></a>00468         }
<a name="l00469"></a>00469 
<a name="l00470"></a>00470 
<a name="l00487"></a><a class="code" href="classting_1_1WaitSet.htm#a112d3ab74291753be3dabc0cef86ccbf">00487</a>         <span class="keyword">inline</span> <span class="keywordtype">unsigned</span> <a class="code" href="classting_1_1WaitSet.htm#a112d3ab74291753be3dabc0cef86ccbf" title="wait for event with timeout.">WaitWithTimeout</a>(<a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">u32</a> timeout, <a class="code" href="classting_1_1Buffer.htm" title="Memory buffer wrapper template class.">Buffer&lt;Waitable*&gt;</a>* out_events = 0){
<a name="l00488"></a>00488                 <span class="keywordflow">return</span> this-&gt;<a class="code" href="classting_1_1WaitSet.htm#a9f6d4ac786e9a731abcda2242b59bf39" title="wait for event.">Wait</a>(<span class="keyword">false</span>, timeout, out_events);
<a name="l00489"></a>00489         }
<a name="l00490"></a>00490 
<a name="l00491"></a>00491 
<a name="l00492"></a>00492 
<a name="l00493"></a>00493 <span class="keyword">private</span>:
<a name="l00494"></a>00494         <span class="keywordtype">unsigned</span> <a class="code" href="classting_1_1WaitSet.htm#a9f6d4ac786e9a731abcda2242b59bf39" title="wait for event.">Wait</a>(<span class="keywordtype">bool</span> waitInfinitly, <a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">u32</a> timeout, <a class="code" href="classting_1_1Buffer.htm" title="Memory buffer wrapper template class.">Buffer&lt;Waitable*&gt;</a>* out_events);
<a name="l00495"></a>00495 };<span class="comment">//~class WaitSet</span>
<a name="l00496"></a>00496 
<a name="l00497"></a>00497 
<a name="l00498"></a>00498 
<a name="l00499"></a>00499 }<span class="comment">//~namespace ting</span>
<a name="l00500"></a>00500 
<a name="l00501"></a>00501 
<a name="l00502"></a>00502 <span class="comment">//restore warnings state</span>
<a name="l00503"></a>00503 <span class="preprocessor">#if M_COMPILER == M_COMPILER_MSVC</span>
<a name="l00504"></a>00504 <span class="preprocessor"></span><span class="preprocessor">#       pragma warning(pop) //pop warnings state</span>
<a name="l00505"></a>00505 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="WaitSet_8hpp.htm">WaitSet.hpp</a>      </li>

    <li class="footer">Generated on Thu Feb 21 2013 20:36:35 for libting by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
