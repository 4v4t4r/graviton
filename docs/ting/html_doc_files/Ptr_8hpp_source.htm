<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>libting: Ptr.hpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">libting
   &#160;<span id="projectnumber">2.0.0</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.htm"><span>File&#160;List</span></a></li>
      <li><a href="globals.htm"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('Ptr_8hpp.htm','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">Ptr.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="Ptr_8hpp.htm">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* The MIT License:</span>
<a name="l00002"></a>00002 <span class="comment"></span>
<a name="l00003"></a>00003 <span class="comment">Copyright (c) 2008-2012 Ivan Gagis &lt;igagis@gmail.com&gt;</span>
<a name="l00004"></a>00004 <span class="comment"></span>
<a name="l00005"></a>00005 <span class="comment">Permission is hereby granted, free of charge, to any person obtaining a copy</span>
<a name="l00006"></a>00006 <span class="comment">of this software and associated documentation files (the &quot;Software&quot;), to deal</span>
<a name="l00007"></a>00007 <span class="comment">in the Software without restriction, including without limitation the rights</span>
<a name="l00008"></a>00008 <span class="comment">to use, copy, modify, merge, publish, distribute, sublicense, and/or sell</span>
<a name="l00009"></a>00009 <span class="comment">copies of the Software, and to permit persons to whom the Software is</span>
<a name="l00010"></a>00010 <span class="comment">furnished to do so, subject to the following conditions:</span>
<a name="l00011"></a>00011 <span class="comment"></span>
<a name="l00012"></a>00012 <span class="comment">The above copyright notice and this permission notice shall be included in</span>
<a name="l00013"></a>00013 <span class="comment">all copies or substantial portions of the Software.</span>
<a name="l00014"></a>00014 <span class="comment"></span>
<a name="l00015"></a>00015 <span class="comment">THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span>
<a name="l00016"></a>00016 <span class="comment">IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span>
<a name="l00017"></a>00017 <span class="comment">FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span>
<a name="l00018"></a>00018 <span class="comment">AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span>
<a name="l00019"></a>00019 <span class="comment">LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span>
<a name="l00020"></a>00020 <span class="comment">OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN</span>
<a name="l00021"></a>00021 <span class="comment">THE SOFTWARE. */</span>
<a name="l00022"></a>00022 
<a name="l00023"></a>00023 <span class="comment">// Home page: http://ting.googlecode.com</span>
<a name="l00024"></a>00024 
<a name="l00025"></a>00025 
<a name="l00026"></a>00026 
<a name="l00033"></a>00033 <span class="preprocessor">#pragma once</span>
<a name="l00034"></a>00034 <span class="preprocessor"></span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &quot;<a class="code" href="debug_8hpp.htm">debug.hpp</a>&quot;</span>
<a name="l00036"></a>00036 
<a name="l00037"></a>00037 <span class="comment">//#define M_ENABLE_PTR_PRINT</span>
<a name="l00038"></a>00038 <span class="preprocessor">#ifdef M_ENABLE_PTR_PRINT</span>
<a name="l00039"></a>00039 <span class="preprocessor"></span><span class="preprocessor">#define M_PTR_PRINT(x) TRACE(x)</span>
<a name="l00040"></a>00040 <span class="preprocessor"></span><span class="preprocessor">#else</span>
<a name="l00041"></a><a class="code" href="Ptr_8hpp.htm#a63fadb38af14911ef9fe5b0537822077">00041</a> <span class="preprocessor"></span><span class="preprocessor">#define M_PTR_PRINT(x)</span>
<a name="l00042"></a>00042 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00043"></a>00043 <span class="preprocessor"></span>
<a name="l00044"></a>00044 <span class="keyword">namespace </span>ting{
<a name="l00045"></a>00045 
<a name="l00046"></a>00046 
<a name="l00053"></a><a class="code" href="classting_1_1Ptr.htm">00053</a> <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt; <span class="keyword">class </span><a class="code" href="classting_1_1Ptr.htm" title="Auto-pointer template class.">Ptr</a>{
<a name="l00054"></a><a class="code" href="classting_1_1Ptr.htm#af16a8b29b0cd8a497383653592ba23b7">00054</a>         <span class="keyword">template</span> &lt;<span class="keyword">class</span> TS&gt; <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classting_1_1Ptr.htm" title="Auto-pointer template class.">Ptr</a>;
<a name="l00055"></a>00055 
<a name="l00056"></a>00056         T* p;
<a name="l00057"></a>00057 <span class="keyword">public</span>:
<a name="l00058"></a><a class="code" href="classting_1_1Ptr.htm#adbadd60de8b190c1c52702e3c1720bc9">00058</a>         <span class="keyword">explicit</span> <span class="keyword">inline</span> <a class="code" href="classting_1_1Ptr.htm#af16a8b29b0cd8a497383653592ba23b7">Ptr</a>(T* ptr = 0)throw() :
<a name="l00059"></a>00059                         p(ptr)
<a name="l00060"></a>00060         {}
<a name="l00061"></a>00061 
<a name="l00074"></a>00074         <span class="comment">//const copy constructor</span>
<a name="l00075"></a><a class="code" href="classting_1_1Ptr.htm#a4d2dbf9638294f433604f4e807c4c562">00075</a>         <span class="keyword">inline</span> <a class="code" href="classting_1_1Ptr.htm#a4d2dbf9638294f433604f4e807c4c562" title="Copy constructor.">Ptr</a>(<span class="keyword">const</span> <a class="code" href="classting_1_1Ptr.htm" title="Auto-pointer template class.">Ptr</a>&amp; ptr)<span class="keywordflow">throw</span>(){
<a name="l00076"></a>00076                 <a class="code" href="Ptr_8hpp.htm#a63fadb38af14911ef9fe5b0537822077">M_PTR_PRINT</a>(&lt;&lt; <span class="stringliteral">&quot;Ptr::Ptr(copy): invoked, ptr.p = &quot;</span> &lt;&lt; (ptr.p) &lt;&lt; std::endl)
<a name="l00077"></a>00077                 this-&gt;p = ptr.p;
<a name="l00078"></a>00078                 <span class="keyword">const_cast&lt;</span><a class="code" href="classting_1_1Ptr.htm" title="Auto-pointer template class.">Ptr</a>&amp;<span class="keyword">&gt;</span>(ptr).p = 0;
<a name="l00079"></a>00079         }
<a name="l00080"></a>00080 
<a name="l00081"></a><a class="code" href="classting_1_1Ptr.htm#aac884a905875390c04c29bb2b2b13146">00081</a>         <span class="keyword">template</span> &lt;<span class="keyword">class</span> TS&gt; <span class="keyword">inline</span> <a class="code" href="classting_1_1Ptr.htm#aac884a905875390c04c29bb2b2b13146">Ptr</a>(<span class="keyword">const</span> <a class="code" href="classting_1_1Ptr.htm" title="Auto-pointer template class.">Ptr&lt;TS&gt;</a>&amp; ptr)<span class="keywordflow">throw</span>(){
<a name="l00082"></a>00082                 <a class="code" href="Ptr_8hpp.htm#a63fadb38af14911ef9fe5b0537822077">M_PTR_PRINT</a>(&lt;&lt; <span class="stringliteral">&quot;Ptr::Ptr(conversion): invoked, ptr.p = &quot;</span> &lt;&lt; (ptr.p) &lt;&lt; std::endl)
<a name="l00083"></a>00083                 this-&gt;p = ptr.p;
<a name="l00084"></a>00084                 <span class="keyword">const_cast&lt;</span><a class="code" href="classting_1_1Ptr.htm" title="Auto-pointer template class.">Ptr&lt;TS&gt;</a>&amp;<span class="keyword">&gt;</span>(ptr).p = 0;
<a name="l00085"></a>00085         }
<a name="l00086"></a>00086 
<a name="l00087"></a><a class="code" href="classting_1_1Ptr.htm#aff09d31d90060f0637d87b121397ec6f">00087</a>         <span class="keyword">inline</span> <a class="code" href="classting_1_1Ptr.htm#aff09d31d90060f0637d87b121397ec6f">~Ptr</a>()throw(){
<a name="l00088"></a>00088                 this-&gt;Destroy();
<a name="l00089"></a>00089         }
<a name="l00090"></a>00090 
<a name="l00091"></a><a class="code" href="classting_1_1Ptr.htm#ab03e6873ae5242fd4f63ac9bd746666e">00091</a>         <span class="keyword">inline</span> T* <a class="code" href="classting_1_1Ptr.htm#ab03e6873ae5242fd4f63ac9bd746666e">operator-&gt;</a>()throw(){
<a name="l00092"></a>00092                 <span class="keywordflow">return</span> this-&gt;p;
<a name="l00093"></a>00093         }
<a name="l00094"></a>00094 
<a name="l00095"></a>00095         <span class="comment">//NOTE: the operator is const but returns non-const value because const Ptr</span>
<a name="l00096"></a>00096         <span class="comment">//      doesn&#39;t mean that it points to constant object, it means that</span>
<a name="l00097"></a>00097         <span class="comment">//      the pointer itself cannot be changed to point to another value.</span>
<a name="l00098"></a><a class="code" href="classting_1_1Ptr.htm#a9b3c7bdaa3fcef8c89ae36f6c0ac4bcd">00098</a>         <span class="keyword">inline</span> T* <a class="code" href="classting_1_1Ptr.htm#a9b3c7bdaa3fcef8c89ae36f6c0ac4bcd">operator-&gt;</a>()<span class="keyword">const</span> throw(){
<a name="l00099"></a>00099                 <span class="keywordflow">return</span> this-&gt;p;
<a name="l00100"></a>00100         }
<a name="l00101"></a>00101 
<a name="l00102"></a><a class="code" href="classting_1_1Ptr.htm#a589c0fdb2ce874c44f965c92ab3cc489">00102</a>         <span class="keyword">inline</span> T&amp; <a class="code" href="classting_1_1Ptr.htm#a589c0fdb2ce874c44f965c92ab3cc489">operator*</a>()throw(){
<a name="l00103"></a>00103                 <a class="code" href="debug_8hpp.htm#aaf04cfaa53d7b0bfcdeec60eaf7eed3a">ASSERT_INFO</a>(this-&gt;p, <span class="stringliteral">&quot;Ptr::operator*(): this-&gt;p is zero&quot;</span>)
<a name="l00104"></a>00104                 <span class="keywordflow">return</span> *(this-&gt;<a class="code" href="classting_1_1Ptr.htm#ab03e6873ae5242fd4f63ac9bd746666e">operator-&gt;</a>());
<a name="l00105"></a>00105         }
<a name="l00106"></a>00106 
<a name="l00107"></a><a class="code" href="classting_1_1Ptr.htm#a2043a1e5412fc5a9a0f74529ab103f76">00107</a>         <span class="keyword">inline</span> T&amp; <a class="code" href="classting_1_1Ptr.htm#a2043a1e5412fc5a9a0f74529ab103f76">operator*</a>()<span class="keyword">const</span> throw(){
<a name="l00108"></a>00108                 <a class="code" href="debug_8hpp.htm#aaf04cfaa53d7b0bfcdeec60eaf7eed3a">ASSERT_INFO</a>(this-&gt;p, <span class="stringliteral">&quot;const Ptr::operator*(): this-&gt;p is zero&quot;</span>)
<a name="l00109"></a>00109                 <span class="keywordflow">return</span> *(this-&gt;<a class="code" href="classting_1_1Ptr.htm#ab03e6873ae5242fd4f63ac9bd746666e">operator-&gt;</a>());
<a name="l00110"></a>00110         }
<a name="l00111"></a>00111 
<a name="l00123"></a><a class="code" href="classting_1_1Ptr.htm#a91fe2bf9e97a1c681d56fcbf66161325">00123</a>         <span class="keyword">inline</span> <a class="code" href="classting_1_1Ptr.htm" title="Auto-pointer template class.">Ptr</a>&amp; <a class="code" href="classting_1_1Ptr.htm#a91fe2bf9e97a1c681d56fcbf66161325" title="Assignment operator.">operator=</a>(<span class="keyword">const</span> <a class="code" href="classting_1_1Ptr.htm" title="Auto-pointer template class.">Ptr</a>&amp; ptr)<span class="keywordflow">throw</span>(){
<a name="l00124"></a>00124                 <a class="code" href="Ptr_8hpp.htm#a63fadb38af14911ef9fe5b0537822077">M_PTR_PRINT</a>(&lt;&lt; <span class="stringliteral">&quot;Ptr::operator=(Ptr&amp;): enter, this-&gt;p = &quot;</span> &lt;&lt; (this-&gt;p) &lt;&lt; std::endl)
<a name="l00125"></a>00125                 this-&gt;Destroy();
<a name="l00126"></a>00126                 this-&gt;p = ptr.p;
<a name="l00127"></a>00127                 <span class="keyword">const_cast&lt;</span><a class="code" href="classting_1_1Ptr.htm" title="Auto-pointer template class.">Ptr</a>&amp;<span class="keyword">&gt;</span>(ptr).p = 0;
<a name="l00128"></a>00128                 <a class="code" href="Ptr_8hpp.htm#a63fadb38af14911ef9fe5b0537822077">M_PTR_PRINT</a>(&lt;&lt; <span class="stringliteral">&quot;Ptr::operator=(Ptr&amp;): exit, this-&gt;p = &quot;</span> &lt;&lt; (this-&gt;p) &lt;&lt; std::endl)
<a name="l00129"></a>00129                 <span class="keywordflow">return</span> (*<span class="keyword">this</span>);
<a name="l00130"></a>00130         }
<a name="l00131"></a>00131 
<a name="l00132"></a><a class="code" href="classting_1_1Ptr.htm#afd89ec286640806d2a6b1110038b761d">00132</a>         <span class="keyword">template</span> &lt;<span class="keyword">class</span> TS&gt; <span class="keyword">inline</span> <a class="code" href="classting_1_1Ptr.htm" title="Auto-pointer template class.">Ptr</a>&amp; <a class="code" href="classting_1_1Ptr.htm#afd89ec286640806d2a6b1110038b761d">operator=</a>(<span class="keyword">const</span> <a class="code" href="classting_1_1Ptr.htm" title="Auto-pointer template class.">Ptr&lt;TS&gt;</a>&amp; ptr)<span class="keywordflow">throw</span>(){
<a name="l00133"></a>00133                 <a class="code" href="Ptr_8hpp.htm#a63fadb38af14911ef9fe5b0537822077">M_PTR_PRINT</a>(&lt;&lt; <span class="stringliteral">&quot;Ptr::operator=(conversion): enter, this-&gt;p = &quot;</span> &lt;&lt; (this-&gt;p) &lt;&lt; std::endl)
<a name="l00134"></a>00134                 this-&gt;Destroy();
<a name="l00135"></a>00135                 this-&gt;p = ptr.p;
<a name="l00136"></a>00136                 <span class="keyword">const_cast&lt;</span><a class="code" href="classting_1_1Ptr.htm" title="Auto-pointer template class.">Ptr&lt;TS&gt;</a>&amp;<span class="keyword">&gt;</span>(ptr).p = 0;
<a name="l00137"></a>00137                 <a class="code" href="Ptr_8hpp.htm#a63fadb38af14911ef9fe5b0537822077">M_PTR_PRINT</a>(&lt;&lt; <span class="stringliteral">&quot;Ptr::operator=(conversion): exit, this-&gt;p = &quot;</span> &lt;&lt; (this-&gt;p) &lt;&lt; std::endl)
<a name="l00138"></a>00138                 <span class="keywordflow">return</span> (*<span class="keyword">this</span>);
<a name="l00139"></a>00139         }
<a name="l00140"></a>00140 
<a name="l00141"></a><a class="code" href="classting_1_1Ptr.htm#a04584cc302d07cefe0ef5a1578d70c26">00141</a>         <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="classting_1_1Ptr.htm#a04584cc302d07cefe0ef5a1578d70c26">operator==</a>(<span class="keyword">const</span> T* ptr)<span class="keyword">const</span> <span class="keywordflow">throw</span>(){
<a name="l00142"></a>00142                 <span class="keywordflow">return</span> this-&gt;p == ptr;
<a name="l00143"></a>00143         }
<a name="l00144"></a>00144 
<a name="l00145"></a><a class="code" href="classting_1_1Ptr.htm#ad72b71ed8d5bc7956ab575cc848aeab0">00145</a>         <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="classting_1_1Ptr.htm#ad72b71ed8d5bc7956ab575cc848aeab0">operator!=</a>(<span class="keyword">const</span> T* ptr)<span class="keyword">const</span> <span class="keywordflow">throw</span>(){
<a name="l00146"></a>00146                 <span class="keywordflow">return</span> !this-&gt;<a class="code" href="classting_1_1Ptr.htm#a04584cc302d07cefe0ef5a1578d70c26">operator==</a>(ptr);
<a name="l00147"></a>00147         }
<a name="l00148"></a>00148 
<a name="l00149"></a><a class="code" href="classting_1_1Ptr.htm#a5a45efa284c988413d032bcd7f510fb4">00149</a>         <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="classting_1_1Ptr.htm#a5a45efa284c988413d032bcd7f510fb4">operator!</a>()<span class="keyword">const</span> throw(){
<a name="l00150"></a>00150                 <span class="keywordflow">return</span> this-&gt;<a class="code" href="classting_1_1Ptr.htm#ae927807c8d41c790f38113b8c02d704a" title="tells if the pointer is valid or not.">IsNotValid</a>();
<a name="l00151"></a>00151         }
<a name="l00152"></a>00152 
<a name="l00153"></a>00153 
<a name="l00154"></a>00154 
<a name="l00155"></a>00155         <span class="comment">//Safe conversion to bool type.</span>
<a name="l00156"></a>00156         <span class="comment">//Because if using simple &quot;operator bool()&quot; it may result in chained automatic</span>
<a name="l00157"></a>00157         <span class="comment">//conversion to undesired types such as int.</span>
<a name="l00158"></a><a class="code" href="classting_1_1Ptr.htm#ab6da1d243d579d2be3bc79e74e96f33d">00158</a>         <span class="keyword">typedef</span> void (<a class="code" href="classting_1_1Ptr.htm" title="Auto-pointer template class.">Ptr</a>::*<a class="code" href="classting_1_1Ptr.htm#ab6da1d243d579d2be3bc79e74e96f33d">unspecified_bool_type</a>)();
<a name="l00159"></a><a class="code" href="classting_1_1Ptr.htm#a7dc104bcba2508c5f298bdb38e1e3316">00159</a>         <span class="keyword">inline</span> <a class="code" href="classting_1_1Ptr.htm#a7dc104bcba2508c5f298bdb38e1e3316">operator unspecified_bool_type</a>()<span class="keyword">const</span> throw(){
<a name="l00160"></a>00160                 <span class="keywordflow">return</span> this-&gt;<a class="code" href="classting_1_1Ptr.htm#aaea0cb8dafed57e642fd9b42865cfcca" title="tells if the pointer is valid or not.">IsValid</a>() ? &amp;<a class="code" href="classting_1_1Ptr.htm#a13f21387781ab82e59d53425bc5e932f" title="reset pointer, destroying object it point to.">Ptr::Reset</a> : 0; <span class="comment">//Ptr::Reset is taken just because it has matching signature</span>
<a name="l00161"></a>00161         }
<a name="l00162"></a>00162 
<a name="l00163"></a>00163 <span class="comment">//      inline operator bool(){</span>
<a name="l00164"></a>00164 <span class="comment">//              return this-&gt;IsValid();</span>
<a name="l00165"></a>00165 <span class="comment">//      }</span>
<a name="l00166"></a>00166 
<a name="l00167"></a>00167 
<a name="l00168"></a>00168 
<a name="l00177"></a><a class="code" href="classting_1_1Ptr.htm#a09475dbdf1fef00081b6925f099f2354">00177</a>         <span class="keyword">inline</span> T* <a class="code" href="classting_1_1Ptr.htm#a09475dbdf1fef00081b6925f099f2354" title="Extract pointer to object invalidating the Ptr.">Extract</a>()throw(){
<a name="l00178"></a>00178                 T* pp = this-&gt;p;
<a name="l00179"></a>00179                 this-&gt;p = 0;
<a name="l00180"></a>00180                 <span class="keywordflow">return</span> pp;
<a name="l00181"></a>00181         }
<a name="l00182"></a>00182 
<a name="l00188"></a><a class="code" href="classting_1_1Ptr.htm#a13f21387781ab82e59d53425bc5e932f">00188</a>         <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classting_1_1Ptr.htm#a13f21387781ab82e59d53425bc5e932f" title="reset pointer, destroying object it point to.">Reset</a>()throw(){
<a name="l00189"></a>00189                 this-&gt;Destroy();
<a name="l00190"></a>00190                 this-&gt;p = 0;
<a name="l00191"></a>00191         }
<a name="l00192"></a>00192 
<a name="l00198"></a><a class="code" href="classting_1_1Ptr.htm#aaea0cb8dafed57e642fd9b42865cfcca">00198</a>         <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="classting_1_1Ptr.htm#aaea0cb8dafed57e642fd9b42865cfcca" title="tells if the pointer is valid or not.">IsValid</a>()<span class="keyword">const</span> throw(){
<a name="l00199"></a>00199                 <span class="keywordflow">return</span> this-&gt;p != 0;
<a name="l00200"></a>00200         }
<a name="l00201"></a>00201 
<a name="l00207"></a><a class="code" href="classting_1_1Ptr.htm#ae927807c8d41c790f38113b8c02d704a">00207</a>         <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="classting_1_1Ptr.htm#ae927807c8d41c790f38113b8c02d704a" title="tells if the pointer is valid or not.">IsNotValid</a>()<span class="keyword">const</span> throw(){
<a name="l00208"></a>00208                 <span class="keywordflow">return</span> !this-&gt;<a class="code" href="classting_1_1Ptr.htm#aaea0cb8dafed57e642fd9b42865cfcca" title="tells if the pointer is valid or not.">IsValid</a>();
<a name="l00209"></a>00209         }
<a name="l00210"></a>00210 
<a name="l00219"></a><a class="code" href="classting_1_1Ptr.htm#ad324f3016fafe444a5cad6f112416ae6">00219</a>         <span class="keyword">template</span> &lt;<span class="keyword">class</span> TS&gt; <span class="keyword">inline</span> TS* <a class="code" href="classting_1_1Ptr.htm#ad324f3016fafe444a5cad6f112416ae6" title="Static cast.">StaticCast</a>()throw(){
<a name="l00220"></a>00220                 <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span>TS*<span class="keyword">&gt;</span>(this-&gt;<a class="code" href="classting_1_1Ptr.htm#ab03e6873ae5242fd4f63ac9bd746666e">operator-&gt;</a>());
<a name="l00221"></a>00221         }
<a name="l00222"></a>00222 
<a name="l00223"></a>00223 <span class="keyword">private</span>:
<a name="l00224"></a>00224         <span class="keyword">inline</span> <span class="keywordtype">void</span> Destroy()throw(){
<a name="l00225"></a>00225                 <a class="code" href="Ptr_8hpp.htm#a63fadb38af14911ef9fe5b0537822077">M_PTR_PRINT</a>(&lt;&lt; <span class="stringliteral">&quot;Ptr::~Ptr(): delete invoked, this-&gt;p = &quot;</span> &lt;&lt; this-&gt;p &lt;&lt; std::endl)
<a name="l00226"></a>00226                 delete this-&gt;p;
<a name="l00227"></a>00227         }
<a name="l00228"></a>00228 
<a name="l00229"></a>00229         <span class="keywordtype">void</span>* operator new(<span class="keywordtype">size_t</span>);
<a name="l00230"></a>00230 
<a name="l00231"></a>00231         <span class="keywordtype">void</span> operator delete(<span class="keywordtype">void</span>*);
<a name="l00232"></a>00232 };
<a name="l00233"></a>00233 
<a name="l00234"></a>00234 }<span class="comment">//~namespace ting</span>
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="Ptr_8hpp.htm">Ptr.hpp</a>      </li>

    <li class="footer">Generated on Thu Feb 21 2013 20:36:35 for libting by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
