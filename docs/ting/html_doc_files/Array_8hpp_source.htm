<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>libting: Array.hpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">libting
   &#160;<span id="projectnumber">2.0.0</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.htm"><span>File&#160;List</span></a></li>
      <li><a href="globals.htm"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('Array_8hpp.htm','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">Array.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="Array_8hpp.htm">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* The MIT License:</span>
<a name="l00002"></a>00002 <span class="comment"></span>
<a name="l00003"></a>00003 <span class="comment">Copyright (c) 2008-2012 Ivan Gagis &lt;igagis@gmail.com&gt;</span>
<a name="l00004"></a>00004 <span class="comment"></span>
<a name="l00005"></a>00005 <span class="comment">Permission is hereby granted, free of charge, to any person obtaining a copy</span>
<a name="l00006"></a>00006 <span class="comment">of this software and associated documentation files (the &quot;Software&quot;), to deal</span>
<a name="l00007"></a>00007 <span class="comment">in the Software without restriction, including without limitation the rights</span>
<a name="l00008"></a>00008 <span class="comment">to use, copy, modify, merge, publish, distribute, sublicense, and/or sell</span>
<a name="l00009"></a>00009 <span class="comment">copies of the Software, and to permit persons to whom the Software is</span>
<a name="l00010"></a>00010 <span class="comment">furnished to do so, subject to the following conditions:</span>
<a name="l00011"></a>00011 <span class="comment"></span>
<a name="l00012"></a>00012 <span class="comment">The above copyright notice and this permission notice shall be included in</span>
<a name="l00013"></a>00013 <span class="comment">all copies or substantial portions of the Software.</span>
<a name="l00014"></a>00014 <span class="comment"></span>
<a name="l00015"></a>00015 <span class="comment">THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span>
<a name="l00016"></a>00016 <span class="comment">IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span>
<a name="l00017"></a>00017 <span class="comment">FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span>
<a name="l00018"></a>00018 <span class="comment">AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span>
<a name="l00019"></a>00019 <span class="comment">LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span>
<a name="l00020"></a>00020 <span class="comment">OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN</span>
<a name="l00021"></a>00021 <span class="comment">THE SOFTWARE. */</span>
<a name="l00022"></a>00022 
<a name="l00023"></a>00023 <span class="comment">// Home page: http://ting.googlecode.com</span>
<a name="l00024"></a>00024 
<a name="l00025"></a>00025 
<a name="l00026"></a>00026 
<a name="l00034"></a>00034 <span class="preprocessor">#pragma once</span>
<a name="l00035"></a>00035 <span class="preprocessor"></span>
<a name="l00036"></a>00036 <span class="comment">//#define M_ENABLE_ARRAY_PRINT</span>
<a name="l00037"></a>00037 <span class="preprocessor">#ifdef M_ENABLE_ARRAY_PRINT </span>
<a name="l00038"></a>00038 <span class="preprocessor"></span><span class="preprocessor">#define M_ARRAY_PRINT(x) LOG(x)</span>
<a name="l00039"></a>00039 <span class="preprocessor"></span><span class="preprocessor">#else</span>
<a name="l00040"></a><a class="code" href="Array_8hpp.htm#a7876c4dedc5f900af3c6cb1911818773">00040</a> <span class="preprocessor"></span><span class="preprocessor">#define M_ARRAY_PRINT(x)</span>
<a name="l00041"></a>00041 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00042"></a>00042 <span class="preprocessor"></span>
<a name="l00043"></a>00043 <span class="preprocessor">#include &quot;<a class="code" href="debug_8hpp.htm">debug.hpp</a>&quot;</span>
<a name="l00044"></a>00044 <span class="preprocessor">#include &quot;<a class="code" href="types_8hpp.htm" title="General types definitions.">types.hpp</a>&quot;</span>
<a name="l00045"></a>00045 <span class="preprocessor">#include &quot;<a class="code" href="Buffer_8hpp.htm">Buffer.hpp</a>&quot;</span>
<a name="l00046"></a>00046 <span class="preprocessor">#include &quot;<a class="code" href="math_8hpp.htm" title="Math utilities.">math.hpp</a>&quot;</span>
<a name="l00047"></a>00047 
<a name="l00048"></a><a class="code" href="namespaceting.htm">00048</a> <span class="keyword">namespace </span>ting{
<a name="l00049"></a>00049 
<a name="l00050"></a>00050 
<a name="l00059"></a><a class="code" href="classting_1_1Array.htm">00059</a> <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt; <span class="keyword">class </span><a class="code" href="classting_1_1Array.htm" title="wrapper above new[]/delete[].">Array</a> : <span class="keyword">public</span> ting::<a class="code" href="classting_1_1Buffer.htm" title="Memory buffer wrapper template class.">Buffer</a>&lt;T&gt;{
<a name="l00060"></a>00060 
<a name="l00061"></a>00061         <span class="keyword">inline</span> <span class="keywordtype">void</span> AllocateMemory(<span class="keywordtype">size_t</span> arraySize){
<a name="l00062"></a>00062                 <span class="keywordflow">if</span>(arraySize == 0){
<a name="l00063"></a>00063                         this-&gt;<a class="code" href="classting_1_1Buffer.htm#a75d5caa8c67957c1dced20694bf9ebbf">size</a> = 0;
<a name="l00064"></a>00064                         this-&gt;<a class="code" href="classting_1_1Buffer.htm#ae13b3c27ddb6755a2f5a74785dbc01e8">buf</a> = 0;
<a name="l00065"></a>00065                         <span class="keywordflow">return</span>;
<a name="l00066"></a>00066                 }
<a name="l00067"></a>00067 
<a name="l00068"></a>00068                 <a class="code" href="namespaceting.htm#a2debe052f64b3825ad3e8e3ee1861e66" title="Unsigned 8 bit type.">ting::u8</a> *buffer = <span class="keyword">new</span> <a class="code" href="namespaceting.htm#a2debe052f64b3825ad3e8e3ee1861e66" title="Unsigned 8 bit type.">ting::u8</a>[arraySize * <span class="keyword">sizeof</span>(T)];
<a name="l00069"></a>00069                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(buffer)
<a name="l00070"></a>00070 
<a name="l00071"></a>00071                 this-&gt;<a class="code" href="classting_1_1Buffer.htm#ae13b3c27ddb6755a2f5a74785dbc01e8">buf</a> = <span class="keyword">reinterpret_cast&lt;</span>T*<span class="keyword">&gt;</span>(buffer);
<a name="l00072"></a>00072                 this-&gt;<a class="code" href="classting_1_1Buffer.htm#a75d5caa8c67957c1dced20694bf9ebbf">size</a> = arraySize;
<a name="l00073"></a>00073 
<a name="l00074"></a>00074                 <span class="comment">//check for strict aliasing</span>
<a name="l00075"></a>00075                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(this-&gt;buf)
<a name="l00076"></a>00076                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(reinterpret_cast&lt;const void*&gt;(this-&gt;buf) == buffer)
<a name="l00077"></a>00077         }
<a name="l00078"></a>00078 
<a name="l00079"></a>00079         <span class="keyword">inline</span> <span class="keywordtype">void</span> InitObjectsByDefaultConstructor(){
<a name="l00080"></a>00080                 <span class="keywordflow">for</span>(T* p = this-&gt;<a class="code" href="classting_1_1Buffer.htm#a594bc8aad83c33c9442d48a4a5cda49c" title="get pointer to first element of the buffer.">Begin</a>(); p != this-&gt;<a class="code" href="classting_1_1Buffer.htm#a3020030e107f4e8025c533cdb767e5e1" title="get pointer to &quot;after last&quot; element of the buffer.">End</a>(); ++p){
<a name="l00081"></a>00081                         <span class="keywordflow">try</span>{
<a name="l00082"></a>00082                                 <span class="keyword">new</span> (<span class="keyword">const_cast&lt;</span><span class="keywordtype">void</span>*<span class="keyword">&gt;</span>(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">void</span>*<span class="keyword">&gt;</span>(p))) T();
<a name="l00083"></a>00083                         }<span class="keywordflow">catch</span>(...){
<a name="l00084"></a>00084                                 <span class="comment">//exception thrown from one of the objects constructor,</span>
<a name="l00085"></a>00085                                 <span class="comment">//destroy all previously created objects.</span>
<a name="l00086"></a>00086                                 <span class="keywordflow">for</span>(T* k = this-&gt;<a class="code" href="classting_1_1Buffer.htm#a594bc8aad83c33c9442d48a4a5cda49c" title="get pointer to first element of the buffer.">Begin</a>(); k != p; ++k){
<a name="l00087"></a>00087                                         k-&gt;~T();
<a name="l00088"></a>00088                                 }
<a name="l00089"></a>00089                                 <span class="keywordflow">throw</span>;<span class="comment">//rethrow exception</span>
<a name="l00090"></a>00090                         }
<a name="l00091"></a>00091                 }
<a name="l00092"></a>00092         }
<a name="l00093"></a>00093 
<a name="l00094"></a>00094         <span class="keyword">inline</span> <span class="keywordtype">void</span> InitObjectsByCopyConstructor(<span class="keyword">const</span> <a class="code" href="classting_1_1Buffer.htm" title="Memory buffer wrapper template class.">ting::Buffer&lt;const T&gt;</a>&amp; buffer){
<a name="l00095"></a>00095                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(this-&gt;<a class="code" href="classting_1_1Buffer.htm#ad7c1abf3c373b47f463f2bca7785172e" title="get buffer size.">Size</a>() == buffer.<a class="code" href="classting_1_1Buffer.htm#ad7c1abf3c373b47f463f2bca7785172e" title="get buffer size.">Size</a>())
<a name="l00096"></a>00096                 <span class="keyword">const</span> T* s = buffer.<a class="code" href="classting_1_1Buffer.htm#a594bc8aad83c33c9442d48a4a5cda49c" title="get pointer to first element of the buffer.">Begin</a>();
<a name="l00097"></a>00097                 <span class="keywordflow">for</span>(T* p = this-&gt;<a class="code" href="classting_1_1Buffer.htm#a594bc8aad83c33c9442d48a4a5cda49c" title="get pointer to first element of the buffer.">Begin</a>(); p != this-&gt;<a class="code" href="classting_1_1Buffer.htm#a3020030e107f4e8025c533cdb767e5e1" title="get pointer to &quot;after last&quot; element of the buffer.">End</a>(); ++p, ++s){
<a name="l00098"></a>00098                         <span class="keywordflow">try</span>{
<a name="l00099"></a>00099                                 <span class="keyword">new</span> (p) T(*s);
<a name="l00100"></a>00100                         }<span class="keywordflow">catch</span>(...){
<a name="l00101"></a>00101                                 <span class="comment">//exception thrown from one of the objects copy constructor,</span>
<a name="l00102"></a>00102                                 <span class="comment">//destroy all previously created objects.</span>
<a name="l00103"></a>00103                                 <span class="keywordflow">for</span>(T* k = this-&gt;<a class="code" href="classting_1_1Buffer.htm#a594bc8aad83c33c9442d48a4a5cda49c" title="get pointer to first element of the buffer.">Begin</a>(); k != p; ++k){
<a name="l00104"></a>00104                                         k-&gt;~T();
<a name="l00105"></a>00105                                 }
<a name="l00106"></a>00106                                 <span class="keywordflow">throw</span>;<span class="comment">//rethrow exception</span>
<a name="l00107"></a>00107                         }
<a name="l00108"></a>00108                 }
<a name="l00109"></a>00109         }
<a name="l00110"></a>00110 
<a name="l00111"></a>00111         <span class="keyword">inline</span> <span class="keywordtype">void</span> DestroyObjects()<span class="keywordflow">throw</span>(){
<a name="l00112"></a>00112                 <span class="keywordflow">for</span>(T* p = &amp;this-&gt;<a class="code" href="classting_1_1Buffer.htm#ae13b3c27ddb6755a2f5a74785dbc01e8">buf</a>[0]; p != &amp;this-&gt;<a class="code" href="classting_1_1Buffer.htm#ae13b3c27ddb6755a2f5a74785dbc01e8">buf</a>[this-&gt;<a class="code" href="classting_1_1Buffer.htm#a75d5caa8c67957c1dced20694bf9ebbf">size</a>]; ++p){
<a name="l00113"></a>00113                         p-&gt;~T();
<a name="l00114"></a>00114                 }
<a name="l00115"></a>00115         }
<a name="l00116"></a>00116 
<a name="l00117"></a>00117         <span class="keyword">inline</span> <span class="keywordtype">void</span> FreeMemory()<span class="keywordflow">throw</span>(){
<a name="l00118"></a>00118                 <a class="code" href="namespaceting.htm#a2debe052f64b3825ad3e8e3ee1861e66" title="Unsigned 8 bit type.">ting::u8</a> *buffer = <span class="keyword">const_cast&lt;</span><a class="code" href="namespaceting.htm#a2debe052f64b3825ad3e8e3ee1861e66" title="Unsigned 8 bit type.">ting::u8</a>*<span class="keyword">&gt;</span>(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><a class="code" href="namespaceting.htm#a2debe052f64b3825ad3e8e3ee1861e66" title="Unsigned 8 bit type.">ting::u8</a>*<span class="keyword">&gt;</span>(this-&gt;<a class="code" href="classting_1_1Buffer.htm#ae13b3c27ddb6755a2f5a74785dbc01e8">buf</a>));
<a name="l00119"></a>00119 
<a name="l00120"></a>00120                 <span class="comment">//check for strict aliasing</span>
<a name="l00121"></a>00121                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(reinterpret_cast&lt;const void*&gt;(this-&gt;<a class="code" href="classting_1_1Buffer.htm#ae13b3c27ddb6755a2f5a74785dbc01e8">buf</a>) == buffer)
<a name="l00122"></a>00122 
<a name="l00123"></a>00123                 <span class="keyword">delete</span>[] buffer;<span class="comment">//It is ok to delete 0 pointer</span>
<a name="l00124"></a>00124         }
<a name="l00125"></a>00125 
<a name="l00126"></a>00126 
<a name="l00127"></a>00127 
<a name="l00128"></a>00128         <span class="keyword">inline</span> <span class="keywordtype">void</span> Destroy()<span class="keywordflow">throw</span>(){
<a name="l00129"></a>00129                 this-&gt;DestroyObjects();
<a name="l00130"></a>00130                 this-&gt;FreeMemory();
<a name="l00131"></a>00131         }
<a name="l00132"></a>00132 
<a name="l00133"></a>00133 
<a name="l00134"></a>00134 
<a name="l00135"></a>00135 <span class="keyword">public</span>:
<a name="l00145"></a>00145         <span class="comment">//NOTE: the constructor is explicit to avoid undesired automatic</span>
<a name="l00146"></a>00146         <span class="comment">//conversions from size_t to Array.</span>
<a name="l00147"></a><a class="code" href="classting_1_1Array.htm#a59d6fb021f80eda23043baafc2f0bf58">00147</a>         <span class="keyword">explicit</span> <span class="keyword">inline</span> <a class="code" href="classting_1_1Array.htm#a59d6fb021f80eda23043baafc2f0bf58" title="Creates new array of requested size.">Array</a>(<span class="keywordtype">size_t</span> arraySize = 0){
<a name="l00148"></a>00148                 this-&gt;AllocateMemory(arraySize);
<a name="l00149"></a>00149                 <span class="keywordflow">try</span>{
<a name="l00150"></a>00150                         this-&gt;InitObjectsByDefaultConstructor();
<a name="l00151"></a>00151                 }<span class="keywordflow">catch</span>(...){
<a name="l00152"></a>00152                         this-&gt;FreeMemory();
<a name="l00153"></a>00153                         <span class="keywordflow">throw</span>;
<a name="l00154"></a>00154                 }
<a name="l00155"></a>00155         }
<a name="l00156"></a>00156 
<a name="l00157"></a>00157 
<a name="l00158"></a>00158 
<a name="l00167"></a>00167         <span class="comment">//NOTE: the constructor is explicit to avoid possible ambiguities.</span>
<a name="l00168"></a><a class="code" href="classting_1_1Array.htm#aa680aec4c34b15f37e90a1aa12205b26">00168</a>         <span class="keyword">explicit</span> <span class="keyword">inline</span> <a class="code" href="classting_1_1Array.htm#aa680aec4c34b15f37e90a1aa12205b26" title="Creates new Array containing copy of given buffer contents.">Array</a>(<span class="keyword">const</span> <a class="code" href="classting_1_1Buffer.htm" title="Memory buffer wrapper template class.">ting::Buffer&lt;const T&gt;</a>&amp; b){
<a name="l00169"></a>00169                 this-&gt;AllocateMemory(b.<a class="code" href="classting_1_1Buffer.htm#ad7c1abf3c373b47f463f2bca7785172e" title="get buffer size.">Size</a>());
<a name="l00170"></a>00170                 <span class="keywordflow">try</span>{
<a name="l00171"></a>00171                         this-&gt;InitObjectsByCopyConstructor(b);
<a name="l00172"></a>00172                 }<span class="keywordflow">catch</span>(...){
<a name="l00173"></a>00173                         this-&gt;FreeMemory();
<a name="l00174"></a>00174                         <span class="keywordflow">throw</span>;
<a name="l00175"></a>00175                 }
<a name="l00176"></a>00176         }
<a name="l00177"></a>00177 
<a name="l00178"></a>00178 
<a name="l00179"></a>00179 
<a name="l00180"></a>00180 <span class="keyword">private</span>:
<a name="l00181"></a>00181         <span class="keyword">inline</span> <span class="keywordtype">void</span> CopyFrom(<span class="keyword">const</span> <a class="code" href="classting_1_1Array.htm" title="wrapper above new[]/delete[].">Array</a>&amp; a){
<a name="l00182"></a>00182                 this-&gt;<a class="code" href="classting_1_1Buffer.htm#a75d5caa8c67957c1dced20694bf9ebbf">size</a> = a.<a class="code" href="classting_1_1Buffer.htm#a75d5caa8c67957c1dced20694bf9ebbf">size</a>;
<a name="l00183"></a>00183                 this-&gt;<a class="code" href="classting_1_1Buffer.htm#ae13b3c27ddb6755a2f5a74785dbc01e8">buf</a> = a.<a class="code" href="classting_1_1Buffer.htm#ae13b3c27ddb6755a2f5a74785dbc01e8">buf</a>;
<a name="l00184"></a>00184                 <span class="keyword">const_cast&lt;</span><a class="code" href="classting_1_1Array.htm" title="wrapper above new[]/delete[].">Array</a>&amp;<span class="keyword">&gt;</span>(a).<a class="code" href="classting_1_1Buffer.htm#a75d5caa8c67957c1dced20694bf9ebbf">size</a> = 0;
<a name="l00185"></a>00185                 <span class="keyword">const_cast&lt;</span><a class="code" href="classting_1_1Array.htm" title="wrapper above new[]/delete[].">Array</a>&amp;<span class="keyword">&gt;</span>(a).<a class="code" href="classting_1_1Buffer.htm#ae13b3c27ddb6755a2f5a74785dbc01e8">buf</a> = 0;
<a name="l00186"></a>00186         }
<a name="l00187"></a>00187 
<a name="l00188"></a>00188 
<a name="l00189"></a>00189 
<a name="l00190"></a>00190 <span class="keyword">public</span>:
<a name="l00203"></a>00203         <span class="comment">//copy constructor</span>
<a name="l00204"></a><a class="code" href="classting_1_1Array.htm#a5844d7598a08f66ee96bb2ae2f79f4c6">00204</a>         <span class="keyword">inline</span> <a class="code" href="classting_1_1Array.htm#a59d6fb021f80eda23043baafc2f0bf58" title="Creates new array of requested size.">Array</a>(<span class="keyword">const</span> <a class="code" href="classting_1_1Array.htm" title="wrapper above new[]/delete[].">Array</a>&amp; a) :
<a name="l00205"></a>00205                         ting::<a class="code" href="classting_1_1Buffer.htm" title="Memory buffer wrapper template class.">Buffer</a>&lt;T&gt;()
<a name="l00206"></a>00206         {
<a name="l00207"></a>00207                 this-&gt;CopyFrom(a);
<a name="l00208"></a>00208         }
<a name="l00209"></a>00209 
<a name="l00210"></a>00210 
<a name="l00211"></a>00211 
<a name="l00224"></a><a class="code" href="classting_1_1Array.htm#ab8a7736487146584c1628a4540395d48">00224</a>         <span class="keyword">inline</span> <a class="code" href="classting_1_1Array.htm" title="wrapper above new[]/delete[].">Array</a>&amp; <a class="code" href="classting_1_1Array.htm#ab8a7736487146584c1628a4540395d48" title="Assignment operator, works as auto-pointer.">operator=</a>(<span class="keyword">const</span> <a class="code" href="classting_1_1Array.htm" title="wrapper above new[]/delete[].">Array</a>&amp; a){
<a name="l00225"></a>00225                 <span class="comment">//behavior similar to ting::Ptr class</span>
<a name="l00226"></a>00226                 this-&gt;Destroy();
<a name="l00227"></a>00227                 this-&gt;CopyFrom(a);
<a name="l00228"></a>00228                 <span class="keywordflow">return</span> (*<span class="keyword">this</span>);
<a name="l00229"></a>00229         }
<a name="l00230"></a>00230 
<a name="l00231"></a>00231 
<a name="l00232"></a>00232 
<a name="l00233"></a><a class="code" href="classting_1_1Array.htm#a55327acb2f0bbc8107dfec172bae388a">00233</a>         <a class="code" href="classting_1_1Array.htm#a55327acb2f0bbc8107dfec172bae388a">~Array</a>()throw(){
<a name="l00234"></a>00234                 <a class="code" href="Array_8hpp.htm#a7876c4dedc5f900af3c6cb1911818773">M_ARRAY_PRINT</a>(&lt;&lt; <span class="stringliteral">&quot;Array::~Array(): invoked&quot;</span> &lt;&lt; std::endl)
<a name="l00235"></a>00235                 this-&gt;Destroy();
<a name="l00236"></a>00236                 <a class="code" href="Array_8hpp.htm#a7876c4dedc5f900af3c6cb1911818773">M_ARRAY_PRINT</a>(&lt;&lt; <span class="stringliteral">&quot;Array::~Array(): exit&quot;</span> &lt;&lt; std::endl)
<a name="l00237"></a>00237         }
<a name="l00238"></a>00238 
<a name="l00239"></a>00239 
<a name="l00240"></a>00240 
<a name="l00248"></a><a class="code" href="classting_1_1Array.htm#a8c88d053dd3a56f09459ed3b5a87beaf">00248</a>         <span class="keywordtype">void</span> <a class="code" href="classting_1_1Array.htm#a8c88d053dd3a56f09459ed3b5a87beaf" title="initialize array with new memory buffer of given size.">Init</a>(<span class="keywordtype">size_t</span> arraySize){
<a name="l00249"></a>00249                 <a class="code" href="Array_8hpp.htm#a7876c4dedc5f900af3c6cb1911818773">M_ARRAY_PRINT</a>(&lt;&lt; <span class="stringliteral">&quot;Array::Init(): buf = &quot;</span> &lt;&lt; static_cast&lt;void*&gt;(this-&gt;<a class="code" href="classting_1_1Buffer.htm#ae13b3c27ddb6755a2f5a74785dbc01e8">buf</a>) &lt;&lt; std::endl)
<a name="l00250"></a>00250                 this-&gt;Destroy();
<a name="l00251"></a>00251                 this-&gt;AllocateMemory(arraySize);
<a name="l00252"></a>00252                 <span class="keywordflow">try</span>{
<a name="l00253"></a>00253                         this-&gt;InitObjectsByDefaultConstructor();
<a name="l00254"></a>00254                 }<span class="keywordflow">catch</span>(...){
<a name="l00255"></a>00255                         this-&gt;FreeMemory();
<a name="l00256"></a>00256                         this-&gt;<a class="code" href="classting_1_1Buffer.htm#ae13b3c27ddb6755a2f5a74785dbc01e8">buf</a> = 0;
<a name="l00257"></a>00257                         this-&gt;<a class="code" href="classting_1_1Buffer.htm#a75d5caa8c67957c1dced20694bf9ebbf">size</a> = 0;
<a name="l00258"></a>00258                         <span class="keywordflow">throw</span>;
<a name="l00259"></a>00259                 }
<a name="l00260"></a>00260         }
<a name="l00261"></a>00261 
<a name="l00262"></a>00262 
<a name="l00263"></a>00263 
<a name="l00271"></a><a class="code" href="classting_1_1Array.htm#a9471911a8950fb7ee557ca272608868f">00271</a>         <span class="keywordtype">void</span> <a class="code" href="classting_1_1Array.htm#a9471911a8950fb7ee557ca272608868f" title="initialize array with the copy of given buffer contents.">Init</a>(<span class="keyword">const</span> <a class="code" href="classting_1_1Buffer.htm" title="Memory buffer wrapper template class.">ting::Buffer&lt;const T&gt;</a>&amp; b){
<a name="l00272"></a>00272                 this-&gt;Destroy();
<a name="l00273"></a>00273                 this-&gt;AllocateMemory(b.<a class="code" href="classting_1_1Buffer.htm#ad7c1abf3c373b47f463f2bca7785172e" title="get buffer size.">Size</a>());
<a name="l00274"></a>00274                 <span class="keywordflow">try</span>{
<a name="l00275"></a>00275                         this-&gt;InitObjectsByCopyConstructor(b);
<a name="l00276"></a>00276                 }<span class="keywordflow">catch</span>(...){
<a name="l00277"></a>00277                         this-&gt;FreeMemory();
<a name="l00278"></a>00278                         this-&gt;<a class="code" href="classting_1_1Buffer.htm#ae13b3c27ddb6755a2f5a74785dbc01e8">buf</a> = 0;
<a name="l00279"></a>00279                         this-&gt;<a class="code" href="classting_1_1Buffer.htm#a75d5caa8c67957c1dced20694bf9ebbf">size</a> = 0;
<a name="l00280"></a>00280                         <span class="keywordflow">throw</span>;
<a name="l00281"></a>00281                 }
<a name="l00282"></a>00282         }
<a name="l00283"></a>00283 
<a name="l00284"></a>00284 
<a name="l00285"></a>00285 
<a name="l00291"></a><a class="code" href="classting_1_1Array.htm#a17b530cca6e388418cdd35b70ff6745e">00291</a>         <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="classting_1_1Array.htm#a17b530cca6e388418cdd35b70ff6745e" title="returns true if Array is allocated.">IsValid</a>()<span class="keyword">const</span> throw(){
<a name="l00292"></a>00292                 <span class="keywordflow">return</span> this-&gt;<a class="code" href="classting_1_1Buffer.htm#ae13b3c27ddb6755a2f5a74785dbc01e8">buf</a> != 0;
<a name="l00293"></a>00293         }
<a name="l00294"></a>00294 
<a name="l00295"></a>00295 
<a name="l00296"></a>00296 
<a name="l00303"></a><a class="code" href="classting_1_1Array.htm#ac597495916260174e6270e64ac80b3ca">00303</a>         <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="classting_1_1Array.htm#ac597495916260174e6270e64ac80b3ca" title="inverse of Array::IsValid().">IsNotValid</a>()<span class="keyword">const</span> throw(){
<a name="l00304"></a>00304                 <span class="keywordflow">return</span> !this-&gt;<a class="code" href="classting_1_1Array.htm#a17b530cca6e388418cdd35b70ff6745e" title="returns true if Array is allocated.">IsValid</a>();
<a name="l00305"></a>00305         }
<a name="l00306"></a>00306 
<a name="l00307"></a>00307 
<a name="l00308"></a>00308 
<a name="l00313"></a>00313         <span class="comment">//Safe conversion to bool type.</span>
<a name="l00314"></a>00314         <span class="comment">//Because if using simple &quot;operator bool()&quot; it may result in chained automatic</span>
<a name="l00315"></a>00315         <span class="comment">//conversion to undesired types such as int.</span>
<a name="l00316"></a><a class="code" href="classting_1_1Array.htm#a6c9a3f282f637bb6e5585a1730dd66d4">00316</a>         <span class="keyword">typedef</span> void (<a class="code" href="classting_1_1Array.htm" title="wrapper above new[]/delete[].">Array</a>::*<a class="code" href="classting_1_1Array.htm#a6c9a3f282f637bb6e5585a1730dd66d4" title="Converts to bool.">unspecified_bool_type</a>)();
<a name="l00317"></a><a class="code" href="classting_1_1Array.htm#aea00020fe243702f4247594e569e7d8a">00317</a>         <span class="keyword">inline</span> <a class="code" href="classting_1_1Array.htm#aea00020fe243702f4247594e569e7d8a">operator unspecified_bool_type</a>()<span class="keyword">const</span>{
<a name="l00318"></a>00318                 <span class="keywordflow">return</span> this-&gt;<a class="code" href="classting_1_1Array.htm#a17b530cca6e388418cdd35b70ff6745e" title="returns true if Array is allocated.">IsValid</a>() ? &amp;<a class="code" href="classting_1_1Array.htm#ab15fdd2519ca706d00ab9222982f6c3b" title="free array memory buffer.">Array::Reset</a> : 0; <span class="comment">//Array::Reset is taken just because it has matching signature</span>
<a name="l00319"></a>00319         }
<a name="l00320"></a>00320 
<a name="l00321"></a>00321 
<a name="l00322"></a>00322 
<a name="l00328"></a><a class="code" href="classting_1_1Array.htm#ab15fdd2519ca706d00ab9222982f6c3b">00328</a>         <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classting_1_1Array.htm#ab15fdd2519ca706d00ab9222982f6c3b" title="free array memory buffer.">Reset</a>()throw(){
<a name="l00329"></a>00329                 this-&gt;Destroy();
<a name="l00330"></a>00330                 this-&gt;<a class="code" href="classting_1_1Buffer.htm#ae13b3c27ddb6755a2f5a74785dbc01e8">buf</a> = 0;
<a name="l00331"></a>00331                 this-&gt;<a class="code" href="classting_1_1Buffer.htm#a75d5caa8c67957c1dced20694bf9ebbf">size</a> = 0;
<a name="l00332"></a>00332         }
<a name="l00333"></a>00333         
<a name="l00334"></a>00334         
<a name="l00335"></a>00335         
<a name="l00336"></a><a class="code" href="classting_1_1Array.htm#a93c9db9fec1cc7fab6dda8c435863098">00336</a>         <span class="keyword">inline</span> <a class="code" href="classting_1_1Array.htm#a93c9db9fec1cc7fab6dda8c435863098">operator const Array&lt;const T&gt;&amp; </a>()<span class="keyword">const</span> throw(){
<a name="l00337"></a>00337                 <span class="keywordflow">return</span> *<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><a class="code" href="classting_1_1Array.htm" title="wrapper above new[]/delete[].">Array&lt;const T&gt;</a>* <span class="keyword">&gt;</span>(<span class="keyword">this</span>);
<a name="l00338"></a>00338         }
<a name="l00339"></a>00339         
<a name="l00340"></a>00340 };<span class="comment">//~template class Array</span>
<a name="l00341"></a>00341 
<a name="l00342"></a>00342 }<span class="comment">//~namespace ting</span>
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="Array_8hpp.htm">Array.hpp</a>      </li>

    <li class="footer">Generated on Thu Feb 21 2013 20:36:35 for libting by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
