<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>libting: ting::Inited&lt; T, V &gt; Class Template Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">libting
   &#160;<span id="projectnumber">2.0.0</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.htm"><span>Classes</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.htm"><span>Class&#160;List</span></a></li>
      <li><a href="classes.htm"><span>Class&#160;Index</span></a></li>
      <li><a href="hierarchy.htm"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.htm"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('classting_1_1Inited.htm','');
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">ting::Inited&lt; T, V &gt; Class Template Reference</div>  </div>
</div><!--header-->
<div class="contents">
<!-- doxytag: class="ting::Inited" -->
<p>Thin wrapper above any C++ built-in type allowing initialization from int.  
 <a href="classting_1_1Inited.htm#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="types_8hpp_source.htm">types.hpp</a>&gt;</code></p>

<p><a href="classting_1_1Inited-members.htm">List of all members.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1Inited.htm#a2ebc186c5100a6f207832b6b5e03d900">Inited</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1Inited.htm#a226c83be0260abb9e57f2331f59836e1">Inited</a> (T value)</td></tr>
<tr><td class="memTemplParams" colspan="2">template&lt;class T2 , int K&gt; </td></tr>
<tr><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classting_1_1Inited.htm">Inited</a>&lt; T, V &gt; &amp;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classting_1_1Inited.htm#a2912f0293a6ab2dbab3402c303774af1">operator=</a> (const <a class="el" href="classting_1_1Inited.htm">Inited</a>&lt; T2, K &gt; &amp;inited) const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classting_1_1Inited.htm">Inited</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1Inited.htm#ac71e9c052612dd290ebf3c921c954b72">operator=</a> (const <a class="el" href="classting_1_1Inited.htm">Inited</a> &amp;inited) const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1Inited.htm#a18824b2dfbf69686d2145298e6ff78bd">operator T &amp;</a> () const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">T&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1Inited.htm#a3c5e9d0be0be55c8978020d82e9ec6cf">operator-&gt;</a> () const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">T *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1Inited.htm#afa2182b085d7fa85d253fa2aeab68e65">operator&amp;</a> () const </td></tr>
</table>
<hr/><a name="details" id="details"></a><h2>Detailed Description</h2>
<div class="textblock"><h3>template&lt;class T, int V = 0&gt;<br/>
class ting::Inited&lt; T, V &gt;</h3>

<p>Thin wrapper above any C++ built-in type allowing initialization from int. </p>
<p>Thin wrapper above any C++ built-in type which allows initialization from C++ int type. This wrapper allows initialize the variable to some int value right in place of declaration. This is useful when declaring class members, so you can indicate to which value the variable should be initialized without using constructor initialization list or assigning the value in the constructor body. Auto-conversions to/from the original type are supported. Note, that in order to wrap const value to <a class="el" href="classting_1_1Inited.htm" title="Thin wrapper above any C++ built-in type allowing initialization from int.">Inited</a> one has to use const qualifier to a template argument, not to the whole <a class="el" href="classting_1_1Inited.htm" title="Thin wrapper above any C++ built-in type allowing initialization from int.">Inited</a> class. Const qualifier to the whole <a class="el" href="classting_1_1Inited.htm" title="Thin wrapper above any C++ built-in type allowing initialization from int.">Inited</a> class has no any effect.</p>
<p>Typical usage: </p>
<div class="fragment"><pre class="fragment"><span class="preprocessor"> #include &lt;<a class="code" href="types_8hpp.htm" title="General types definitions.">ting/types.hpp</a>&gt;</span>

 <span class="comment">//...</span>

 <span class="keyword">class </span>SampleClass{
 <span class="keyword">public</span>:
     <a class="code" href="classting_1_1Inited.htm" title="Thin wrapper above any C++ built-in type allowing initialization from int.">ting::Inited&lt;float, 0&gt;</a> x; <span class="comment">//initialized to 0 upon object construction</span>
     <a class="code" href="classting_1_1Inited.htm" title="Thin wrapper above any C++ built-in type allowing initialization from int.">ting::Inited</a>&lt;float, -10&gt; y; <span class="comment">//initialized to -10 upon object construction</span>
     <a class="code" href="classting_1_1Inited.htm" title="Thin wrapper above any C++ built-in type allowing initialization from int.">ting::Inited&lt;const float, 10&gt;</a> width; <span class="comment">//constant value initialized to 10 upon object construction</span>
     <a class="code" href="classting_1_1Inited.htm" title="Thin wrapper above any C++ built-in type allowing initialization from int.">ting::Inited&lt;float, 20&gt;</a> height; <span class="comment">//initialized to 20 upon object construction</span>
     <a class="code" href="classting_1_1Inited.htm">ting::Inited&lt;bool, false&gt;</a> visible; <span class="comment">//bool variable initialized to false</span>
     <a class="code" href="classting_1_1Inited.htm" title="Thin wrapper above any C++ built-in type allowing initialization from int.">ting::Inited&lt;volatile bool, true&gt;</a> someFlag; <span class="comment">//volatile bool variable initialized to true</span>
     <span class="keyword">const</span> <a class="code" href="classting_1_1Inited.htm" title="Thin wrapper above any C++ built-in type allowing initialization from int.">ting::Inited&lt;int, 20&gt;</a> nonConstValue; <span class="comment">//non-constant value initialized to 20. const outside of template eargument has no any effect.</span>
 }
</pre></div> </div><hr/><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="a2ebc186c5100a6f207832b6b5e03d900"></a><!-- doxytag: member="ting::Inited::Inited" ref="a2ebc186c5100a6f207832b6b5e03d900" args="()" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, int V = 0&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classting_1_1Inited.htm">ting::Inited</a>&lt; T, V &gt;::<a class="el" href="classting_1_1Inited.htm">Inited</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a226c83be0260abb9e57f2331f59836e1"></a><!-- doxytag: member="ting::Inited::Inited" ref="a226c83be0260abb9e57f2331f59836e1" args="(T value)" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, int V = 0&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classting_1_1Inited.htm">ting::Inited</a>&lt; T, V &gt;::<a class="el" href="classting_1_1Inited.htm">Inited</a> </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<hr/><h2>Member Function Documentation</h2>
<a class="anchor" id="a18824b2dfbf69686d2145298e6ff78bd"></a><!-- doxytag: member="ting::Inited::operator T &amp;" ref="a18824b2dfbf69686d2145298e6ff78bd" args="() const " -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, int V = 0&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classting_1_1Inited.htm">ting::Inited</a>&lt; T, V &gt;::operator T &amp; </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="afa2182b085d7fa85d253fa2aeab68e65"></a><!-- doxytag: member="ting::Inited::operator&amp;" ref="afa2182b085d7fa85d253fa2aeab68e65" args="() const " -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, int V = 0&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T* <a class="el" href="classting_1_1Inited.htm">ting::Inited</a>&lt; T, V &gt;::operator&amp; </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a3c5e9d0be0be55c8978020d82e9ec6cf"></a><!-- doxytag: member="ting::Inited::operator&#45;&gt;" ref="a3c5e9d0be0be55c8978020d82e9ec6cf" args="() const " -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, int V = 0&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T <a class="el" href="classting_1_1Inited.htm">ting::Inited</a>&lt; T, V &gt;::operator-&gt; </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a2912f0293a6ab2dbab3402c303774af1"></a><!-- doxytag: member="ting::Inited::operator=" ref="a2912f0293a6ab2dbab3402c303774af1" args="(const Inited&lt; T2, K &gt; &amp;inited) const " -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, int V = 0&gt; </div>
<div class="memtemplate">
template&lt;class T2 , int K&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classting_1_1Inited.htm">Inited</a>&lt;T, V&gt;&amp; <a class="el" href="classting_1_1Inited.htm">ting::Inited</a>&lt; T, V &gt;::operator= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classting_1_1Inited.htm">Inited</a>&lt; T2, K &gt; &amp;&#160;</td>
          <td class="paramname"><em>inited</em></td><td>)</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="ac71e9c052612dd290ebf3c921c954b72"></a><!-- doxytag: member="ting::Inited::operator=" ref="ac71e9c052612dd290ebf3c921c954b72" args="(const Inited &amp;inited) const " -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T, int V = 0&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classting_1_1Inited.htm">Inited</a>&amp; <a class="el" href="classting_1_1Inited.htm">ting::Inited</a>&lt; T, V &gt;::operator= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classting_1_1Inited.htm">Inited</a>&lt; T, V &gt; &amp;&#160;</td>
          <td class="paramname"><em>inited</em></td><td>)</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="types_8hpp_source.htm">types.hpp</a></li>
</ul>
</div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="namespaceting.htm">ting</a>      </li>
      <li class="navelem"><a class="el" href="classting_1_1Inited.htm">Inited</a>      </li>

    <li class="footer">Generated on Thu Feb 21 2013 20:36:36 for libting by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
