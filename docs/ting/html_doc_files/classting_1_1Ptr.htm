<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>libting: ting::Ptr&lt; T &gt; Class Template Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">libting
   &#160;<span id="projectnumber">2.0.0</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.htm"><span>Classes</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.htm"><span>Class&#160;List</span></a></li>
      <li><a href="classes.htm"><span>Class&#160;Index</span></a></li>
      <li><a href="hierarchy.htm"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.htm"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('classting_1_1Ptr.htm','');
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">ting::Ptr&lt; T &gt; Class Template Reference</div>  </div>
</div><!--header-->
<div class="contents">
<!-- doxytag: class="ting::Ptr" -->
<p>Auto-pointer template class.  
 <a href="classting_1_1Ptr.htm#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="Ptr_8hpp_source.htm">Ptr.hpp</a>&gt;</code></p>

<p><a href="classting_1_1Ptr-members.htm">List of all members.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef void(Ptr::*&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1Ptr.htm#ab6da1d243d579d2be3bc79e74e96f33d">unspecified_bool_type</a> )()</td></tr>
<tr><td colspan="2"><h2><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1Ptr.htm#adbadd60de8b190c1c52702e3c1720bc9">Ptr</a> (T *ptr=0)  throw ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1Ptr.htm#a4d2dbf9638294f433604f4e807c4c562">Ptr</a> (const <a class="el" href="classting_1_1Ptr.htm">Ptr</a> &amp;ptr)  throw ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Copy constructor.  <a href="#a4d2dbf9638294f433604f4e807c4c562"></a><br/></td></tr>
<tr><td class="memTemplParams" colspan="2">template&lt;class TS &gt; </td></tr>
<tr><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classting_1_1Ptr.htm#aac884a905875390c04c29bb2b2b13146">Ptr</a> (const <a class="el" href="classting_1_1Ptr.htm">Ptr</a>&lt; TS &gt; &amp;ptr)  throw ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1Ptr.htm#aff09d31d90060f0637d87b121397ec6f">~Ptr</a> ()  throw ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">T *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1Ptr.htm#ab03e6873ae5242fd4f63ac9bd746666e">operator-&gt;</a> ()  throw ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">T *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1Ptr.htm#a9b3c7bdaa3fcef8c89ae36f6c0ac4bcd">operator-&gt;</a> () const   throw ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">T &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1Ptr.htm#a589c0fdb2ce874c44f965c92ab3cc489">operator*</a> ()  throw ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">T &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1Ptr.htm#a2043a1e5412fc5a9a0f74529ab103f76">operator*</a> () const   throw ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classting_1_1Ptr.htm">Ptr</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1Ptr.htm#a91fe2bf9e97a1c681d56fcbf66161325">operator=</a> (const <a class="el" href="classting_1_1Ptr.htm">Ptr</a> &amp;ptr)  throw ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Assignment operator.  <a href="#a91fe2bf9e97a1c681d56fcbf66161325"></a><br/></td></tr>
<tr><td class="memTemplParams" colspan="2">template&lt;class TS &gt; </td></tr>
<tr><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classting_1_1Ptr.htm">Ptr</a> &amp;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classting_1_1Ptr.htm#afd89ec286640806d2a6b1110038b761d">operator=</a> (const <a class="el" href="classting_1_1Ptr.htm">Ptr</a>&lt; TS &gt; &amp;ptr)  throw ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1Ptr.htm#a04584cc302d07cefe0ef5a1578d70c26">operator==</a> (const T *ptr) const   throw ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1Ptr.htm#ad72b71ed8d5bc7956ab575cc848aeab0">operator!=</a> (const T *ptr) const   throw ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1Ptr.htm#a5a45efa284c988413d032bcd7f510fb4">operator!</a> () const   throw ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1Ptr.htm#a7dc104bcba2508c5f298bdb38e1e3316">operator unspecified_bool_type</a> () const   throw ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">T *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1Ptr.htm#a09475dbdf1fef00081b6925f099f2354">Extract</a> ()  throw ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Extract pointer to object invalidating the <a class="el" href="classting_1_1Ptr.htm" title="Auto-pointer template class.">Ptr</a>.  <a href="#a09475dbdf1fef00081b6925f099f2354"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1Ptr.htm#a13f21387781ab82e59d53425bc5e932f">Reset</a> ()  throw ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">reset pointer, destroying object it point to.  <a href="#a13f21387781ab82e59d53425bc5e932f"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1Ptr.htm#aaea0cb8dafed57e642fd9b42865cfcca">IsValid</a> () const   throw ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tells if the pointer is valid or not.  <a href="#aaea0cb8dafed57e642fd9b42865cfcca"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1Ptr.htm#ae927807c8d41c790f38113b8c02d704a">IsNotValid</a> () const   throw ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tells if the pointer is valid or not.  <a href="#ae927807c8d41c790f38113b8c02d704a"></a><br/></td></tr>
<tr><td class="memTemplParams" colspan="2">template&lt;class TS &gt; </td></tr>
<tr><td class="memTemplItemLeft" align="right" valign="top">TS *&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classting_1_1Ptr.htm#ad324f3016fafe444a5cad6f112416ae6">StaticCast</a> ()  throw ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Static cast.  <a href="#ad324f3016fafe444a5cad6f112416ae6"></a><br/></td></tr>
</table>
<hr/><a name="details" id="details"></a><h2>Detailed Description</h2>
<div class="textblock"><h3>template&lt;class T&gt;<br/>
class ting::Ptr&lt; T &gt;</h3>

<p>Auto-pointer template class. </p>
<p>Auto-pointer class is a wrapper above ordinary pointer. It holds a pointer to an object and it will 'delete' that object when pointer goes out of scope. </p>
</div><hr/><h2>Member Typedef Documentation</h2>
<a class="anchor" id="ab6da1d243d579d2be3bc79e74e96f33d"></a><!-- doxytag: member="ting::Ptr::unspecified_bool_type" ref="ab6da1d243d579d2be3bc79e74e96f33d" args=")()" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">typedef void(Ptr::* <a class="el" href="classting_1_1Ptr.htm">ting::Ptr</a>&lt; T &gt;::<a class="el" href="classting_1_1Ptr.htm#ab6da1d243d579d2be3bc79e74e96f33d">unspecified_bool_type</a>)()</td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<hr/><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="adbadd60de8b190c1c52702e3c1720bc9"></a><!-- doxytag: member="ting::Ptr::Ptr" ref="adbadd60de8b190c1c52702e3c1720bc9" args="(T *ptr=0)" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classting_1_1Ptr.htm">ting::Ptr</a>&lt; T &gt;::<a class="el" href="classting_1_1Ptr.htm">Ptr</a> </td>
          <td>(</td>
          <td class="paramtype">T *&#160;</td>
          <td class="paramname"><em>ptr</em> = <code>0</code></td><td>)</td>
          <td>  throw ()<code> [inline, explicit]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a4d2dbf9638294f433604f4e807c4c562"></a><!-- doxytag: member="ting::Ptr::Ptr" ref="a4d2dbf9638294f433604f4e807c4c562" args="(const Ptr &amp;ptr)" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classting_1_1Ptr.htm">ting::Ptr</a>&lt; T &gt;::<a class="el" href="classting_1_1Ptr.htm">Ptr</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classting_1_1Ptr.htm">Ptr</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>ptr</em></td><td>)</td>
          <td>  throw ()<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Copy constructor. </p>
<p>Creates a copy of 'ptr' and invalidates it. This means that if creating <a class="el" href="classting_1_1Ptr.htm" title="Auto-pointer template class.">Ptr</a> object like this: Ptr&lt;SomeClass&gt; a(new SomeClass());//create pointer 'a' Ptr&lt;SomeClass&gt; b(a);//create pointer 'b' using copy constructor then 'a' will become invalid while 'b' will hold pointer to the object of class 'SomeClass' which 'a' was holding before. I.e. when using copy constructor, no memory allocation occurs, object kept by 'a' is moved to 'b' and 'a' is invalidated. </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">ptr</td><td>- pointer to copy. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="aac884a905875390c04c29bb2b2b13146"></a><!-- doxytag: member="ting::Ptr::Ptr" ref="aac884a905875390c04c29bb2b2b13146" args="(const Ptr&lt; TS &gt; &amp;ptr)" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
<div class="memtemplate">
template&lt;class TS &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classting_1_1Ptr.htm">ting::Ptr</a>&lt; T &gt;::<a class="el" href="classting_1_1Ptr.htm">Ptr</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classting_1_1Ptr.htm">Ptr</a>&lt; TS &gt; &amp;&#160;</td>
          <td class="paramname"><em>ptr</em></td><td>)</td>
          <td>  throw ()<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="aff09d31d90060f0637d87b121397ec6f"></a><!-- doxytag: member="ting::Ptr::~Ptr" ref="aff09d31d90060f0637d87b121397ec6f" args="()" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classting_1_1Ptr.htm">ting::Ptr</a>&lt; T &gt;::~<a class="el" href="classting_1_1Ptr.htm">Ptr</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td>  throw ()<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<hr/><h2>Member Function Documentation</h2>
<a class="anchor" id="a09475dbdf1fef00081b6925f099f2354"></a><!-- doxytag: member="ting::Ptr::Extract" ref="a09475dbdf1fef00081b6925f099f2354" args="()" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T* <a class="el" href="classting_1_1Ptr.htm">ting::Ptr</a>&lt; T &gt;::<a class="el" href="classting_1_1Ptr.htm#a09475dbdf1fef00081b6925f099f2354">Extract</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td>  throw ()<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Extract pointer to object invalidating the <a class="el" href="classting_1_1Ptr.htm" title="Auto-pointer template class.">Ptr</a>. </p>
<p>Extract the pointer to object from this <a class="el" href="classting_1_1Ptr.htm" title="Auto-pointer template class.">Ptr</a> instance and invalidate the <a class="el" href="classting_1_1Ptr.htm" title="Auto-pointer template class.">Ptr</a> instance. After that, when this <a class="el" href="classting_1_1Ptr.htm" title="Auto-pointer template class.">Ptr</a> instance goes out of scope the object will not be deleted because <a class="el" href="classting_1_1Ptr.htm" title="Auto-pointer template class.">Ptr</a> instance is already invalid at this point. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>pointer to object previously owned by that <a class="el" href="classting_1_1Ptr.htm" title="Auto-pointer template class.">Ptr</a> instance. </dd></dl>

</div>
</div>
<a class="anchor" id="ae927807c8d41c790f38113b8c02d704a"></a><!-- doxytag: member="ting::Ptr::IsNotValid" ref="ae927807c8d41c790f38113b8c02d704a" args="() const " -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classting_1_1Ptr.htm">ting::Ptr</a>&lt; T &gt;::<a class="el" href="classting_1_1Ptr.htm#ae927807c8d41c790f38113b8c02d704a">IsNotValid</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const  throw ()<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>tells if the pointer is valid or not. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>false if object is valid. </dd>
<dd>
true otherwise. </dd></dl>

</div>
</div>
<a class="anchor" id="aaea0cb8dafed57e642fd9b42865cfcca"></a><!-- doxytag: member="ting::Ptr::IsValid" ref="aaea0cb8dafed57e642fd9b42865cfcca" args="() const " -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classting_1_1Ptr.htm">ting::Ptr</a>&lt; T &gt;::<a class="el" href="classting_1_1Ptr.htm#aaea0cb8dafed57e642fd9b42865cfcca">IsValid</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const  throw ()<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>tells if the pointer is valid or not. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>true if pointer is valid and holding some object. </dd>
<dd>
false otherwise. </dd></dl>

</div>
</div>
<a class="anchor" id="a7dc104bcba2508c5f298bdb38e1e3316"></a><!-- doxytag: member="ting::Ptr::operator unspecified_bool_type" ref="a7dc104bcba2508c5f298bdb38e1e3316" args="() const " -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classting_1_1Ptr.htm">ting::Ptr</a>&lt; T &gt;::operator <a class="el" href="classting_1_1Ptr.htm#ab6da1d243d579d2be3bc79e74e96f33d">unspecified_bool_type</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const  throw ()<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a5a45efa284c988413d032bcd7f510fb4"></a><!-- doxytag: member="ting::Ptr::operator!" ref="a5a45efa284c988413d032bcd7f510fb4" args="() const " -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classting_1_1Ptr.htm">ting::Ptr</a>&lt; T &gt;::<a class="el" href="classting_1_1Ptr.htm#a5a45efa284c988413d032bcd7f510fb4">operator!</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const  throw ()<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="ad72b71ed8d5bc7956ab575cc848aeab0"></a><!-- doxytag: member="ting::Ptr::operator!=" ref="ad72b71ed8d5bc7956ab575cc848aeab0" args="(const T *ptr) const " -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classting_1_1Ptr.htm">ting::Ptr</a>&lt; T &gt;::<a class="el" href="classting_1_1Ptr.htm#a5a45efa284c988413d032bcd7f510fb4">operator!</a>= </td>
          <td>(</td>
          <td class="paramtype">const T *&#160;</td>
          <td class="paramname"><em>ptr</em></td><td>)</td>
          <td> const  throw ()<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a589c0fdb2ce874c44f965c92ab3cc489"></a><!-- doxytag: member="ting::Ptr::operator*" ref="a589c0fdb2ce874c44f965c92ab3cc489" args="()" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T&amp; <a class="el" href="classting_1_1Ptr.htm">ting::Ptr</a>&lt; T &gt;::operator* </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td>  throw ()<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a2043a1e5412fc5a9a0f74529ab103f76"></a><!-- doxytag: member="ting::Ptr::operator*" ref="a2043a1e5412fc5a9a0f74529ab103f76" args="() const " -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T&amp; <a class="el" href="classting_1_1Ptr.htm">ting::Ptr</a>&lt; T &gt;::operator* </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const  throw ()<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="ab03e6873ae5242fd4f63ac9bd746666e"></a><!-- doxytag: member="ting::Ptr::operator&#45;&gt;" ref="ab03e6873ae5242fd4f63ac9bd746666e" args="()" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T* <a class="el" href="classting_1_1Ptr.htm">ting::Ptr</a>&lt; T &gt;::operator-&gt; </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td>  throw ()<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a9b3c7bdaa3fcef8c89ae36f6c0ac4bcd"></a><!-- doxytag: member="ting::Ptr::operator&#45;&gt;" ref="a9b3c7bdaa3fcef8c89ae36f6c0ac4bcd" args="() const " -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T* <a class="el" href="classting_1_1Ptr.htm">ting::Ptr</a>&lt; T &gt;::operator-&gt; </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const  throw ()<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a91fe2bf9e97a1c681d56fcbf66161325"></a><!-- doxytag: member="ting::Ptr::operator=" ref="a91fe2bf9e97a1c681d56fcbf66161325" args="(const Ptr &amp;ptr)" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classting_1_1Ptr.htm">Ptr</a>&amp; <a class="el" href="classting_1_1Ptr.htm">ting::Ptr</a>&lt; T &gt;::operator= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classting_1_1Ptr.htm">Ptr</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>ptr</em></td><td>)</td>
          <td>  throw ()<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Assignment operator. </p>
<p>This operator works the same way as copy constructor does. That is, if assignng like this: Ptr&lt;SomeClass&gt; b(new SomeClass()), a(new SomeClass()); b = a; then 'a' will become invalid and 'b' will hold the object owned by 'a' before. Note, that object owned by 'b' prior to assignment is deleted. Thus, no memory leak occurs. </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">ptr</td><td>- pointer to assign from. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="afd89ec286640806d2a6b1110038b761d"></a><!-- doxytag: member="ting::Ptr::operator=" ref="afd89ec286640806d2a6b1110038b761d" args="(const Ptr&lt; TS &gt; &amp;ptr)" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
<div class="memtemplate">
template&lt;class TS &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classting_1_1Ptr.htm">Ptr</a>&amp; <a class="el" href="classting_1_1Ptr.htm">ting::Ptr</a>&lt; T &gt;::operator= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classting_1_1Ptr.htm">Ptr</a>&lt; TS &gt; &amp;&#160;</td>
          <td class="paramname"><em>ptr</em></td><td>)</td>
          <td>  throw ()<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a04584cc302d07cefe0ef5a1578d70c26"></a><!-- doxytag: member="ting::Ptr::operator==" ref="a04584cc302d07cefe0ef5a1578d70c26" args="(const T *ptr) const " -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classting_1_1Ptr.htm">ting::Ptr</a>&lt; T &gt;::operator== </td>
          <td>(</td>
          <td class="paramtype">const T *&#160;</td>
          <td class="paramname"><em>ptr</em></td><td>)</td>
          <td> const  throw ()<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a13f21387781ab82e59d53425bc5e932f"></a><!-- doxytag: member="ting::Ptr::Reset" ref="a13f21387781ab82e59d53425bc5e932f" args="()" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classting_1_1Ptr.htm">ting::Ptr</a>&lt; T &gt;::<a class="el" href="classting_1_1Ptr.htm#a13f21387781ab82e59d53425bc5e932f">Reset</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td>  throw ()<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>reset pointer, destroying object it point to. </p>
<p>This will destroy the object this pointer points to if any. After that the pointer becomes invalid. </p>

</div>
</div>
<a class="anchor" id="ad324f3016fafe444a5cad6f112416ae6"></a><!-- doxytag: member="ting::Ptr::StaticCast" ref="ad324f3016fafe444a5cad6f112416ae6" args="()" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
<div class="memtemplate">
template&lt;class TS &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">TS* <a class="el" href="classting_1_1Ptr.htm">ting::Ptr</a>&lt; T &gt;::<a class="el" href="classting_1_1Ptr.htm#ad324f3016fafe444a5cad6f112416ae6">StaticCast</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td>  throw ()<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Static cast. </p>
<p>NOTE: use this method very carefully!!! It returns ordinary pointer to the object while the object itself is still owned by <a class="el" href="classting_1_1Ptr.htm" title="Auto-pointer template class.">Ptr</a>. Do not create other <a class="el" href="classting_1_1Ptr.htm" title="Auto-pointer template class.">Ptr</a> instances using that returned value!!! As it will cause double 'delete' when both <a class="el" href="classting_1_1Ptr.htm" title="Auto-pointer template class.">Ptr</a> instances go out of scope. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>pointer to casted class. </dd></dl>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="Ptr_8hpp_source.htm">Ptr.hpp</a></li>
</ul>
</div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="namespaceting.htm">ting</a>      </li>
      <li class="navelem"><a class="el" href="classting_1_1Ptr.htm">Ptr</a>      </li>

    <li class="footer">Generated on Thu Feb 21 2013 20:36:36 for libting by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
