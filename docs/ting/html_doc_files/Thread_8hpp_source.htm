<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>libting: Thread.hpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">libting
   &#160;<span id="projectnumber">2.0.0</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.htm"><span>File&#160;List</span></a></li>
      <li><a href="globals.htm"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('Thread_8hpp.htm','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">Thread.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="Thread_8hpp.htm">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* The MIT License:</span>
<a name="l00002"></a>00002 <span class="comment"></span>
<a name="l00003"></a>00003 <span class="comment">Copyright (c) 2008-2012 Ivan Gagis &lt;igagis@gmail.com&gt;</span>
<a name="l00004"></a>00004 <span class="comment"></span>
<a name="l00005"></a>00005 <span class="comment">Permission is hereby granted, free of charge, to any person obtaining a copy</span>
<a name="l00006"></a>00006 <span class="comment">of this software and associated documentation files (the &quot;Software&quot;), to deal</span>
<a name="l00007"></a>00007 <span class="comment">in the Software without restriction, including without limitation the rights</span>
<a name="l00008"></a>00008 <span class="comment">to use, copy, modify, merge, publish, distribute, sublicense, and/or sell</span>
<a name="l00009"></a>00009 <span class="comment">copies of the Software, and to permit persons to whom the Software is</span>
<a name="l00010"></a>00010 <span class="comment">furnished to do so, subject to the following conditions:</span>
<a name="l00011"></a>00011 <span class="comment"></span>
<a name="l00012"></a>00012 <span class="comment">The above copyright notice and this permission notice shall be included in</span>
<a name="l00013"></a>00013 <span class="comment">all copies or substantial portions of the Software.</span>
<a name="l00014"></a>00014 <span class="comment"></span>
<a name="l00015"></a>00015 <span class="comment">THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span>
<a name="l00016"></a>00016 <span class="comment">IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span>
<a name="l00017"></a>00017 <span class="comment">FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span>
<a name="l00018"></a>00018 <span class="comment">AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span>
<a name="l00019"></a>00019 <span class="comment">LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span>
<a name="l00020"></a>00020 <span class="comment">OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN</span>
<a name="l00021"></a>00021 <span class="comment">THE SOFTWARE. */</span>
<a name="l00022"></a>00022 
<a name="l00023"></a>00023 <span class="comment">// Home page: http://ting.googlecode.com</span>
<a name="l00024"></a>00024 
<a name="l00025"></a>00025 
<a name="l00026"></a>00026 
<a name="l00034"></a>00034 <span class="preprocessor">#pragma once</span>
<a name="l00035"></a>00035 <span class="preprocessor"></span>
<a name="l00036"></a>00036 <span class="preprocessor">#include &quot;../config.hpp&quot;</span>
<a name="l00037"></a>00037 <span class="preprocessor">#include &quot;../debug.hpp&quot;</span>
<a name="l00038"></a>00038 <span class="preprocessor">#include &quot;../types.hpp&quot;</span>
<a name="l00039"></a>00039 <span class="preprocessor">#include &quot;../Exc.hpp&quot;</span>
<a name="l00040"></a>00040 
<a name="l00041"></a>00041 <span class="preprocessor">#include &quot;<a class="code" href="Mutex_8hpp.htm">Mutex.hpp</a>&quot;</span>
<a name="l00042"></a>00042 
<a name="l00043"></a>00043 
<a name="l00044"></a>00044 
<a name="l00045"></a>00045 <span class="preprocessor">#if M_OS == M_OS_WINDOWS</span>
<a name="l00046"></a>00046 <span class="preprocessor"></span>
<a name="l00047"></a>00047 <span class="comment">//if _WINSOCKAPI_ macro is not defined then it means that the winsock header file</span>
<a name="l00048"></a>00048 <span class="comment">//has not been included. Here we temporarily define the macro in order to prevent</span>
<a name="l00049"></a>00049 <span class="comment">//inclusion of winsock.h from within the windows.h. Because it may later conflict with</span>
<a name="l00050"></a>00050 <span class="comment">//winsock2.h if it is included later.</span>
<a name="l00051"></a>00051 <span class="preprocessor">#       ifndef _WINSOCKAPI_</span>
<a name="l00052"></a>00052 <span class="preprocessor"></span><span class="preprocessor">#               define _WINSOCKAPI_</span>
<a name="l00053"></a>00053 <span class="preprocessor"></span><span class="preprocessor">#               include &lt;windows.h&gt;</span>
<a name="l00054"></a>00054 <span class="preprocessor">#               undef _WINSOCKAPI_</span>
<a name="l00055"></a>00055 <span class="preprocessor"></span><span class="preprocessor">#       else</span>
<a name="l00056"></a>00056 <span class="preprocessor"></span><span class="preprocessor">#               include &lt;windows.h&gt;</span>
<a name="l00057"></a>00057 <span class="preprocessor">#       endif</span>
<a name="l00058"></a>00058 <span class="preprocessor"></span>
<a name="l00059"></a>00059 <span class="preprocessor">#elif M_OS == M_OS_SYMBIAN</span>
<a name="l00060"></a>00060 <span class="preprocessor"></span><span class="preprocessor">#       include &lt;string.h&gt;</span>
<a name="l00061"></a>00061 <span class="preprocessor">#       include &lt;e32std.h&gt;</span>
<a name="l00062"></a>00062 <span class="preprocessor">#       include &lt;hal.h&gt;</span>
<a name="l00063"></a>00063 
<a name="l00064"></a>00064 <span class="preprocessor">#elif M_OS == M_OS_LINUX || M_OS == M_OS_MACOSX || M_OS == M_OS_SOLARIS</span>
<a name="l00065"></a>00065 <span class="preprocessor"></span><span class="preprocessor">#       include &lt;pthread.h&gt;</span>
<a name="l00066"></a>00066 
<a name="l00067"></a>00067 <span class="preprocessor">#       if M_OS == M_OS_SOLARIS</span>
<a name="l00068"></a>00068 <span class="preprocessor"></span><span class="preprocessor">#               include &lt;sched.h&gt;</span> <span class="comment">// for sched_yield();</span>
<a name="l00069"></a>00069 <span class="preprocessor">#       endif</span>
<a name="l00070"></a>00070 <span class="preprocessor"></span>
<a name="l00071"></a>00071 <span class="preprocessor">#else</span>
<a name="l00072"></a>00072 <span class="preprocessor"></span><span class="preprocessor">#       error &quot;Unsupported OS&quot;</span>
<a name="l00073"></a>00073 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00074"></a>00074 <span class="preprocessor"></span>
<a name="l00075"></a>00075 
<a name="l00076"></a>00076 
<a name="l00077"></a>00077 <span class="keyword">namespace </span>ting{
<a name="l00078"></a>00078 <span class="keyword">namespace </span>mt{
<a name="l00079"></a>00079 
<a name="l00080"></a>00080 
<a name="l00081"></a>00081 
<a name="l00087"></a><a class="code" href="classting_1_1mt_1_1Thread.htm">00087</a> <span class="keyword">class </span><a class="code" href="classting_1_1mt_1_1Thread.htm" title="a base class for threads.">Thread</a>{
<a name="l00088"></a>00088 
<a name="l00089"></a>00089 <span class="comment">//Tread Run function</span>
<a name="l00090"></a>00090 <span class="preprocessor">#if M_OS == M_OS_WINDOWS</span>
<a name="l00091"></a>00091 <span class="preprocessor"></span>        <span class="keyword">static</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> __stdcall RunThread(<span class="keywordtype">void</span> *data);
<a name="l00092"></a>00092 <span class="preprocessor">#elif M_OS == M_OS_SYMBIAN</span>
<a name="l00093"></a>00093 <span class="preprocessor"></span>        <span class="keyword">static</span> TInt RunThread(TAny *data);
<a name="l00094"></a>00094 <span class="preprocessor">#elif M_OS == M_OS_LINUX || M_OS == M_OS_MACOSX</span>
<a name="l00095"></a>00095 <span class="preprocessor"></span>        <span class="keyword">static</span> <span class="keywordtype">void</span>* RunThread(<span class="keywordtype">void</span> *data);
<a name="l00096"></a>00096 <span class="preprocessor">#else</span>
<a name="l00097"></a>00097 <span class="preprocessor"></span><span class="preprocessor">#       error &quot;Unsupported OS&quot;</span>
<a name="l00098"></a>00098 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00099"></a>00099 <span class="preprocessor"></span>
<a name="l00100"></a>00100 
<a name="l00101"></a>00101         <a class="code" href="classting_1_1mt_1_1Mutex.htm" title="Mutex object class Mutex stands for &quot;Mutual execution&quot;.">ting::mt::Mutex</a> mutex1;
<a name="l00102"></a>00102 
<a name="l00103"></a>00103 
<a name="l00104"></a>00104         <span class="keyword">enum</span> E_State{
<a name="l00105"></a>00105                 NEW,
<a name="l00106"></a>00106                 RUNNING,
<a name="l00107"></a>00107                 STOPPED,
<a name="l00108"></a>00108                 JOINED
<a name="l00109"></a>00109         };
<a name="l00110"></a>00110         
<a name="l00111"></a>00111         <a class="code" href="classting_1_1Inited.htm">ting::Inited&lt;volatile E_State, NEW&gt;</a> state;
<a name="l00112"></a>00112 
<a name="l00113"></a>00113         <span class="comment">//system dependent handle</span>
<a name="l00114"></a>00114 <span class="preprocessor">#if M_OS == M_OS_WINDOWS</span>
<a name="l00115"></a>00115 <span class="preprocessor"></span>        HANDLE th;
<a name="l00116"></a>00116 <span class="preprocessor">#elif M_OS == M_OS_SYMBIAN</span>
<a name="l00117"></a>00117 <span class="preprocessor"></span>        RThread th;
<a name="l00118"></a>00118 <span class="preprocessor">#elif M_OS == M_OS_LINUX || M_OS == M_OS_MACOSX</span>
<a name="l00119"></a>00119 <span class="preprocessor"></span>        pthread_t th;
<a name="l00120"></a>00120 <span class="preprocessor">#else</span>
<a name="l00121"></a>00121 <span class="preprocessor"></span><span class="preprocessor">#       error &quot;Unsupported OS&quot;</span>
<a name="l00122"></a>00122 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00123"></a>00123 <span class="preprocessor"></span>
<a name="l00124"></a>00124         <span class="comment">//forbid copying</span>
<a name="l00125"></a>00125         <a class="code" href="classting_1_1mt_1_1Thread.htm#ab1ef8b34b2b7dbeb80347039781d1607">Thread</a>(<span class="keyword">const</span> <a class="code" href="classting_1_1mt_1_1Thread.htm" title="a base class for threads.">Thread</a>&amp; );
<a name="l00126"></a>00126         <a class="code" href="classting_1_1mt_1_1Thread.htm" title="a base class for threads.">Thread</a>&amp; operator=(<span class="keyword">const</span> <a class="code" href="classting_1_1mt_1_1Thread.htm" title="a base class for threads.">Thread</a>&amp; );
<a name="l00127"></a>00127 
<a name="l00128"></a>00128 <span class="keyword">public</span>:
<a name="l00129"></a>00129         
<a name="l00134"></a><a class="code" href="classting_1_1mt_1_1Thread_1_1Exc.htm">00134</a>         <span class="keyword">class </span><a class="code" href="classting_1_1mt_1_1Thread_1_1Exc.htm" title="Basic exception type thrown by Thread class.">Exc</a> : <span class="keyword">public</span> ting::<a class="code" href="classting_1_1mt_1_1Thread_1_1Exc.htm" title="Basic exception type thrown by Thread class.">Exc</a>{
<a name="l00135"></a>00135         <span class="keyword">public</span>:
<a name="l00136"></a><a class="code" href="classting_1_1mt_1_1Thread_1_1Exc.htm#abb26b7cd8031563e10c51ac8e6ffb0f3">00136</a>                 <a class="code" href="classting_1_1mt_1_1Thread_1_1Exc.htm#abb26b7cd8031563e10c51ac8e6ffb0f3" title="Constructor.">Exc</a>(<span class="keyword">const</span> std::string&amp; msg) :
<a name="l00137"></a>00137                                 ting::<a class="code" href="classting_1_1mt_1_1Thread_1_1Exc.htm" title="Basic exception type thrown by Thread class.">Exc</a>(msg)
<a name="l00138"></a>00138                 {}
<a name="l00139"></a>00139         };
<a name="l00140"></a>00140         
<a name="l00141"></a><a class="code" href="classting_1_1mt_1_1Thread_1_1HasAlreadyBeenStartedExc.htm">00141</a>         <span class="keyword">class </span><a class="code" href="classting_1_1mt_1_1Thread_1_1HasAlreadyBeenStartedExc.htm">HasAlreadyBeenStartedExc</a> : <span class="keyword">public</span> <a class="code" href="classting_1_1mt_1_1Thread_1_1Exc.htm" title="Basic exception type thrown by Thread class.">Exc</a>{
<a name="l00142"></a>00142         <span class="keyword">public</span>:
<a name="l00143"></a><a class="code" href="classting_1_1mt_1_1Thread_1_1HasAlreadyBeenStartedExc.htm#a5ed956aaebfdee2fca4562c82ff9e6e8">00143</a>                 <a class="code" href="classting_1_1mt_1_1Thread_1_1HasAlreadyBeenStartedExc.htm#a5ed956aaebfdee2fca4562c82ff9e6e8">HasAlreadyBeenStartedExc</a>() :
<a name="l00144"></a>00144                                 <a class="code" href="classting_1_1mt_1_1Thread_1_1Exc.htm" title="Basic exception type thrown by Thread class.">Exc</a>(<span class="stringliteral">&quot;The thread has already been started.&quot;</span>)
<a name="l00145"></a>00145                 {}
<a name="l00146"></a>00146         };
<a name="l00147"></a>00147         
<a name="l00148"></a>00148         <a class="code" href="classting_1_1mt_1_1Thread.htm#ab1ef8b34b2b7dbeb80347039781d1607">Thread</a>();
<a name="l00149"></a>00149         
<a name="l00150"></a>00150         
<a name="l00151"></a>00151         <span class="keyword">virtual</span> <a class="code" href="classting_1_1mt_1_1Thread.htm#a7053c7d91ca855796da2b6b8dc82dd5d">~Thread</a>()throw();
<a name="l00152"></a>00152 
<a name="l00153"></a>00153 
<a name="l00154"></a>00154 
<a name="l00159"></a>00159         virtual <span class="keywordtype">void</span> <a class="code" href="classting_1_1mt_1_1Thread.htm#a2f186862d9ed595dffaa41d6466f0c6a" title="This should be overridden, this is what to be run in new thread.">Run</a>() = 0;
<a name="l00160"></a>00160 
<a name="l00161"></a>00161 
<a name="l00162"></a>00162 
<a name="l00171"></a>00171         <span class="keywordtype">void</span> <a class="code" href="classting_1_1mt_1_1Thread.htm#a617987020ba614400b51016517a8c62d" title="Start thread execution.">Start</a>(<span class="keywordtype">size_t</span> stackSize = 0);
<a name="l00172"></a>00172 
<a name="l00173"></a>00173 
<a name="l00174"></a>00174 
<a name="l00182"></a>00182         <span class="keywordtype">void</span> <a class="code" href="classting_1_1mt_1_1Thread.htm#af540425b5bd0e10fe879e53c8ce5535a" title="Wait for thread to finish its execution.">Join</a>()throw();
<a name="l00183"></a>00183 
<a name="l00184"></a>00184 
<a name="l00185"></a>00185 
<a name="l00193"></a><a class="code" href="classting_1_1mt_1_1Thread.htm#a4713c4af0c49f630338aacb5cb9b91f3">00193</a>         static <span class="keywordtype">void</span> <a class="code" href="classting_1_1mt_1_1Thread.htm#a4713c4af0c49f630338aacb5cb9b91f3" title="Suspend the thread for a given number of milliseconds.">Sleep</a>(<span class="keywordtype">unsigned</span> msec = 0)throw(){
<a name="l00194"></a>00194 <span class="preprocessor">#if M_OS == M_OS_WINDOWS</span>
<a name="l00195"></a>00195 <span class="preprocessor"></span>                SleepEx(DWORD(msec), FALSE);<span class="comment">// Sleep() crashes on MinGW (I do not know why), this is why SleepEx() is used here.</span>
<a name="l00196"></a>00196 <span class="preprocessor">#elif M_OS == M_OS_SYMBIAN</span>
<a name="l00197"></a>00197 <span class="preprocessor"></span>                User::After(msec * 1000);
<a name="l00198"></a>00198 <span class="preprocessor">#elif M_OS == M_OS_SOLARIS || M_OS == M_OS_MACOSX || M_OS == M_OS_LINUX</span>
<a name="l00199"></a>00199 <span class="preprocessor"></span>                <span class="keywordflow">if</span>(msec == 0){
<a name="l00200"></a>00200 <span class="preprocessor">#       if M_OS == M_OS_SOLARIS || M_OS == M_OS_MACOSX || defined(__ANDROID__)</span>
<a name="l00201"></a>00201 <span class="preprocessor"></span>                        sched_yield();
<a name="l00202"></a>00202 <span class="preprocessor">#       elif M_OS == M_OS_LINUX</span>
<a name="l00203"></a>00203 <span class="preprocessor"></span>                        pthread_yield();
<a name="l00204"></a>00204 <span class="preprocessor">#       else</span>
<a name="l00205"></a>00205 <span class="preprocessor"></span><span class="preprocessor">#               error &quot;Unsupported OS&quot;</span>
<a name="l00206"></a>00206 <span class="preprocessor"></span><span class="preprocessor">#       endif</span>
<a name="l00207"></a>00207 <span class="preprocessor"></span>                }<span class="keywordflow">else</span>{
<a name="l00208"></a>00208                         usleep(msec * 1000);
<a name="l00209"></a>00209                 }
<a name="l00210"></a>00210 <span class="preprocessor">#else</span>
<a name="l00211"></a>00211 <span class="preprocessor"></span><span class="preprocessor">#       error &quot;Unsupported OS&quot;</span>
<a name="l00212"></a>00212 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00213"></a>00213 <span class="preprocessor"></span>        }
<a name="l00214"></a>00214 
<a name="l00215"></a>00215 
<a name="l00216"></a>00216 
<a name="l00222"></a><a class="code" href="classting_1_1mt_1_1Thread.htm#af1134e33e3760ee4a1065ae77b48ead2">00222</a>         <span class="keyword">typedef</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">int</span> <a class="code" href="classting_1_1mt_1_1Thread.htm#af1134e33e3760ee4a1065ae77b48ead2" title="Thread ID type.">T_ThreadID</a>;
<a name="l00223"></a>00223 
<a name="l00224"></a>00224 
<a name="l00225"></a>00225 
<a name="l00234"></a><a class="code" href="classting_1_1mt_1_1Thread.htm#a1ee06257bad3487883fdb60404e023b8">00234</a>         <span class="keyword">static</span> <span class="keyword">inline</span> <a class="code" href="classting_1_1mt_1_1Thread.htm#af1134e33e3760ee4a1065ae77b48ead2" title="Thread ID type.">T_ThreadID</a> <a class="code" href="classting_1_1mt_1_1Thread.htm#a1ee06257bad3487883fdb60404e023b8" title="get current thread ID.">GetCurrentThreadID</a>()throw(){
<a name="l00235"></a>00235 <span class="preprocessor">#if M_OS == M_OS_WINDOWS</span>
<a name="l00236"></a>00236 <span class="preprocessor"></span>                <span class="keywordflow">return</span> <a class="code" href="classting_1_1mt_1_1Thread.htm#af1134e33e3760ee4a1065ae77b48ead2" title="Thread ID type.">T_ThreadID</a>(GetCurrentThreadId());
<a name="l00237"></a>00237 <span class="preprocessor">#elif M_OS == M_OS_MACOSX || M_OS == M_OS_LINUX</span>
<a name="l00238"></a>00238 <span class="preprocessor"></span>                pthread_t t = pthread_self();
<a name="l00239"></a>00239                 <a class="code" href="debug_8hpp.htm#ac34bd49b9b8483a2b40c61e7607fd878">STATIC_ASSERT</a>(<span class="keyword">sizeof</span>(pthread_t) &lt;= <span class="keyword">sizeof</span>(<a class="code" href="classting_1_1mt_1_1Thread.htm#af1134e33e3760ee4a1065ae77b48ead2" title="Thread ID type.">T_ThreadID</a>))
<a name="l00240"></a>00240                 <span class="keywordflow">return</span> <a class="code" href="classting_1_1mt_1_1Thread.htm#af1134e33e3760ee4a1065ae77b48ead2" title="Thread ID type.">T_ThreadID</a>(t);
<a name="l00241"></a>00241 <span class="preprocessor">#else</span>
<a name="l00242"></a>00242 <span class="preprocessor"></span><span class="preprocessor">#       error &quot;Unsupported OS&quot;</span>
<a name="l00243"></a>00243 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00244"></a>00244 <span class="preprocessor"></span>        }
<a name="l00245"></a>00245 };
<a name="l00246"></a>00246 
<a name="l00247"></a>00247 
<a name="l00248"></a>00248 
<a name="l00249"></a>00249 }<span class="comment">//~namespace</span>
<a name="l00250"></a>00250 }<span class="comment">//~namespace</span>
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="Thread_8hpp.htm">Thread.hpp</a>      </li>

    <li class="footer">Generated on Thu Feb 21 2013 20:36:35 for libting by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
