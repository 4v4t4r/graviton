<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>libting: ting::Buffer&lt; T &gt; Class Template Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">libting
   &#160;<span id="projectnumber">2.0.0</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.htm"><span>Classes</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.htm"><span>Class&#160;List</span></a></li>
      <li><a href="classes.htm"><span>Class&#160;Index</span></a></li>
      <li><a href="hierarchy.htm"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.htm"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('classting_1_1Buffer.htm','');
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pro-methods">Protected Member Functions</a> &#124;
<a href="#pro-attribs">Protected Attributes</a>  </div>
  <div class="headertitle">
<div class="title">ting::Buffer&lt; T &gt; Class Template Reference</div>  </div>
</div><!--header-->
<div class="contents">
<!-- doxytag: class="ting::Buffer" -->
<p>Memory buffer wrapper template class.  
 <a href="classting_1_1Buffer.htm#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="Buffer_8hpp_source.htm">Buffer.hpp</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for ting::Buffer&lt; T &gt;:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classting_1_1Buffer.png" usemap="#ting::Buffer&lt; T &gt;_map" alt=""/>
  <map id="ting::Buffer&lt; T &gt;_map" name="ting::Buffer&lt; T &gt;_map">
<area href="classting_1_1Array.htm" title="wrapper above new[]/delete[]." alt="ting::Array&lt; T &gt;" shape="rect" coords="0,56,186,80"/>
<area href="classting_1_1StaticBuffer.htm" title="static buffer class template." alt="ting::StaticBuffer&lt; T, bufSize &gt;" shape="rect" coords="196,56,382,80"/>
</map>
 </div></div>

<p><a href="classting_1_1Buffer-members.htm">List of all members.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1Buffer.htm#a1856044f60aed92d01e9cfa70edc8262">Buffer</a> (T *bufPtr, size_t bufSize)  throw ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a <a class="el" href="classting_1_1Buffer.htm" title="Memory buffer wrapper template class.">Buffer</a> object.  <a href="#a1856044f60aed92d01e9cfa70edc8262"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1Buffer.htm#ad7c1abf3c373b47f463f2bca7785172e">Size</a> () const   throw ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">get buffer size.  <a href="#ad7c1abf3c373b47f463f2bca7785172e"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1Buffer.htm#ab39dfe3286049c328219b3c207908846">SizeOfElem</a> () const   throw ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">get size of element.  <a href="#ab39dfe3286049c328219b3c207908846"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1Buffer.htm#af269a7ec5afa6d8b0430934eef1ca748">SizeInBytes</a> () const   throw ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">get size of buffer in bytes.  <a href="#af269a7ec5afa6d8b0430934eef1ca748"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">T &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1Buffer.htm#a6b58fe5c9b4a7a8e9427c2d68866db12">operator[]</a> (size_t i) const   throw ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">access specified element of the buffer.  <a href="#a6b58fe5c9b4a7a8e9427c2d68866db12"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">T &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1Buffer.htm#a22b6ace6d763a6bf9b9c6a146d319707">operator[]</a> (size_t i)  throw ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">access specified element of the buffer.  <a href="#a22b6ace6d763a6bf9b9c6a146d319707"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">T *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1Buffer.htm#a594bc8aad83c33c9442d48a4a5cda49c">Begin</a> ()  throw ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">get pointer to first element of the buffer.  <a href="#a594bc8aad83c33c9442d48a4a5cda49c"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">T *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1Buffer.htm#a936a9e66b0c7eef93ca320baac5ca881">Begin</a> () const   throw ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">get pointer to first element of the buffer.  <a href="#a936a9e66b0c7eef93ca320baac5ca881"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">T *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1Buffer.htm#a3020030e107f4e8025c533cdb767e5e1">End</a> ()  throw ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">get pointer to "after last" element of the buffer.  <a href="#a3020030e107f4e8025c533cdb767e5e1"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">T *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1Buffer.htm#a8fad488db076a3f7a5be4f9ded6283d6">End</a> () const   throw ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">get const pointer to "after last" element of the buffer.  <a href="#a8fad488db076a3f7a5be4f9ded6283d6"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1Buffer.htm#ab4c007b7e501e17cf4deed62645dc1cd">Overlaps</a> (const T *p) const   throw ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks if pointer points somewhere within the buffer.  <a href="#ab4c007b7e501e17cf4deed62645dc1cd"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1Buffer.htm#a3c5d1c62d889b83ffeaf91124f4f3d9d">operator const Buffer&lt; const T &gt; &amp;</a> () const   throw ()</td></tr>
<tr><td colspan="2"><h2><a name="pro-methods"></a>
Protected Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1Buffer.htm#a91a88a3ab2c44cac2153770203c8a04d">Buffer</a> ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Default constructor.  <a href="#a91a88a3ab2c44cac2153770203c8a04d"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classting_1_1Buffer.htm">Buffer</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1Buffer.htm#aec4f0d7554d832c8b27a1412f93bd818">operator=</a> (const <a class="el" href="classting_1_1Buffer.htm">Buffer</a> &amp;)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Assignment operator.  <a href="#aec4f0d7554d832c8b27a1412f93bd818"></a><br/></td></tr>
<tr><td colspan="2"><h2><a name="pro-attribs"></a>
Protected Attributes</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">T *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1Buffer.htm#ae13b3c27ddb6755a2f5a74785dbc01e8">buf</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1Buffer.htm#a75d5caa8c67957c1dced20694bf9ebbf">size</a></td></tr>
</table>
<hr/><a name="details" id="details"></a><h2>Detailed Description</h2>
<div class="textblock"><h3>template&lt;class T&gt;<br/>
class ting::Buffer&lt; T &gt;</h3>

<p>Memory buffer wrapper template class. </p>
<p>This class is a wrapper of memory buffer, it encapsulates pointer to memory block and size of that memory block. </p>
</div><hr/><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="a91a88a3ab2c44cac2153770203c8a04d"></a><!-- doxytag: member="ting::Buffer::Buffer" ref="a91a88a3ab2c44cac2153770203c8a04d" args="()" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classting_1_1Buffer.htm">ting::Buffer</a>&lt; T &gt;::<a class="el" href="classting_1_1Buffer.htm">Buffer</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline, protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Default constructor. </p>
<p>It is protected, so only accessible by subclasses. </p>

</div>
</div>
<a class="anchor" id="a1856044f60aed92d01e9cfa70edc8262"></a><!-- doxytag: member="ting::Buffer::Buffer" ref="a1856044f60aed92d01e9cfa70edc8262" args="(T *bufPtr, size_t bufSize)" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classting_1_1Buffer.htm">ting::Buffer</a>&lt; T &gt;::<a class="el" href="classting_1_1Buffer.htm">Buffer</a> </td>
          <td>(</td>
          <td class="paramtype">T *&#160;</td>
          <td class="paramname"><em>bufPtr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>bufSize</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td>  throw ()<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Create a <a class="el" href="classting_1_1Buffer.htm" title="Memory buffer wrapper template class.">Buffer</a> object. </p>
<p>Creates a <a class="el" href="classting_1_1Buffer.htm" title="Memory buffer wrapper template class.">Buffer</a> object which wraps given memory buffer of specified size. Note, the memory will not be freed upon this <a class="el" href="classting_1_1Buffer.htm" title="Memory buffer wrapper template class.">Buffer</a> object destruction. </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">bufPtr</td><td>- pointer to the memory buffer. </td></tr>
    <tr><td class="paramname">bufSize</td><td>- size of the memory buffer. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<hr/><h2>Member Function Documentation</h2>
<a class="anchor" id="a594bc8aad83c33c9442d48a4a5cda49c"></a><!-- doxytag: member="ting::Buffer::Begin" ref="a594bc8aad83c33c9442d48a4a5cda49c" args="()" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T* <a class="el" href="classting_1_1Buffer.htm">ting::Buffer</a>&lt; T &gt;::<a class="el" href="classting_1_1Buffer.htm#a594bc8aad83c33c9442d48a4a5cda49c">Begin</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td>  throw ()<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>get pointer to first element of the buffer. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>pointer to first element of the buffer. </dd></dl>

</div>
</div>
<a class="anchor" id="a936a9e66b0c7eef93ca320baac5ca881"></a><!-- doxytag: member="ting::Buffer::Begin" ref="a936a9e66b0c7eef93ca320baac5ca881" args="() const " -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T* <a class="el" href="classting_1_1Buffer.htm">ting::Buffer</a>&lt; T &gt;::<a class="el" href="classting_1_1Buffer.htm#a594bc8aad83c33c9442d48a4a5cda49c">Begin</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const  throw ()<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>get pointer to first element of the buffer. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>pointer to first element of the buffer. </dd></dl>

</div>
</div>
<a class="anchor" id="a3020030e107f4e8025c533cdb767e5e1"></a><!-- doxytag: member="ting::Buffer::End" ref="a3020030e107f4e8025c533cdb767e5e1" args="()" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T* <a class="el" href="classting_1_1Buffer.htm">ting::Buffer</a>&lt; T &gt;::<a class="el" href="classting_1_1Buffer.htm#a3020030e107f4e8025c533cdb767e5e1">End</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td>  throw ()<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>get pointer to "after last" element of the buffer. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>pointer to "after last" element of the buffer. </dd></dl>

</div>
</div>
<a class="anchor" id="a8fad488db076a3f7a5be4f9ded6283d6"></a><!-- doxytag: member="ting::Buffer::End" ref="a8fad488db076a3f7a5be4f9ded6283d6" args="() const " -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T* <a class="el" href="classting_1_1Buffer.htm">ting::Buffer</a>&lt; T &gt;::<a class="el" href="classting_1_1Buffer.htm#a3020030e107f4e8025c533cdb767e5e1">End</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const  throw ()<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>get const pointer to "after last" element of the buffer. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>const pointer to "after last" element of the buffer. </dd></dl>

</div>
</div>
<a class="anchor" id="a3c5d1c62d889b83ffeaf91124f4f3d9d"></a><!-- doxytag: member="ting::Buffer::operator const Buffer&lt; const T &gt; &amp;" ref="a3c5d1c62d889b83ffeaf91124f4f3d9d" args="() const " -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classting_1_1Buffer.htm">ting::Buffer</a>&lt; T &gt;::operator const <a class="el" href="classting_1_1Buffer.htm">Buffer</a>&lt; const T &gt; &amp; </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const  throw ()<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="aec4f0d7554d832c8b27a1412f93bd818"></a><!-- doxytag: member="ting::Buffer::operator=" ref="aec4f0d7554d832c8b27a1412f93bd818" args="(const Buffer &amp;)" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classting_1_1Buffer.htm">Buffer</a>&amp; <a class="el" href="classting_1_1Buffer.htm">ting::Buffer</a>&lt; T &gt;::operator= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classting_1_1Buffer.htm">Buffer</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline, protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Assignment operator. </p>
<p>This operator implementation does nothing. This operator is defined because it should not be available for outside use, so make it protected. But it should be defined, because some subclass may have meaningful automatically generated <a class="el" href="classting_1_1Buffer.htm#aec4f0d7554d832c8b27a1412f93bd818" title="Assignment operator.">operator=()</a> (e.g. <a class="el" href="classting_1_1StaticBuffer.htm" title="static buffer class template.">StaticBuffer</a>) which subsequently will call this <a class="el" href="classting_1_1Buffer.htm#aec4f0d7554d832c8b27a1412f93bd818" title="Assignment operator.">operator=()</a>. </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">-</td><td><a class="el" href="classting_1_1Buffer.htm" title="Memory buffer wrapper template class.">Buffer</a> to assign from. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>reference to this <a class="el" href="classting_1_1Buffer.htm" title="Memory buffer wrapper template class.">Buffer</a> object. </dd></dl>

</div>
</div>
<a class="anchor" id="a6b58fe5c9b4a7a8e9427c2d68866db12"></a><!-- doxytag: member="ting::Buffer::operator[]" ref="a6b58fe5c9b4a7a8e9427c2d68866db12" args="(size_t i) const " -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T&amp; <a class="el" href="classting_1_1Buffer.htm">ting::Buffer</a>&lt; T &gt;::operator[] </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>i</em></td><td>)</td>
          <td> const  throw ()<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>access specified element of the buffer. </p>
<p>Const version of <a class="el" href="classting_1_1Buffer.htm#a6b58fe5c9b4a7a8e9427c2d68866db12" title="access specified element of the buffer.">Buffer::operator[]</a>. </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">i</td><td>- element index. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>reference to i'th element of the buffer. </dd></dl>

</div>
</div>
<a class="anchor" id="a22b6ace6d763a6bf9b9c6a146d319707"></a><!-- doxytag: member="ting::Buffer::operator[]" ref="a22b6ace6d763a6bf9b9c6a146d319707" args="(size_t i)" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T&amp; <a class="el" href="classting_1_1Buffer.htm">ting::Buffer</a>&lt; T &gt;::operator[] </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>i</em></td><td>)</td>
          <td>  throw ()<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>access specified element of the buffer. </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">i</td><td>- element index. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>reference to i'th element of the buffer. </dd></dl>

</div>
</div>
<a class="anchor" id="ab4c007b7e501e17cf4deed62645dc1cd"></a><!-- doxytag: member="ting::Buffer::Overlaps" ref="ab4c007b7e501e17cf4deed62645dc1cd" args="(const T *p) const " -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classting_1_1Buffer.htm">ting::Buffer</a>&lt; T &gt;::<a class="el" href="classting_1_1Buffer.htm#ab4c007b7e501e17cf4deed62645dc1cd">Overlaps</a> </td>
          <td>(</td>
          <td class="paramtype">const T *&#160;</td>
          <td class="paramname"><em>p</em></td><td>)</td>
          <td> const  throw ()<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Checks if pointer points somewhere within the buffer. </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">p</td><td>- pointer to check. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>true - if pointer passed as argument points somewhere within the buffer. </dd>
<dd>
false otherwise. </dd></dl>

</div>
</div>
<a class="anchor" id="ad7c1abf3c373b47f463f2bca7785172e"></a><!-- doxytag: member="ting::Buffer::Size" ref="ad7c1abf3c373b47f463f2bca7785172e" args="() const " -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">size_t <a class="el" href="classting_1_1Buffer.htm">ting::Buffer</a>&lt; T &gt;::<a class="el" href="classting_1_1Buffer.htm#ad7c1abf3c373b47f463f2bca7785172e">Size</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const  throw ()<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>get buffer size. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>number of elements in buffer. </dd></dl>

</div>
</div>
<a class="anchor" id="af269a7ec5afa6d8b0430934eef1ca748"></a><!-- doxytag: member="ting::Buffer::SizeInBytes" ref="af269a7ec5afa6d8b0430934eef1ca748" args="() const " -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">size_t <a class="el" href="classting_1_1Buffer.htm">ting::Buffer</a>&lt; T &gt;::<a class="el" href="classting_1_1Buffer.htm#af269a7ec5afa6d8b0430934eef1ca748">SizeInBytes</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const  throw ()<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>get size of buffer in bytes. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>size of array in bytes. </dd></dl>

</div>
</div>
<a class="anchor" id="ab39dfe3286049c328219b3c207908846"></a><!-- doxytag: member="ting::Buffer::SizeOfElem" ref="ab39dfe3286049c328219b3c207908846" args="() const " -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">size_t <a class="el" href="classting_1_1Buffer.htm">ting::Buffer</a>&lt; T &gt;::<a class="el" href="classting_1_1Buffer.htm#ab39dfe3286049c328219b3c207908846">SizeOfElem</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const  throw ()<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>get size of element. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>size of element in bytes. </dd></dl>

</div>
</div>
<hr/><h2>Member Data Documentation</h2>
<a class="anchor" id="ae13b3c27ddb6755a2f5a74785dbc01e8"></a><!-- doxytag: member="ting::Buffer::buf" ref="ae13b3c27ddb6755a2f5a74785dbc01e8" args="" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T* <a class="el" href="classting_1_1Buffer.htm">ting::Buffer</a>&lt; T &gt;::<a class="el" href="classting_1_1Buffer.htm#ae13b3c27ddb6755a2f5a74785dbc01e8">buf</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a75d5caa8c67957c1dced20694bf9ebbf"></a><!-- doxytag: member="ting::Buffer::size" ref="a75d5caa8c67957c1dced20694bf9ebbf" args="" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">size_t <a class="el" href="classting_1_1Buffer.htm">ting::Buffer</a>&lt; T &gt;::<a class="el" href="classting_1_1Buffer.htm#a75d5caa8c67957c1dced20694bf9ebbf">size</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="Buffer_8hpp_source.htm">Buffer.hpp</a></li>
</ul>
</div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="namespaceting.htm">ting</a>      </li>
      <li class="navelem"><a class="el" href="classting_1_1Buffer.htm">Buffer</a>      </li>

    <li class="footer">Generated on Thu Feb 21 2013 20:36:36 for libting by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
