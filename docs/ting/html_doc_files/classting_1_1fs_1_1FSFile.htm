<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>libting: ting::fs::FSFile Class Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">libting
   &#160;<span id="projectnumber">2.0.0</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.htm"><span>Classes</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.htm"><span>Class&#160;List</span></a></li>
      <li><a href="classes.htm"><span>Class&#160;Index</span></a></li>
      <li><a href="hierarchy.htm"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.htm"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('classting_1_1fs_1_1FSFile.htm','');
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="#pro-methods">Protected Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">ting::fs::FSFile Class Reference</div>  </div>
</div><!--header-->
<div class="contents">
<!-- doxytag: class="ting::fs::FSFile" --><!-- doxytag: inherits="ting::fs::File" -->
<p>Native OS file system implementation of <a class="el" href="classting_1_1fs_1_1File.htm" title="Abstract interface to a file system.">File</a> interface.  
 <a href="classting_1_1fs_1_1FSFile.htm#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="FSFile_8hpp_source.htm">FSFile.hpp</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for ting::fs::FSFile:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classting_1_1fs_1_1FSFile.png" usemap="#ting::fs::FSFile_map" alt=""/>
  <map id="ting::fs::FSFile_map" name="ting::fs::FSFile_map">
<area href="classting_1_1fs_1_1File.htm" title="Abstract interface to a file system." alt="ting::fs::File" shape="rect" coords="0,0,91,24"/>
</map>
 </div></div>

<p><a href="classting_1_1fs_1_1FSFile-members.htm">List of all members.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1fs_1_1FSFile.htm#ae5aacdff37f7810d5352c7c3b7bf8b23">FSFile</a> (const std::string &amp;pathName=std::string())</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructor.  <a href="#ae5aacdff37f7810d5352c7c3b7bf8b23"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1fs_1_1FSFile.htm#ac4040765237bee85a86ea53bf40aec68">~FSFile</a> ()  throw ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Destructor.  <a href="#ac4040765237bee85a86ea53bf40aec68"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1fs_1_1FSFile.htm#a05f68654032ba583ea67416d26b4daeb">SetRootDir</a> (const std::string &amp;dir)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Set root directory.  <a href="#a05f68654032ba583ea67416d26b4daeb"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const std::string &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1fs_1_1FSFile.htm#a87b98512a952ff7e097c8b1c8847d677">GetRootDir</a> () const   throw ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Get current root directory.  <a href="#a87b98512a952ff7e097c8b1c8847d677"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1fs_1_1FSFile.htm#ab299340d05bc84adfca116480c9b8c21">Open</a> (<a class="el" href="classting_1_1fs_1_1File.htm#a00e1ee34be46110fb687ca6215f6c3b4">E_Mode</a> mode)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Open file.  <a href="#ab299340d05bc84adfca116480c9b8c21"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1fs_1_1FSFile.htm#a5c6ded477a4139e67e27a565fba6bfd3">Close</a> ()  throw ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Close file.  <a href="#a5c6ded477a4139e67e27a565fba6bfd3"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1fs_1_1FSFile.htm#a803e07106f5270de2272eb5efcd6761f">ReadInternal</a> (const <a class="el" href="classting_1_1Buffer.htm">ting::Buffer</a>&lt; <a class="el" href="namespaceting.htm#a2debe052f64b3825ad3e8e3ee1861e66">ting::u8</a> &gt; &amp;buf)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Read data from file.  <a href="#a803e07106f5270de2272eb5efcd6761f"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1fs_1_1FSFile.htm#ab664c71a5f3cfdf0fdeac260cea55d2c">WriteInternal</a> (const <a class="el" href="classting_1_1Buffer.htm">ting::Buffer</a>&lt; const <a class="el" href="namespaceting.htm#a2debe052f64b3825ad3e8e3ee1861e66">ting::u8</a> &gt; &amp;buf)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Write data to file.  <a href="#ab664c71a5f3cfdf0fdeac260cea55d2c"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1fs_1_1FSFile.htm#adbdf4fc043af1377b66ac5d3466896ae">SeekForward</a> (size_t numBytesToSeek)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Seek forward.  <a href="#adbdf4fc043af1377b66ac5d3466896ae"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1fs_1_1FSFile.htm#ac36deb577ebde76a2c9e8e78d2746504">SeekBackward</a> (size_t numBytesToSeek)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Seek backwards.  <a href="#ac36deb577ebde76a2c9e8e78d2746504"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1fs_1_1FSFile.htm#ad591dc9d5d2a2c48e51cd2f120355ac8">Seek</a> (size_t numBytesToSeek, bool seekForward)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Seek forward or backward.  <a href="#ad591dc9d5d2a2c48e51cd2f120355ac8"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1fs_1_1FSFile.htm#a77778439062093090f358de90a779d20">Rewind</a> ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Seek to the beginning of the file.  <a href="#a77778439062093090f358de90a779d20"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1fs_1_1FSFile.htm#a607c89925082c7fc14569809a3f9ac87">Exists</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Check for file/directory existence.  <a href="#a607c89925082c7fc14569809a3f9ac87"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1fs_1_1FSFile.htm#aebd0668a03646facdcd9bca41d60e507">MakeDir</a> ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Create directory.  <a href="#aebd0668a03646facdcd9bca41d60e507"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classting_1_1Array.htm">ting::Array</a>&lt; std::string &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1fs_1_1FSFile.htm#a46c8158df7765455fdc52f075fe40e07">ListDirContents</a> (size_t maxEntries=0)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Get list of files and subdirectories of a directory.  <a href="#a46c8158df7765455fdc52f075fe40e07"></a><br/></td></tr>
<tr><td colspan="2"><h2><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1fs_1_1FSFile.htm#a729afefbfe8f388e09dac075123b6c87">GetHomeDir</a> ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Get user home directory.  <a href="#a729afefbfe8f388e09dac075123b6c87"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classting_1_1Ptr.htm">ting::Ptr</a>&lt; <a class="el" href="classting_1_1fs_1_1FSFile.htm">FSFile</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1fs_1_1FSFile.htm#a8f9ca214addb34e0f50c1f9428ebf9a7">New</a> (const std::string &amp;pathName=std::string())</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Create new instance managed by auto-pointer.  <a href="#a8f9ca214addb34e0f50c1f9428ebf9a7"></a><br/></td></tr>
<tr><td colspan="2"><h2><a name="pro-methods"></a>
Protected Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1fs_1_1FSFile.htm#ac3ffacaddab0843aa576ce17908a0e3e">TruePath</a> () const </td></tr>
</table>
<hr/><a name="details" id="details"></a><h2>Detailed Description</h2>
<div class="textblock"><p>Native OS file system implementation of <a class="el" href="classting_1_1fs_1_1File.htm" title="Abstract interface to a file system.">File</a> interface. </p>
<p>Implementation of a ting::File interface for native file system of the OS. </p>
</div><hr/><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="ae5aacdff37f7810d5352c7c3b7bf8b23"></a><!-- doxytag: member="ting::fs::FSFile::FSFile" ref="ae5aacdff37f7810d5352c7c3b7bf8b23" args="(const std::string &amp;pathName=std::string())" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classting_1_1fs_1_1FSFile.htm#ae5aacdff37f7810d5352c7c3b7bf8b23">ting::fs::FSFile::FSFile</a> </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>pathName</em> = <code>std::string()</code></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Constructor. </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">pathName</td><td>- initial path to set passed to <a class="el" href="classting_1_1fs_1_1File.htm" title="Abstract interface to a file system.">File</a> constructor. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ac4040765237bee85a86ea53bf40aec68"></a><!-- doxytag: member="ting::fs::FSFile::~FSFile" ref="ac4040765237bee85a86ea53bf40aec68" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classting_1_1fs_1_1FSFile.htm#ac4040765237bee85a86ea53bf40aec68">ting::fs::FSFile::~FSFile</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td>  throw ()<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Destructor. </p>
<p>This destructor calls the <a class="el" href="classting_1_1fs_1_1FSFile.htm#a5c6ded477a4139e67e27a565fba6bfd3" title="Close file.">Close()</a> method. </p>

</div>
</div>
<hr/><h2>Member Function Documentation</h2>
<a class="anchor" id="a5c6ded477a4139e67e27a565fba6bfd3"></a><!-- doxytag: member="ting::fs::FSFile::Close" ref="a5c6ded477a4139e67e27a565fba6bfd3" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual void <a class="el" href="classting_1_1fs_1_1FSFile.htm#a5c6ded477a4139e67e27a565fba6bfd3">ting::fs::FSFile::Close</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td>  throw ()<code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Close file. </p>

<p>Implements <a class="el" href="classting_1_1fs_1_1File.htm#a10c578b5b27f9601005c48a879d7b993">ting::fs::File</a>.</p>

</div>
</div>
<a class="anchor" id="a607c89925082c7fc14569809a3f9ac87"></a><!-- doxytag: member="ting::fs::FSFile::Exists" ref="a607c89925082c7fc14569809a3f9ac87" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool <a class="el" href="classting_1_1fs_1_1FSFile.htm#a607c89925082c7fc14569809a3f9ac87">ting::fs::FSFile::Exists</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Check for file/directory existence. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>true - if file/directory exists. </dd>
<dd>
false - otherwise. </dd></dl>

<p>Reimplemented from <a class="el" href="classting_1_1fs_1_1File.htm#a92e8106e3c1ee35729fb7695ae596aab">ting::fs::File</a>.</p>

</div>
</div>
<a class="anchor" id="a729afefbfe8f388e09dac075123b6c87"></a><!-- doxytag: member="ting::fs::FSFile::GetHomeDir" ref="a729afefbfe8f388e09dac075123b6c87" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static std::string <a class="el" href="classting_1_1fs_1_1FSFile.htm#a729afefbfe8f388e09dac075123b6c87">ting::fs::FSFile::GetHomeDir</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get user home directory. </p>
<p>Returns an absolute path to the current user's home directory. On *nix systems it will be something like "/home/user/". </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>Absolute path to the user's home directory. </dd></dl>

</div>
</div>
<a class="anchor" id="a87b98512a952ff7e097c8b1c8847d677"></a><!-- doxytag: member="ting::fs::FSFile::GetRootDir" ref="a87b98512a952ff7e097c8b1c8847d677" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const std::string&amp; <a class="el" href="classting_1_1fs_1_1FSFile.htm#a87b98512a952ff7e097c8b1c8847d677">ting::fs::FSFile::GetRootDir</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const  throw ()<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get current root directory. </p>
<p>Returns the current root directory. See description of <a class="el" href="classting_1_1fs_1_1FSFile.htm#a05f68654032ba583ea67416d26b4daeb" title="Set root directory.">SetRootDir()</a> method for more details. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>Current root directory. </dd></dl>

</div>
</div>
<a class="anchor" id="a46c8158df7765455fdc52f075fe40e07"></a><!-- doxytag: member="ting::fs::FSFile::ListDirContents" ref="a46c8158df7765455fdc52f075fe40e07" args="(size_t maxEntries=0)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classting_1_1Array.htm">ting::Array</a>&lt;std::string&gt; <a class="el" href="classting_1_1fs_1_1FSFile.htm#a46c8158df7765455fdc52f075fe40e07">ting::fs::FSFile::ListDirContents</a> </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>maxEntries</em> = <code>0</code></td><td>)</td>
          <td><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get list of files and subdirectories of a directory. </p>
<p>If this <a class="el" href="classting_1_1fs_1_1File.htm" title="Abstract interface to a file system.">File</a> instance holds a path to a directory then this method can be used to obtain the contents of the directory. </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">maxEntries</td><td>- maximum number of entries in the returned list. 0 means no limit. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>The array of string objects representing the directory entries. </dd></dl>

<p>Reimplemented from <a class="el" href="classting_1_1fs_1_1File.htm#a3e680cf32e988290379ab70d0c58123b">ting::fs::File</a>.</p>

</div>
</div>
<a class="anchor" id="aebd0668a03646facdcd9bca41d60e507"></a><!-- doxytag: member="ting::fs::FSFile::MakeDir" ref="aebd0668a03646facdcd9bca41d60e507" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual void <a class="el" href="classting_1_1fs_1_1FSFile.htm#aebd0668a03646facdcd9bca41d60e507">ting::fs::FSFile::MakeDir</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Create directory. </p>
<p>If this <a class="el" href="classting_1_1fs_1_1File.htm" title="Abstract interface to a file system.">File</a> instance is a directory then try to create that directory on file system. Not all file systems are writable, so not all of them support directory creation. </p>
<dl class="exception"><dt><b>Exceptions:</b></dt><dd>
  <table class="exception">
    <tr><td class="paramname">IllegalStateExc</td><td>- if file is opened. </td></tr>
  </table>
  </dd>
</dl>

<p>Reimplemented from <a class="el" href="classting_1_1fs_1_1File.htm#a9a1f8b4f370b87030239453cfdcb21d8">ting::fs::File</a>.</p>

</div>
</div>
<a class="anchor" id="a8f9ca214addb34e0f50c1f9428ebf9a7"></a><!-- doxytag: member="ting::fs::FSFile::New" ref="a8f9ca214addb34e0f50c1f9428ebf9a7" args="(const std::string &amp;pathName=std::string())" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classting_1_1Ptr.htm">ting::Ptr</a>&lt;<a class="el" href="classting_1_1fs_1_1FSFile.htm">FSFile</a>&gt; <a class="el" href="classting_1_1fs_1_1FSFile.htm#a8f9ca214addb34e0f50c1f9428ebf9a7">ting::fs::FSFile::New</a> </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>pathName</em> = <code>std::string()</code></td><td>)</td>
          <td><code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Create new instance managed by auto-pointer. </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">pathName</td><td>- path to a file. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Auto-pointer holding a new <a class="el" href="classting_1_1fs_1_1FSFile.htm" title="Native OS file system implementation of File interface.">FSFile</a> instance. </dd></dl>

</div>
</div>
<a class="anchor" id="ab299340d05bc84adfca116480c9b8c21"></a><!-- doxytag: member="ting::fs::FSFile::Open" ref="ab299340d05bc84adfca116480c9b8c21" args="(E_Mode mode)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual void <a class="el" href="classting_1_1fs_1_1FSFile.htm#ab299340d05bc84adfca116480c9b8c21">ting::fs::FSFile::Open</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classting_1_1fs_1_1File.htm#a00e1ee34be46110fb687ca6215f6c3b4">E_Mode</a>&#160;</td>
          <td class="paramname"><em>mode</em></td><td>)</td>
          <td><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Open file. </p>
<p>Opens file for reading/writing or creates the file. </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">mode</td><td>- file opening mode (reading/writing/create). </td></tr>
  </table>
  </dd>
</dl>
<dl class="exception"><dt><b>Exceptions:</b></dt><dd>
  <table class="exception">
    <tr><td class="paramname">IllegalStateExc</td><td>- if file already opened. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classting_1_1fs_1_1File.htm#a75a04abf7392b39e64284439efd1f835">ting::fs::File</a>.</p>

</div>
</div>
<a class="anchor" id="a803e07106f5270de2272eb5efcd6761f"></a><!-- doxytag: member="ting::fs::FSFile::ReadInternal" ref="a803e07106f5270de2272eb5efcd6761f" args="(const ting::Buffer&lt; ting::u8 &gt; &amp;buf)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual size_t <a class="el" href="classting_1_1fs_1_1FSFile.htm#a803e07106f5270de2272eb5efcd6761f">ting::fs::FSFile::ReadInternal</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classting_1_1Buffer.htm">ting::Buffer</a>&lt; <a class="el" href="namespaceting.htm#a2debe052f64b3825ad3e8e3ee1861e66">ting::u8</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>buf</em></td><td>)</td>
          <td><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Read data from file. </p>
<p>Override this function to implement reading routine. This function is called by <a class="el" href="classting_1_1fs_1_1File.htm#a03bad219d0852bdaf5b273acff7023ab" title="Read data from file.">Read()</a> method after it has done some safety checks. It is assumed that the whole passed buffer needs to be filled with data. </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">buf</td><td>- buffer to fill with read data. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>number of bytes actually read. </dd></dl>

<p>Implements <a class="el" href="classting_1_1fs_1_1File.htm#ade8112c05d7e7130e19eb4705d6f1862">ting::fs::File</a>.</p>

</div>
</div>
<a class="anchor" id="a77778439062093090f358de90a779d20"></a><!-- doxytag: member="ting::fs::FSFile::Rewind" ref="a77778439062093090f358de90a779d20" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual void <a class="el" href="classting_1_1fs_1_1FSFile.htm#a77778439062093090f358de90a779d20">ting::fs::FSFile::Rewind</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Seek to the beginning of the file. </p>
<p>Not all file systems support rewinding. </p>
<dl class="exception"><dt><b>Exceptions:</b></dt><dd>
  <table class="exception">
    <tr><td class="paramname">IllegalStateExc</td><td>- if file is not opened. </td></tr>
  </table>
  </dd>
</dl>

<p>Reimplemented from <a class="el" href="classting_1_1fs_1_1File.htm#a16f8ef0e4184234731dfefb3cc0149e3">ting::fs::File</a>.</p>

</div>
</div>
<a class="anchor" id="ad591dc9d5d2a2c48e51cd2f120355ac8"></a><!-- doxytag: member="ting::fs::FSFile::Seek" ref="ad591dc9d5d2a2c48e51cd2f120355ac8" args="(size_t numBytesToSeek, bool seekForward)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classting_1_1fs_1_1FSFile.htm#ad591dc9d5d2a2c48e51cd2f120355ac8">ting::fs::FSFile::Seek</a> </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>numBytesToSeek</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>seekForward</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Seek forward or backward. </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">numBytesToSeek</td><td>- number of bytes to seek. </td></tr>
    <tr><td class="paramname">seekForward</td><td>- if true, then the seeking will be done forward. If false, then the seeking will be done backward. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ac36deb577ebde76a2c9e8e78d2746504"></a><!-- doxytag: member="ting::fs::FSFile::SeekBackward" ref="ac36deb577ebde76a2c9e8e78d2746504" args="(size_t numBytesToSeek)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual void <a class="el" href="classting_1_1fs_1_1FSFile.htm#ac36deb577ebde76a2c9e8e78d2746504">ting::fs::FSFile::SeekBackward</a> </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>numBytesToSeek</em></td><td>)</td>
          <td><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Seek backwards. </p>
<p>Seek file pointer backwards relatively to he current position. Not all file systems support seeking backwards. </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">numBytesToSeek</td><td>- number of bytes to skip. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>number of bytes actually skipped. </dd></dl>
<dl class="exception"><dt><b>Exceptions:</b></dt><dd>
  <table class="exception">
    <tr><td class="paramname">IllegalStateExc</td><td>- if file is not opened. </td></tr>
  </table>
  </dd>
</dl>

<p>Reimplemented from <a class="el" href="classting_1_1fs_1_1File.htm#a62ba851cc630b0ccda51d208c28eb309">ting::fs::File</a>.</p>

</div>
</div>
<a class="anchor" id="adbdf4fc043af1377b66ac5d3466896ae"></a><!-- doxytag: member="ting::fs::FSFile::SeekForward" ref="adbdf4fc043af1377b66ac5d3466896ae" args="(size_t numBytesToSeek)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual void <a class="el" href="classting_1_1fs_1_1FSFile.htm#adbdf4fc043af1377b66ac5d3466896ae">ting::fs::FSFile::SeekForward</a> </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>numBytesToSeek</em></td><td>)</td>
          <td><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Seek forward. </p>
<p>Seek file pointer forward relatively to current position. There is a default implementation of this function which uses <a class="el" href="classting_1_1fs_1_1File.htm#a03bad219d0852bdaf5b273acff7023ab" title="Read data from file.">Read()</a> method to skip the specified number of bytes by reading the data and wasting it away. </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">numBytesToSeek</td><td>- number of bytes to skip. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>number of bytes actually skipped. </dd></dl>
<dl class="exception"><dt><b>Exceptions:</b></dt><dd>
  <table class="exception">
    <tr><td class="paramname">IllegalStateExc</td><td>- if file is not opened. </td></tr>
  </table>
  </dd>
</dl>

<p>Reimplemented from <a class="el" href="classting_1_1fs_1_1File.htm#aff899e10d471c7101679d90986d0a0fe">ting::fs::File</a>.</p>

</div>
</div>
<a class="anchor" id="a05f68654032ba583ea67416d26b4daeb"></a><!-- doxytag: member="ting::fs::FSFile::SetRootDir" ref="a05f68654032ba583ea67416d26b4daeb" args="(const std::string &amp;dir)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classting_1_1fs_1_1FSFile.htm#a05f68654032ba583ea67416d26b4daeb">ting::fs::FSFile::SetRootDir</a> </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>dir</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set root directory. </p>
<p>Sets the root directory which holds the file system subtree. The file path set by <a class="el" href="classting_1_1fs_1_1File.htm#a2160184aa59678bc016113432fd8dc50" title="Set the path for this File instance.">SetPath()</a> method will refer to a file path relative to the root directory. That means that all file operations like opening the file and other will be performed on the actual file/directory referred by the final path which is a concatenation of the root directory and the path returned by <a class="el" href="classting_1_1fs_1_1File.htm#a2d02c33cbeced7cf6d1552852257f8af" title="Get the current path being held by this File instance.">Path()</a> method. </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">dir</td><td>- path to the root directory to set. It should have trailing '/' character. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ac3ffacaddab0843aa576ce17908a0e3e"></a><!-- doxytag: member="ting::fs::FSFile::TruePath" ref="ac3ffacaddab0843aa576ce17908a0e3e" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string <a class="el" href="classting_1_1fs_1_1FSFile.htm#ac3ffacaddab0843aa576ce17908a0e3e">ting::fs::FSFile::TruePath</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [inline, protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="ab664c71a5f3cfdf0fdeac260cea55d2c"></a><!-- doxytag: member="ting::fs::FSFile::WriteInternal" ref="ab664c71a5f3cfdf0fdeac260cea55d2c" args="(const ting::Buffer&lt; const ting::u8 &gt; &amp;buf)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual size_t <a class="el" href="classting_1_1fs_1_1FSFile.htm#ab664c71a5f3cfdf0fdeac260cea55d2c">ting::fs::FSFile::WriteInternal</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classting_1_1Buffer.htm">ting::Buffer</a>&lt; const <a class="el" href="namespaceting.htm#a2debe052f64b3825ad3e8e3ee1861e66">ting::u8</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>buf</em></td><td>)</td>
          <td><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Write data to file. </p>
<p>Override this function to implement writing routine. This function is called by <a class="el" href="classting_1_1fs_1_1File.htm#a556ca6d886aab4617188234409f640ee" title="Write data to file.">Write()</a> method after it has done some safety checks. It is assumed that the whole passed buffer needs to be written to the file. </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">buf</td><td>- buffer containing the data to write. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>number of bytes actually written. </dd></dl>

<p>Implements <a class="el" href="classting_1_1fs_1_1File.htm#a1a1d177ebb1d2553afe2ad0cce552a16">ting::fs::File</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="FSFile_8hpp_source.htm">FSFile.hpp</a></li>
</ul>
</div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="namespaceting.htm">ting</a>      </li>
      <li class="navelem"><a class="el" href="namespaceting_1_1fs.htm">fs</a>      </li>
      <li class="navelem"><a class="el" href="classting_1_1fs_1_1FSFile.htm">FSFile</a>      </li>

    <li class="footer">Generated on Thu Feb 21 2013 20:36:37 for libting by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
