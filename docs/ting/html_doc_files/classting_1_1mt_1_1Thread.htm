<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>libting: ting::mt::Thread Class Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">libting
   &#160;<span id="projectnumber">2.0.0</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.htm"><span>Classes</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.htm"><span>Class&#160;List</span></a></li>
      <li><a href="classes.htm"><span>Class&#160;Index</span></a></li>
      <li><a href="hierarchy.htm"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.htm"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('classting_1_1mt_1_1Thread.htm','');
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">ting::mt::Thread Class Reference</div>  </div>
</div><!--header-->
<div class="contents">
<!-- doxytag: class="ting::mt::Thread" -->
<p>a base class for threads.  
 <a href="classting_1_1mt_1_1Thread.htm#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="Thread_8hpp_source.htm">Thread.hpp</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for ting::mt::Thread:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classting_1_1mt_1_1Thread.png" usemap="#ting::mt::Thread_map" alt=""/>
  <map id="ting::mt::Thread_map" name="ting::mt::Thread_map">
<area href="classting_1_1mt_1_1MsgThread.htm" title="a thread with message queue." alt="ting::mt::MsgThread" shape="rect" coords="0,56,120,80"/>
</map>
 </div></div>

<p><a href="classting_1_1mt_1_1Thread-members.htm">List of all members.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1mt_1_1Thread_1_1Exc.htm">Exc</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic exception type thrown by <a class="el" href="classting_1_1mt_1_1Thread.htm" title="a base class for threads.">Thread</a> class.  <a href="classting_1_1mt_1_1Thread_1_1Exc.htm#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1mt_1_1Thread_1_1HasAlreadyBeenStartedExc.htm">HasAlreadyBeenStartedExc</a></td></tr>
<tr><td colspan="2"><h2><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef unsigned long int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1mt_1_1Thread.htm#af1134e33e3760ee4a1065ae77b48ead2">T_ThreadID</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classting_1_1mt_1_1Thread.htm" title="a base class for threads.">Thread</a> ID type.  <a href="#af1134e33e3760ee4a1065ae77b48ead2"></a><br/></td></tr>
<tr><td colspan="2"><h2><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1mt_1_1Thread.htm#ab1ef8b34b2b7dbeb80347039781d1607">Thread</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1mt_1_1Thread.htm#a7053c7d91ca855796da2b6b8dc82dd5d">~Thread</a> ()  throw ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1mt_1_1Thread.htm#a2f186862d9ed595dffaa41d6466f0c6a">Run</a> ()=0</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">This should be overridden, this is what to be run in new thread.  <a href="#a2f186862d9ed595dffaa41d6466f0c6a"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1mt_1_1Thread.htm#a617987020ba614400b51016517a8c62d">Start</a> (size_t stackSize=0)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Start thread execution.  <a href="#a617987020ba614400b51016517a8c62d"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1mt_1_1Thread.htm#af540425b5bd0e10fe879e53c8ce5535a">Join</a> ()  throw ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Wait for thread to finish its execution.  <a href="#af540425b5bd0e10fe879e53c8ce5535a"></a><br/></td></tr>
<tr><td colspan="2"><h2><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1mt_1_1Thread.htm#a4713c4af0c49f630338aacb5cb9b91f3">Sleep</a> (unsigned msec=0)  throw ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Suspend the thread for a given number of milliseconds.  <a href="#a4713c4af0c49f630338aacb5cb9b91f3"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classting_1_1mt_1_1Thread.htm#af1134e33e3760ee4a1065ae77b48ead2">T_ThreadID</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1mt_1_1Thread.htm#a1ee06257bad3487883fdb60404e023b8">GetCurrentThreadID</a> ()  throw ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">get current thread ID.  <a href="#a1ee06257bad3487883fdb60404e023b8"></a><br/></td></tr>
</table>
<hr/><a name="details" id="details"></a><h2>Detailed Description</h2>
<div class="textblock"><p>a base class for threads. </p>
<p>This class should be used as a base class for thread objects, one should override the <a class="el" href="classting_1_1mt_1_1Thread.htm#a2f186862d9ed595dffaa41d6466f0c6a" title="This should be overridden, this is what to be run in new thread.">Thread::Run()</a> method. </p>
</div><hr/><h2>Member Typedef Documentation</h2>
<a class="anchor" id="af1134e33e3760ee4a1065ae77b48ead2"></a><!-- doxytag: member="ting::mt::Thread::T_ThreadID" ref="af1134e33e3760ee4a1065ae77b48ead2" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef unsigned long int <a class="el" href="classting_1_1mt_1_1Thread.htm#af1134e33e3760ee4a1065ae77b48ead2">ting::mt::Thread::T_ThreadID</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p><a class="el" href="classting_1_1mt_1_1Thread.htm" title="a base class for threads.">Thread</a> ID type. </p>
<p><a class="el" href="classting_1_1mt_1_1Thread.htm" title="a base class for threads.">Thread</a> ID type is used to identify a thread. The type supports operator==() and operator!=() operators. </p>

</div>
</div>
<hr/><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="ab1ef8b34b2b7dbeb80347039781d1607"></a><!-- doxytag: member="ting::mt::Thread::Thread" ref="ab1ef8b34b2b7dbeb80347039781d1607" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">ting::mt::Thread::Thread </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a7053c7d91ca855796da2b6b8dc82dd5d"></a><!-- doxytag: member="ting::mt::Thread::~Thread" ref="a7053c7d91ca855796da2b6b8dc82dd5d" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classting_1_1mt_1_1Thread.htm#a7053c7d91ca855796da2b6b8dc82dd5d">ting::mt::Thread::~Thread</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td>  throw ()<code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<hr/><h2>Member Function Documentation</h2>
<a class="anchor" id="a1ee06257bad3487883fdb60404e023b8"></a><!-- doxytag: member="ting::mt::Thread::GetCurrentThreadID" ref="a1ee06257bad3487883fdb60404e023b8" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classting_1_1mt_1_1Thread.htm#af1134e33e3760ee4a1065ae77b48ead2">T_ThreadID</a> <a class="el" href="classting_1_1mt_1_1Thread.htm#a1ee06257bad3487883fdb60404e023b8">ting::mt::Thread::GetCurrentThreadID</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td>  throw ()<code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>get current thread ID. </p>
<p>Returns unique identifier of the currently executing thread. This ID can further be used to make assertions to make sure that some code is executed in a specific thread. E.g. assert that methods of some object are executed in the same thread where this object was created. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>unique thread identifier. </dd></dl>

</div>
</div>
<a class="anchor" id="af540425b5bd0e10fe879e53c8ce5535a"></a><!-- doxytag: member="ting::mt::Thread::Join" ref="af540425b5bd0e10fe879e53c8ce5535a" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classting_1_1mt_1_1Thread.htm#af540425b5bd0e10fe879e53c8ce5535a">ting::mt::Thread::Join</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td>  throw ()</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Wait for thread to finish its execution. </p>
<p>This function waits for the thread finishes its execution, i.e. until the thread returns from its <a class="el" href="classting_1_1mt_1_1Thread.htm#a2f186862d9ed595dffaa41d6466f0c6a" title="This should be overridden, this is what to be run in new thread.">Thread::Run()</a> method. Note: it is safe to call <a class="el" href="classting_1_1mt_1_1Thread.htm#af540425b5bd0e10fe879e53c8ce5535a" title="Wait for thread to finish its execution.">Join()</a> on not started threads, in that case it will return immediately. </p>

</div>
</div>
<a class="anchor" id="a2f186862d9ed595dffaa41d6466f0c6a"></a><!-- doxytag: member="ting::mt::Thread::Run" ref="a2f186862d9ed595dffaa41d6466f0c6a" args="()=0" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual void <a class="el" href="classting_1_1mt_1_1Thread.htm#a2f186862d9ed595dffaa41d6466f0c6a">ting::mt::Thread::Run</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [pure virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>This should be overridden, this is what to be run in new thread. </p>
<p>Pure virtual method, it is called in new thread when thread runs. </p>

</div>
</div>
<a class="anchor" id="a4713c4af0c49f630338aacb5cb9b91f3"></a><!-- doxytag: member="ting::mt::Thread::Sleep" ref="a4713c4af0c49f630338aacb5cb9b91f3" args="(unsigned msec=0)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void <a class="el" href="classting_1_1mt_1_1Thread.htm#a4713c4af0c49f630338aacb5cb9b91f3">ting::mt::Thread::Sleep</a> </td>
          <td>(</td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>msec</em> = <code>0</code></td><td>)</td>
          <td>  throw ()<code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Suspend the thread for a given number of milliseconds. </p>
<p>Suspends the thread which called this function for a given number of milliseconds. This function guarantees that the calling thread will be suspended for AT LEAST 'msec' milliseconds. </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">msec</td><td>- number of milliseconds the thread should be suspended. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a617987020ba614400b51016517a8c62d"></a><!-- doxytag: member="ting::mt::Thread::Start" ref="a617987020ba614400b51016517a8c62d" args="(size_t stackSize=0)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classting_1_1mt_1_1Thread.htm#a617987020ba614400b51016517a8c62d">ting::mt::Thread::Start</a> </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>stackSize</em> = <code>0</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Start thread execution. </p>
<p>Starts execution of the thread. <a class="el" href="classting_1_1mt_1_1Thread.htm" title="a base class for threads.">Thread</a>'s <a class="el" href="classting_1_1mt_1_1Thread.htm#a2f186862d9ed595dffaa41d6466f0c6a" title="This should be overridden, this is what to be run in new thread.">Thread::Run()</a> method will be run as separate thread of execution. </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">stackSize</td><td>- size of the stack in bytes which should be allocated for this thread. If stackSize is 0 then system default stack size is used (stack size depends on underlying OS). </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="Thread_8hpp_source.htm">Thread.hpp</a></li>
</ul>
</div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="namespaceting.htm">ting</a>      </li>
      <li class="navelem"><a class="el" href="namespaceting_1_1mt.htm">mt</a>      </li>
      <li class="navelem"><a class="el" href="classting_1_1mt_1_1Thread.htm">Thread</a>      </li>

    <li class="footer">Generated on Thu Feb 21 2013 20:36:37 for libting by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
