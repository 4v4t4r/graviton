<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>libting: Ref.hpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">libting
   &#160;<span id="projectnumber">2.0.0</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.htm"><span>File&#160;List</span></a></li>
      <li><a href="globals.htm"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('Ref_8hpp.htm','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">Ref.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="Ref_8hpp.htm">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* The MIT License:</span>
<a name="l00002"></a>00002 <span class="comment"></span>
<a name="l00003"></a>00003 <span class="comment">Copyright (c) 2008-2012 Ivan Gagis &lt;igagis@gmail.com&gt;</span>
<a name="l00004"></a>00004 <span class="comment"></span>
<a name="l00005"></a>00005 <span class="comment">Permission is hereby granted, free of charge, to any person obtaining a copy</span>
<a name="l00006"></a>00006 <span class="comment">of this software and associated documentation files (the &quot;Software&quot;), to deal</span>
<a name="l00007"></a>00007 <span class="comment">in the Software without restriction, including without limitation the rights</span>
<a name="l00008"></a>00008 <span class="comment">to use, copy, modify, merge, publish, distribute, sublicense, and/or sell</span>
<a name="l00009"></a>00009 <span class="comment">copies of the Software, and to permit persons to whom the Software is</span>
<a name="l00010"></a>00010 <span class="comment">furnished to do so, subject to the following conditions:</span>
<a name="l00011"></a>00011 <span class="comment"></span>
<a name="l00012"></a>00012 <span class="comment">The above copyright notice and this permission notice shall be included in</span>
<a name="l00013"></a>00013 <span class="comment">all copies or substantial portions of the Software.</span>
<a name="l00014"></a>00014 <span class="comment"></span>
<a name="l00015"></a>00015 <span class="comment">THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span>
<a name="l00016"></a>00016 <span class="comment">IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span>
<a name="l00017"></a>00017 <span class="comment">FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span>
<a name="l00018"></a>00018 <span class="comment">AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span>
<a name="l00019"></a>00019 <span class="comment">LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span>
<a name="l00020"></a>00020 <span class="comment">OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN</span>
<a name="l00021"></a>00021 <span class="comment">THE SOFTWARE. */</span>
<a name="l00022"></a>00022 
<a name="l00023"></a>00023 <span class="comment">// Home page: http://ting.googlecode.com</span>
<a name="l00024"></a>00024 
<a name="l00025"></a>00025 
<a name="l00026"></a>00026 
<a name="l00033"></a>00033 <span class="preprocessor">#pragma once</span>
<a name="l00034"></a>00034 <span class="preprocessor"></span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &quot;<a class="code" href="debug_8hpp.htm">debug.hpp</a>&quot;</span>
<a name="l00036"></a>00036 <span class="preprocessor">#include &quot;<a class="code" href="types_8hpp.htm" title="General types definitions.">types.hpp</a>&quot;</span>
<a name="l00037"></a>00037 <span class="preprocessor">#include &quot;<a class="code" href="atomic_8hpp.htm">atomic.hpp</a>&quot;</span>
<a name="l00038"></a>00038 <span class="preprocessor">#include &quot;<a class="code" href="PoolStored_8hpp.htm" title="Memory Pool. Alternative memory allocation functions for simple objects. The main purpose of this fac...">PoolStored.hpp</a>&quot;</span>
<a name="l00039"></a>00039 
<a name="l00040"></a>00040 <span class="comment">//#define M_ENABLE_REF_PRINT</span>
<a name="l00041"></a>00041 <span class="preprocessor">#ifdef M_ENABLE_REF_PRINT</span>
<a name="l00042"></a>00042 <span class="preprocessor"></span><span class="preprocessor">#define M_REF_PRINT(x) TRACE(&lt;&lt;&quot;[REF]&quot; x)</span>
<a name="l00043"></a>00043 <span class="preprocessor"></span><span class="preprocessor">#else</span>
<a name="l00044"></a><a class="code" href="Ref_8hpp.htm#ab9f7ab373a0dd316b90dc3a9b5645fb4">00044</a> <span class="preprocessor"></span><span class="preprocessor">#define M_REF_PRINT(x)</span>
<a name="l00045"></a>00045 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00046"></a>00046 <span class="preprocessor"></span>
<a name="l00047"></a>00047 <span class="keyword">namespace </span>ting{
<a name="l00048"></a>00048 
<a name="l00049"></a>00049 <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt; <span class="keyword">class </span>Ref;<span class="comment">//forward declaration</span>
<a name="l00050"></a>00050 <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt; <span class="keyword">class </span>WeakRef;<span class="comment">//forward declaration</span>
<a name="l00051"></a>00051 
<a name="l00093"></a><a class="code" href="classting_1_1RefCounted.htm">00093</a> <span class="keyword">class </span><a class="code" href="classting_1_1RefCounted.htm" title="base class for a reference counted object.">RefCounted</a>{
<a name="l00094"></a><a class="code" href="classting_1_1RefCounted.htm#a3ea5d13a451b56b46e2c53b8da3e4b35">00094</a>         <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt; <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classting_1_1Ref.htm" title="Reference to a reference counted object.">Ref</a>;
<a name="l00095"></a><a class="code" href="classting_1_1RefCounted.htm#a38b1f54996da1832fd565f2caadd9cfc">00095</a>         <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt; <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classting_1_1WeakRef.htm" title="Weak Reference to a reference counted object.">WeakRef</a>;
<a name="l00096"></a>00096 
<a name="l00097"></a>00097 
<a name="l00098"></a>00098 <span class="keyword">private</span>:
<a name="l00099"></a>00099 
<a name="l00100"></a>00100         <span class="keyword">struct </span>Counter{
<a name="l00101"></a>00101                 <a class="code" href="classting_1_1atomic_1_1U32.htm" title="Atomic unsigned 32bit integer.">ting::atomic::U32</a> numStrongRefs;
<a name="l00102"></a>00102 
<a name="l00103"></a>00103                 <span class="comment">//WeakRef&#39;s are the references which control the life time of the Counter object.</span>
<a name="l00104"></a>00104                 <span class="comment">//I.e. WeakRef&#39;s are playing role of _strong_ references for Counter object.</span>
<a name="l00105"></a>00105                 <span class="comment">//Think of RefCounted object as additional _strong_ reference to the Counter object,</span>
<a name="l00106"></a>00106                 <span class="comment">//this is why number of WeakRef&#39;s is initialized to 1.</span>
<a name="l00107"></a>00107                 <a class="code" href="classting_1_1atomic_1_1U32.htm" title="Atomic unsigned 32bit integer.">ting::atomic::U32</a> numWeakRefs;
<a name="l00108"></a>00108 
<a name="l00109"></a>00109                 <span class="keyword">inline</span> Counter() :
<a name="l00110"></a>00110                                 numWeakRefs(1)<span class="comment">//1 because RefCounted acts as weak reference.</span>
<a name="l00111"></a>00111                 {
<a name="l00112"></a>00112                         <a class="code" href="Ref_8hpp.htm#ab9f7ab373a0dd316b90dc3a9b5645fb4">M_REF_PRINT</a>(&lt;&lt; <span class="stringliteral">&quot;Counter::Counter(): counter object created&quot;</span> &lt;&lt; std::endl)
<a name="l00113"></a>00113                 }
<a name="l00114"></a>00114 
<a name="l00115"></a>00115                 <span class="keyword">inline</span> ~Counter()throw(){
<a name="l00116"></a>00116                         <a class="code" href="Ref_8hpp.htm#ab9f7ab373a0dd316b90dc3a9b5645fb4">M_REF_PRINT</a>(&lt;&lt; <span class="stringliteral">&quot;Counter::~Counter(): counter object destroyed&quot;</span> &lt;&lt; std::endl)
<a name="l00117"></a>00117                 }
<a name="l00118"></a>00118 
<a name="l00119"></a>00119                 <span class="keyword">inline</span> <span class="keyword">static</span> <span class="keywordtype">void</span>* <a class="code" href="classting_1_1RefCounted.htm#a6fa5dc08f8d691a834e0e4baef9f3a47" title="operator new.">operator new</a>(<span class="keywordtype">size_t</span> size){
<a name="l00120"></a>00120                         <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(size == <span class="keyword">sizeof</span>(Counter))
<a name="l00121"></a>00121 
<a name="l00122"></a>00122                         return <a class="code" href="classting_1_1RefCounted.htm#a30ddf44c5f04b1d5512d4933676a5a97" title="Constructor.">RefCounted</a>::memoryPool.Alloc_ts();
<a name="l00123"></a>00123                 }
<a name="l00124"></a>00124 
<a name="l00125"></a>00125                 inline static <span class="keywordtype">void</span> operator delete(<span class="keywordtype">void</span> *p)throw(){
<a name="l00126"></a>00126                         RefCounted::memoryPool.Free_ts(p);
<a name="l00127"></a>00127                 }
<a name="l00128"></a>00128         };
<a name="l00129"></a>00129 
<a name="l00130"></a>00130 
<a name="l00131"></a>00131         <span class="comment">//Memory pool for Counter objects</span>
<a name="l00132"></a>00132         <span class="keyword">static</span> <a class="code" href="classting_1_1MemoryPool.htm">ting::MemoryPool&lt;sizeof(Counter), 512&gt;</a> memoryPool;
<a name="l00133"></a>00133 
<a name="l00134"></a>00134         Counter *counter;
<a name="l00135"></a>00135 
<a name="l00136"></a>00136 
<a name="l00137"></a>00137 
<a name="l00138"></a>00138 <span class="keyword">protected</span>:
<a name="l00144"></a>00144         <span class="comment">//only base classes can construct this class</span>
<a name="l00145"></a>00145         <span class="comment">//i.e. use of this class is allowed only as a base class</span>
<a name="l00146"></a><a class="code" href="classting_1_1RefCounted.htm#a30ddf44c5f04b1d5512d4933676a5a97">00146</a>         <span class="keyword">inline</span> <a class="code" href="classting_1_1RefCounted.htm#a30ddf44c5f04b1d5512d4933676a5a97" title="Constructor.">RefCounted</a>(){
<a name="l00147"></a>00147                 <span class="comment">//NOTE: do not create Counter object in RefCounted constructor</span>
<a name="l00148"></a>00148                 <span class="comment">//      initializer list because MSVC complains about usage of &quot;this&quot;</span>
<a name="l00149"></a>00149                 <span class="comment">//      keyword in initializer list.</span>
<a name="l00150"></a>00150                 this-&gt;counter = <span class="keyword">new</span> Counter();
<a name="l00151"></a>00151         }
<a name="l00152"></a>00152 
<a name="l00153"></a>00153 
<a name="l00154"></a>00154 
<a name="l00165"></a><a class="code" href="classting_1_1RefCounted.htm#a6fa5dc08f8d691a834e0e4baef9f3a47">00165</a>         <span class="keyword">inline</span> <span class="keyword">static</span> <span class="keywordtype">void</span>* <a class="code" href="classting_1_1RefCounted.htm#a6fa5dc08f8d691a834e0e4baef9f3a47" title="operator new.">operator new</a>(<span class="keywordtype">size_t</span> s){
<a name="l00166"></a>00166                 <a class="code" href="classting_1_1RefCounted.htm#a6fa5dc08f8d691a834e0e4baef9f3a47" title="operator new.">return ::operator new</a>(s);
<a name="l00167"></a>00167         }
<a name="l00168"></a>00168 
<a name="l00169"></a>00169 <span class="keyword">protected</span>:
<a name="l00183"></a><a class="code" href="classting_1_1RefCounted.htm#a63e539a073c41d37faefea450ff440ed">00183</a>         <span class="keyword">inline</span> <span class="keyword">static</span> <span class="keywordtype">void</span> <a class="code" href="classting_1_1RefCounted.htm#a63e539a073c41d37faefea450ff440ed" title="operator delete.">operator delete</a>(<span class="keywordtype">void</span> *p)<span class="keywordflow">throw</span>(){
<a name="l00184"></a>00184                 ::operator <span class="keyword">delete</span>(p);
<a name="l00185"></a>00185         }
<a name="l00186"></a>00186 
<a name="l00191"></a><a class="code" href="classting_1_1RefCounted.htm#aa4a7451e5971e05de0ac03ec8d826e67">00191</a>         <span class="keyword">virtual</span> <a class="code" href="classting_1_1RefCounted.htm#aa4a7451e5971e05de0ac03ec8d826e67" title="Destructor.">~RefCounted</a>()throw(){
<a name="l00192"></a>00192                 <span class="comment">//Remove reference to Counter object held by this RefCounted</span>
<a name="l00193"></a>00193                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(this-&gt;counter)
<a name="l00194"></a>00194 
<a name="l00195"></a>00195 <span class="preprocessor">#ifdef DEBUG</span>
<a name="l00196"></a>00196 <span class="preprocessor"></span>                <span class="comment">//since RefCounted is being destroyed, that means that there are no strong ref&#39;s left</span>
<a name="l00197"></a>00197                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(this-&gt;counter-&gt;numStrongRefs.FetchAndAdd(0) == 0)
<a name="l00198"></a>00198 {
<a name="l00199"></a>00199                 <a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">ting::u32</a> res = this-&gt;counter-&gt;numWeakRefs.FetchAndAdd(0);
<a name="l00200"></a>00200                 <a class="code" href="debug_8hpp.htm#aaf04cfaa53d7b0bfcdeec60eaf7eed3a">ASSERT_INFO</a>(res &gt;= 1, <span class="stringliteral">&quot;res = &quot;</span> &lt;&lt; res)
<a name="l00201"></a>00201 }
<a name="l00202"></a>00202 <span class="preprocessor">#endif</span>
<a name="l00203"></a>00203 <span class="preprocessor"></span>
<a name="l00204"></a>00204                 <span class="keywordflow">if</span>(this-&gt;counter-&gt;numWeakRefs.FetchAndSubtract(1) == 1){<span class="comment">//if there was only 1 weak ref</span>
<a name="l00205"></a>00205                         <span class="keyword">delete</span> this-&gt;counter;
<a name="l00206"></a>00206                 }
<a name="l00207"></a>00207         }
<a name="l00208"></a>00208 
<a name="l00209"></a>00209 <span class="keyword">public</span>:
<a name="l00218"></a><a class="code" href="classting_1_1RefCounted.htm#af8dc6338d475fbdf23291071e4b7d5c7">00218</a>         <span class="keyword">inline</span> <span class="keywordtype">unsigned</span> <a class="code" href="classting_1_1RefCounted.htm#af8dc6338d475fbdf23291071e4b7d5c7" title="Returns current number of strong references pointing to this object.">NumRefs</a>()<span class="keyword">const</span> throw(){
<a name="l00219"></a>00219                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(this-&gt;counter)
<a name="l00220"></a>00220                 <a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">ting::u32</a> ret = this-&gt;counter-&gt;numStrongRefs.FetchAndAdd(0);
<a name="l00221"></a>00221                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(ret &gt; 0)
<a name="l00222"></a>00222                 <span class="keywordflow">return</span> unsigned(ret);
<a name="l00223"></a>00223         }
<a name="l00224"></a>00224 
<a name="l00225"></a>00225 <span class="keyword">private</span>:
<a name="l00226"></a>00226         <span class="comment">//copy constructor is private, no copying</span>
<a name="l00227"></a>00227         <span class="keyword">inline</span> <a class="code" href="classting_1_1RefCounted.htm#a30ddf44c5f04b1d5512d4933676a5a97" title="Constructor.">RefCounted</a>(<span class="keyword">const</span> <a class="code" href="classting_1_1RefCounted.htm" title="base class for a reference counted object.">RefCounted</a>&amp;);
<a name="l00228"></a>00228         <span class="keyword">inline</span> <a class="code" href="classting_1_1RefCounted.htm" title="base class for a reference counted object.">RefCounted</a>&amp; operator=(<span class="keyword">const</span> <a class="code" href="classting_1_1RefCounted.htm" title="base class for a reference counted object.">RefCounted</a>&amp;);
<a name="l00229"></a>00229 };<span class="comment">//~class RefCounted</span>
<a name="l00230"></a>00230 
<a name="l00231"></a>00231 
<a name="l00232"></a>00232 
<a name="l00240"></a>00240 <span class="comment">//T should be RefCounted!!!</span>
<a name="l00241"></a><a class="code" href="classting_1_1Ref.htm">00241</a> <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt; <span class="keyword">class </span><a class="code" href="classting_1_1Ref.htm" title="Reference to a reference counted object.">Ref</a>{
<a name="l00242"></a><a class="code" href="classting_1_1Ref.htm#a41dafcb9b25b84e93a71f6792a5192bd">00242</a>         <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classting_1_1WeakRef.htm" title="Weak Reference to a reference counted object.">WeakRef</a>&lt;T&gt;;
<a name="l00243"></a><a class="code" href="classting_1_1Ref.htm#a3ea5d13a451b56b46e2c53b8da3e4b35">00243</a>         <span class="keyword">template</span> &lt;<span class="keyword">class</span> TS&gt; <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classting_1_1Ref.htm" title="Reference to a reference counted object.">Ref</a>;
<a name="l00244"></a>00244 
<a name="l00245"></a>00245         T *p;
<a name="l00246"></a>00246 
<a name="l00247"></a>00247 
<a name="l00248"></a>00248 
<a name="l00249"></a>00249 <span class="keyword">public</span>:
<a name="l00255"></a><a class="code" href="classting_1_1Ref.htm#a0830c1a768721cd17a63beaf6112234b">00255</a>         <span class="keyword">template</span> &lt;<span class="keyword">class</span> TS&gt; <span class="keyword">inline</span> <a class="code" href="classting_1_1Ref.htm" title="Reference to a reference counted object.">Ref&lt;TS&gt;</a> <a class="code" href="classting_1_1Ref.htm#a0830c1a768721cd17a63beaf6112234b" title="cast statically to another class.">StaticCast</a>()<span class="keyword">const</span> throw(){
<a name="l00256"></a>00256                 <span class="keywordflow">return</span> <a class="code" href="classting_1_1Ref.htm" title="Reference to a reference counted object.">Ref&lt;TS&gt;</a>(<span class="keyword">static_cast&lt;</span>TS*<span class="keyword">&gt;</span>(this-&gt;operator-&gt;()));
<a name="l00257"></a>00257         }
<a name="l00258"></a>00258 
<a name="l00259"></a>00259 
<a name="l00260"></a>00260 
<a name="l00268"></a><a class="code" href="classting_1_1Ref.htm#a741825876e9978d8c1ed52318ada6597">00268</a>         <span class="keyword">template</span> &lt;<span class="keyword">class</span> TS&gt; <span class="keyword">inline</span> <span class="keyword">const</span> <a class="code" href="classting_1_1Ref.htm" title="Reference to a reference counted object.">Ref&lt;TS&gt;</a> <a class="code" href="classting_1_1Ref.htm#a741825876e9978d8c1ed52318ada6597" title="cast dynamically.">DynamicCast</a>()<span class="keyword">const</span> throw(){
<a name="l00269"></a>00269                 <span class="keyword">const</span> TS* t = <span class="keyword">dynamic_cast&lt;</span><span class="keyword">const </span>TS*<span class="keyword">&gt;</span>(this-&gt;operator-&gt;());
<a name="l00270"></a>00270                 <span class="keywordflow">if</span>(t){
<a name="l00271"></a>00271                         <span class="keywordflow">return</span> <a class="code" href="classting_1_1Ref.htm" title="Reference to a reference counted object.">Ref&lt;TS&gt;</a>(<span class="keyword">const_cast&lt;</span>TS*<span class="keyword">&gt;</span>(t));
<a name="l00272"></a>00272                 }<span class="keywordflow">else</span>{
<a name="l00273"></a>00273                         <span class="keywordflow">return</span> <a class="code" href="classting_1_1Ref.htm" title="Reference to a reference counted object.">Ref&lt;TS&gt;</a>();
<a name="l00274"></a>00274                 }
<a name="l00275"></a>00275         }
<a name="l00276"></a>00276 
<a name="l00277"></a>00277 
<a name="l00278"></a>00278 
<a name="l00286"></a>00286         <span class="comment">//NOTE: the int argument is just to make possible</span>
<a name="l00287"></a>00287         <span class="comment">//auto conversion from 0 to invalid Ref object</span>
<a name="l00288"></a>00288         <span class="comment">//i.e. it will be possible to write &#39;return 0;&#39;</span>
<a name="l00289"></a>00289         <span class="comment">//from the function returning Ref</span>
<a name="l00290"></a><a class="code" href="classting_1_1Ref.htm#a361080c4b6f92dc9a5f46ccbd8259ded">00290</a>         <span class="keyword">inline</span> <a class="code" href="classting_1_1RefCounted.htm#a3ea5d13a451b56b46e2c53b8da3e4b35">Ref</a>(<span class="keywordtype">int</span> <a class="code" href="atomic_8hpp.htm#a06cc42a46c3f1cdf8c7f856fe28fc463">v</a> = 0)throw() :
<a name="l00291"></a>00291                         p(0)
<a name="l00292"></a>00292         {
<a name="l00293"></a>00293                 <a class="code" href="Ref_8hpp.htm#ab9f7ab373a0dd316b90dc3a9b5645fb4">M_REF_PRINT</a>(&lt;&lt; <span class="stringliteral">&quot;Ref::Ref(): invoked, p=&quot;</span> &lt;&lt; (this-&gt;p) &lt;&lt; std::endl)
<a name="l00294"></a>00294         }
<a name="l00295"></a>00295 
<a name="l00296"></a>00296 
<a name="l00297"></a>00297 
<a name="l00308"></a>00308         <span class="comment">//NOTE: this constructor should be explicit to prevent undesired conversions from T* to Ref&lt;T&gt;</span>
<a name="l00309"></a><a class="code" href="classting_1_1Ref.htm#ad259087da59626e166d42145ab09b88b">00309</a>         <span class="keyword">explicit</span> <span class="keyword">inline</span> <a class="code" href="classting_1_1RefCounted.htm#a3ea5d13a451b56b46e2c53b8da3e4b35">Ref</a>(T* rc)<span class="keywordflow">throw</span>() :
<a name="l00310"></a>00310                         p(rc)
<a name="l00311"></a>00311         {
<a name="l00312"></a>00312                 <a class="code" href="Ref_8hpp.htm#ab9f7ab373a0dd316b90dc3a9b5645fb4">M_REF_PRINT</a>(&lt;&lt; <span class="stringliteral">&quot;Ref::Ref(rc): invoked, p = &quot;</span> &lt;&lt; (this-&gt;p) &lt;&lt; std::endl)
<a name="l00313"></a>00313                 <a class="code" href="debug_8hpp.htm#aaf04cfaa53d7b0bfcdeec60eaf7eed3a">ASSERT_INFO</a>(this-&gt;p, <span class="stringliteral">&quot;Ref::Ref(rc): rc is 0&quot;</span>)
<a name="l00314"></a>00314 
<a name="l00315"></a>00315                 <span class="comment">//NOTE: in order to make sure that passed object inherits RefCounted</span>
<a name="l00316"></a>00316                 <span class="comment">//do static_cast() to RefCounted. Since the T type may be a const type</span>
<a name="l00317"></a>00317                 <span class="comment">//(e.g. Ref&lt;const int&gt;), so cast to const RefCounted and then use const_cast().</span>
<a name="l00318"></a>00318                 <span class="keywordflow">if</span>(this-&gt;p){
<a name="l00319"></a>00319                         <span class="keyword">const_cast&lt;</span><a class="code" href="classting_1_1RefCounted.htm" title="base class for a reference counted object.">RefCounted</a>*<span class="keyword">&gt;</span>(
<a name="l00320"></a>00320                                         <span class="keyword">static_cast&lt;</span><span class="keyword">const </span><a class="code" href="classting_1_1RefCounted.htm" title="base class for a reference counted object.">RefCounted</a>*<span class="keyword">&gt;</span>(this-&gt;p)
<a name="l00321"></a>00321                                 )-&gt;counter-&gt;numStrongRefs.FetchAndAdd(1);
<a name="l00322"></a>00322                 }
<a name="l00323"></a>00323                 <a class="code" href="Ref_8hpp.htm#ab9f7ab373a0dd316b90dc3a9b5645fb4">M_REF_PRINT</a>(&lt;&lt; <span class="stringliteral">&quot;Ref::Ref(rc): exiting&quot;</span> &lt;&lt; (this-&gt;p) &lt;&lt; std::endl)
<a name="l00324"></a>00324         }
<a name="l00325"></a>00325 
<a name="l00326"></a>00326 
<a name="l00327"></a>00327 
<a name="l00332"></a>00332         <span class="keyword">inline</span> <a class="code" href="classting_1_1RefCounted.htm#a3ea5d13a451b56b46e2c53b8da3e4b35">Ref</a>(<span class="keyword">const</span> <a class="code" href="classting_1_1WeakRef.htm" title="Weak Reference to a reference counted object.">WeakRef&lt;T&gt;</a> &amp;r)<span class="keywordflow">throw</span>();
<a name="l00333"></a>00333 
<a name="l00334"></a>00334 
<a name="l00335"></a>00335 
<a name="l00336"></a>00336 <span class="keyword">private</span>:
<a name="l00337"></a>00337         <span class="keyword">template</span> &lt;<span class="keyword">class</span> TS&gt; <span class="keyword">inline</span> <span class="keywordtype">void</span> InitFromStrongRef(<span class="keyword">const</span> <a class="code" href="classting_1_1Ref.htm" title="Reference to a reference counted object.">Ref&lt;TS&gt;</a>&amp; r)<span class="keywordflow">throw</span>(){
<a name="l00338"></a>00338                 this-&gt;p = r.p; <span class="comment">//should downcast automatically</span>
<a name="l00339"></a>00339                 <span class="keywordflow">if</span>(this-&gt;p){
<a name="l00340"></a>00340                         <span class="comment">//NOTE: first, static cast to const RefCounted, because even if T is a const type</span>
<a name="l00341"></a>00341                         <span class="comment">//it is possible to do. After that we can cast to non-const RefCounted and increment number of strong references.</span>
<a name="l00342"></a>00342                         <span class="comment">//Thus, we also ensure at compile time that T inherits RefCounted.</span>
<a name="l00343"></a>00343                         <span class="keyword">const_cast&lt;</span><a class="code" href="classting_1_1RefCounted.htm" title="base class for a reference counted object.">RefCounted</a>*<span class="keyword">&gt;</span>(
<a name="l00344"></a>00344                                         <span class="keyword">static_cast&lt;</span><span class="keyword">const </span><a class="code" href="classting_1_1RefCounted.htm" title="base class for a reference counted object.">RefCounted</a>*<span class="keyword">&gt;</span>(this-&gt;p)
<a name="l00345"></a>00345                                 )-&gt;counter-&gt;numStrongRefs.FetchAndAdd(1);
<a name="l00346"></a>00346                 }
<a name="l00347"></a>00347         }
<a name="l00348"></a>00348 
<a name="l00349"></a>00349 
<a name="l00350"></a>00350 <span class="keyword">public</span>:
<a name="l00356"></a>00356         <span class="comment">//copy constructor</span>
<a name="l00357"></a><a class="code" href="classting_1_1Ref.htm#a034dbecf437679fc9861988db71fdc0a">00357</a>         <span class="keyword">inline</span> <a class="code" href="classting_1_1Ref.htm#a034dbecf437679fc9861988db71fdc0a" title="Copy constructor.">Ref</a>(<span class="keyword">const</span> <a class="code" href="classting_1_1Ref.htm" title="Reference to a reference counted object.">Ref</a>&amp; r)<span class="keywordflow">throw</span>(){
<a name="l00358"></a>00358                 <a class="code" href="Ref_8hpp.htm#ab9f7ab373a0dd316b90dc3a9b5645fb4">M_REF_PRINT</a>(&lt;&lt; <span class="stringliteral">&quot;Ref::Ref(copy): invoked, r.p = &quot;</span> &lt;&lt; (r.p) &lt;&lt; std::endl)
<a name="l00359"></a>00359                 this-&gt;InitFromStrongRef&lt;T&gt;(r);
<a name="l00360"></a>00360         }
<a name="l00361"></a>00361 
<a name="l00362"></a>00362 
<a name="l00363"></a>00363 
<a name="l00369"></a>00369         <span class="comment">//downcast / to-const cast constructor</span>
<a name="l00370"></a><a class="code" href="classting_1_1Ref.htm#a904152b4a1c644a5533cefb7c6a00fed">00370</a>         <span class="keyword">template</span> &lt;<span class="keyword">class</span> TS&gt; <span class="keyword">inline</span> <a class="code" href="classting_1_1Ref.htm#a904152b4a1c644a5533cefb7c6a00fed" title="Constructor for automatic down-casting and const-casting.">Ref</a>(<span class="keyword">const</span> <a class="code" href="classting_1_1Ref.htm" title="Reference to a reference counted object.">Ref&lt;TS&gt;</a>&amp; r)<span class="keywordflow">throw</span>(){
<a name="l00371"></a>00371                 <a class="code" href="Ref_8hpp.htm#ab9f7ab373a0dd316b90dc3a9b5645fb4">M_REF_PRINT</a>(&lt;&lt; <span class="stringliteral">&quot;Ref::Ref(copy): invoked, r.p = &quot;</span> &lt;&lt; (r.p) &lt;&lt; std::endl)
<a name="l00372"></a>00372                 this-&gt;InitFromStrongRef&lt;TS&gt;(r);
<a name="l00373"></a>00373         }
<a name="l00374"></a>00374 
<a name="l00375"></a>00375 
<a name="l00376"></a>00376 
<a name="l00382"></a><a class="code" href="classting_1_1Ref.htm#a48d952b3d130ea63c3c3f2e88b89361d">00382</a>         <span class="keyword">inline</span> operator Ref&lt;const T&gt;&amp;()throw(){
<a name="l00383"></a>00383                 <span class="keywordflow">return</span> <span class="keyword">reinterpret_cast&lt;</span><a class="code" href="classting_1_1Ref.htm" title="Reference to a reference counted object.">Ref&lt;const T&gt;</a>&amp;<span class="keyword">&gt;</span>(*this);
<a name="l00384"></a>00384         }
<a name="l00385"></a>00385 
<a name="l00386"></a>00386 
<a name="l00387"></a>00387 
<a name="l00393"></a><a class="code" href="classting_1_1Ref.htm#a5dd7936677eadf7b7437595a6c1441aa">00393</a>         <span class="keyword">inline</span> operator const Ref&lt;const T&gt;&amp;()<span class="keyword">const</span> throw(){
<a name="l00394"></a>00394                 <span class="keywordflow">return</span> <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><a class="code" href="classting_1_1Ref.htm" title="Reference to a reference counted object.">Ref&lt;const T&gt;</a>&amp;<span class="keyword">&gt;</span>(*this);
<a name="l00395"></a>00395         }
<a name="l00396"></a>00396 
<a name="l00397"></a>00397 
<a name="l00398"></a>00398 
<a name="l00417"></a><a class="code" href="classting_1_1Ref.htm#a7784371962da48af439c14ac8eb649f0">00417</a>         <a class="code" href="classting_1_1Ref.htm" title="Reference to a reference counted object.">Ref</a>&amp; <a class="code" href="classting_1_1Ref.htm#a7784371962da48af439c14ac8eb649f0" title="Move reference.">TakeFrom</a>(<a class="code" href="classting_1_1Ref.htm" title="Reference to a reference counted object.">Ref</a>&amp; ref){
<a name="l00418"></a>00418                 this-&gt;Destroy();
<a name="l00419"></a>00419                 this-&gt;p = ref.p;
<a name="l00420"></a>00420                 ref.p = 0;
<a name="l00421"></a>00421         }
<a name="l00422"></a>00422 
<a name="l00423"></a>00423 
<a name="l00424"></a>00424 
<a name="l00428"></a><a class="code" href="classting_1_1Ref.htm#a8064c9a044a48a1b39e99a0bc6d337b2">00428</a>         <span class="keyword">inline</span> <a class="code" href="classting_1_1Ref.htm#a8064c9a044a48a1b39e99a0bc6d337b2" title="Destructor.">~Ref</a>()throw(){
<a name="l00429"></a>00429                 <a class="code" href="Ref_8hpp.htm#ab9f7ab373a0dd316b90dc3a9b5645fb4">M_REF_PRINT</a>(&lt;&lt; <span class="stringliteral">&quot;Ref::~Ref(): invoked, p = &quot;</span> &lt;&lt; (this-&gt;p) &lt;&lt; std::endl)
<a name="l00430"></a>00430                 this-&gt;Destroy();
<a name="l00431"></a>00431         }
<a name="l00432"></a>00432 
<a name="l00433"></a>00433 
<a name="l00434"></a>00434 
<a name="l00440"></a>00440         <span class="comment">//returns true if the reference is valid (not 0)</span>
<a name="l00441"></a><a class="code" href="classting_1_1Ref.htm#a34057d2f1182b11c7d001de31869c10e">00441</a>         <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="classting_1_1Ref.htm#a34057d2f1182b11c7d001de31869c10e" title="tells whether the reference is pointing to some object or not.">IsValid</a>()<span class="keyword">const</span> throw(){
<a name="l00442"></a>00442                 <a class="code" href="Ref_8hpp.htm#ab9f7ab373a0dd316b90dc3a9b5645fb4">M_REF_PRINT</a>(&lt;&lt;<span class="stringliteral">&quot;Ref::IsValid(): invoked, this-&gt;p=&quot;</span>&lt;&lt;(this-&gt;p)&lt;&lt;std::endl)
<a name="l00443"></a>00443                 <span class="keywordflow">return</span> (this-&gt;p != 0);
<a name="l00444"></a>00444         }
<a name="l00445"></a>00445 
<a name="l00446"></a>00446 
<a name="l00447"></a>00447 
<a name="l00454"></a><a class="code" href="classting_1_1Ref.htm#af2139cd40596a24f4b9799c26c5c61e9">00454</a>         <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="classting_1_1Ref.htm#af2139cd40596a24f4b9799c26c5c61e9" title="tells whether the reference is pointing to some object or not.">IsNotValid</a>()<span class="keyword">const</span> throw(){
<a name="l00455"></a>00455                 <a class="code" href="Ref_8hpp.htm#ab9f7ab373a0dd316b90dc3a9b5645fb4">M_REF_PRINT</a>(&lt;&lt;<span class="stringliteral">&quot;Ref::IsNotValid(): invoked, this-&gt;p=&quot;</span>&lt;&lt;(this-&gt;p)&lt;&lt;std::endl)
<a name="l00456"></a>00456                 <span class="keywordflow">return</span> !this-&gt;IsValid();
<a name="l00457"></a>00457         }
<a name="l00458"></a>00458 
<a name="l00459"></a>00459 
<a name="l00460"></a>00460 
<a name="l00467"></a><a class="code" href="classting_1_1Ref.htm#a8d4a6c7f8f5dbe898d2905f3e385a33b">00467</a>         <span class="keyword">template</span> &lt;<span class="keyword">class</span> TS&gt; <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="classting_1_1Ref.htm#a8d4a6c7f8f5dbe898d2905f3e385a33b" title="tells if 2 references are equal.">operator==</a>(<span class="keyword">const</span> <a class="code" href="classting_1_1Ref.htm" title="Reference to a reference counted object.">Ref&lt;TS&gt;</a>&amp; r)<span class="keyword">const</span> <span class="keywordflow">throw</span>(){
<a name="l00468"></a>00468                 <span class="keywordflow">return</span> this-&gt;p == r.p;
<a name="l00469"></a>00469         }
<a name="l00470"></a>00470 
<a name="l00471"></a>00471 
<a name="l00472"></a>00472 
<a name="l00479"></a><a class="code" href="classting_1_1Ref.htm#a345210f942e64f46ef421724b6584463">00479</a>         <span class="keyword">template</span> &lt;<span class="keyword">class</span> TS&gt; <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="classting_1_1Ref.htm#a345210f942e64f46ef421724b6584463" title="tells if 2 references are not equal.">operator!=</a>(<span class="keyword">const</span> <a class="code" href="classting_1_1Ref.htm" title="Reference to a reference counted object.">Ref&lt;TS&gt;</a>&amp; r)<span class="keyword">const</span> <span class="keywordflow">throw</span>(){
<a name="l00480"></a>00480                 <span class="keywordflow">return</span> !(this-&gt;operator==&lt;TS&gt;(r));
<a name="l00481"></a>00481         }
<a name="l00482"></a>00482 
<a name="l00483"></a>00483 
<a name="l00484"></a>00484 
<a name="l00492"></a><a class="code" href="classting_1_1Ref.htm#a668d36bdd18b0be140201296ef8dfa4d">00492</a>         <span class="keyword">template</span> &lt;<span class="keyword">class</span> TS&gt; <span class="keyword">inline</span> <span class="keywordtype">bool</span> operator&lt;(const Ref&lt;TS&gt;&amp; r)<span class="keyword">const</span> <span class="keywordflow">throw</span>(){
<a name="l00493"></a>00493                 <span class="keywordflow">return</span> this-&gt;p &lt; r.p;
<a name="l00494"></a>00494         }
<a name="l00495"></a>00495 
<a name="l00496"></a>00496 
<a name="l00497"></a>00497 
<a name="l00505"></a><a class="code" href="classting_1_1Ref.htm#ac3df590a4dcadeb74d7fdeb1ab6508ce">00505</a>         <span class="keyword">template</span> &lt;<span class="keyword">class</span> TS&gt; <span class="keyword">inline</span> <span class="keywordtype">bool</span> operator&lt;=(const Ref&lt;TS&gt;&amp; r)<span class="keyword">const</span> <span class="keywordflow">throw</span>(){
<a name="l00506"></a>00506                 <span class="keywordflow">return</span> this-&gt;p &lt;= r.p;
<a name="l00507"></a>00507         }
<a name="l00508"></a>00508 
<a name="l00509"></a>00509 
<a name="l00510"></a>00510 
<a name="l00518"></a><a class="code" href="classting_1_1Ref.htm#ac75157e25c75eee4c87d6b96de1aa874">00518</a>         <span class="keyword">template</span> &lt;<span class="keyword">class</span> TS&gt; <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="classting_1_1Ref.htm#ac75157e25c75eee4c87d6b96de1aa874" title="Compares two references.">operator&gt;</a>(<span class="keyword">const</span> <a class="code" href="classting_1_1Ref.htm" title="Reference to a reference counted object.">Ref&lt;TS&gt;</a>&amp; r)<span class="keyword">const</span> <span class="keywordflow">throw</span>(){
<a name="l00519"></a>00519                 <span class="keywordflow">return</span> this-&gt;p &gt; r.p;
<a name="l00520"></a>00520         }
<a name="l00521"></a>00521 
<a name="l00522"></a>00522 
<a name="l00523"></a>00523 
<a name="l00531"></a><a class="code" href="classting_1_1Ref.htm#a5c609b32f5389ff017d114f958f916ca">00531</a>         <span class="keyword">template</span> &lt;<span class="keyword">class</span> TS&gt; <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="classting_1_1Ref.htm#a5c609b32f5389ff017d114f958f916ca" title="Compares two references.">operator&gt;=</a>(<span class="keyword">const</span> <a class="code" href="classting_1_1Ref.htm" title="Reference to a reference counted object.">Ref&lt;TS&gt;</a>&amp; r)<span class="keyword">const</span> <span class="keywordflow">throw</span>(){
<a name="l00532"></a>00532                 <span class="keywordflow">return</span> this-&gt;p &gt;= r.p;
<a name="l00533"></a>00533         }
<a name="l00534"></a>00534 
<a name="l00535"></a>00535 
<a name="l00536"></a>00536 
<a name="l00542"></a><a class="code" href="classting_1_1Ref.htm#ab83ac4596226fb75515ca3239de570f6">00542</a>         <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="classting_1_1Ref.htm#ab83ac4596226fb75515ca3239de570f6" title="tells if the reference is invalid.">operator!</a>()<span class="keyword">const</span> throw(){
<a name="l00543"></a>00543                 <span class="keywordflow">return</span> !this-&gt;IsValid();
<a name="l00544"></a>00544         }
<a name="l00545"></a>00545 
<a name="l00546"></a>00546 
<a name="l00547"></a>00547 
<a name="l00554"></a><a class="code" href="classting_1_1Ref.htm#a3135ef3a2d1add8a0cd3c04d54963faf">00554</a>         <span class="keyword">typedef</span> void (<a class="code" href="classting_1_1Ref.htm" title="Reference to a reference counted object.">Ref</a>::*unspecified_bool_type)();
<a name="l00555"></a>00555 
<a name="l00556"></a>00556 
<a name="l00557"></a>00557 
<a name="l00575"></a>00575         <span class="comment">//NOTE: Safe conversion to bool type.</span>
<a name="l00576"></a>00576         <span class="comment">//      Because if using simple &quot;operator bool()&quot; it may result in chained automatic</span>
<a name="l00577"></a>00577         <span class="comment">//      conversion to undesired types such as int.</span>
<a name="l00578"></a><a class="code" href="classting_1_1Ref.htm#ac7bc0c9a0d02c76553169c8bcb72e6f3">00578</a>         <span class="keyword">inline</span> <a class="code" href="classting_1_1Ref.htm#ac7bc0c9a0d02c76553169c8bcb72e6f3" title="tells if the reference is valid.">operator unspecified_bool_type</a>()<span class="keyword">const</span> throw(){
<a name="l00579"></a>00579                 <span class="keywordflow">return</span> this-&gt;IsValid() ? &amp;<a class="code" href="classting_1_1Ref.htm#ace1da4fd1b0a5d743cb8070f91bbdf2a" title="make this ting::Ref invalid.">Ref::Reset</a> : 0;<span class="comment">//Ref::Reset is taken just because it has matching signature</span>
<a name="l00580"></a>00580         }
<a name="l00581"></a>00581 
<a name="l00582"></a>00582         <span class="comment">//NOTE: do not use this type of conversion, see NOTE to &quot;operator unspecified_bool_type()&quot;</span>
<a name="l00583"></a>00583         <span class="comment">//      for details.</span>
<a name="l00584"></a>00584 <span class="comment">//      inline operator bool(){</span>
<a name="l00585"></a>00585 <span class="comment">//              return this-&gt;IsValid();</span>
<a name="l00586"></a>00586 <span class="comment">//      }</span>
<a name="l00587"></a>00587 
<a name="l00588"></a>00588 
<a name="l00589"></a>00589 
<a name="l00595"></a><a class="code" href="classting_1_1Ref.htm#ace1da4fd1b0a5d743cb8070f91bbdf2a">00595</a>         <span class="keywordtype">void</span> <a class="code" href="classting_1_1Ref.htm#ace1da4fd1b0a5d743cb8070f91bbdf2a" title="make this ting::Ref invalid.">Reset</a>()throw(){
<a name="l00596"></a>00596                 this-&gt;Destroy();
<a name="l00597"></a>00597                 this-&gt;p = 0;
<a name="l00598"></a>00598         }
<a name="l00599"></a>00599 
<a name="l00600"></a>00600 
<a name="l00601"></a>00601 
<a name="l00610"></a><a class="code" href="classting_1_1Ref.htm#a76847a79b4295f6bb474dc0c9c67479a">00610</a>         <a class="code" href="classting_1_1Ref.htm" title="Reference to a reference counted object.">Ref</a>&amp; <a class="code" href="classting_1_1Ref.htm#a76847a79b4295f6bb474dc0c9c67479a" title="assign reference.">operator=</a>(<span class="keyword">const</span> <a class="code" href="classting_1_1Ref.htm" title="Reference to a reference counted object.">Ref</a>&amp; r)<span class="keywordflow">throw</span>(){
<a name="l00611"></a>00611                 <a class="code" href="Ref_8hpp.htm#ab9f7ab373a0dd316b90dc3a9b5645fb4">M_REF_PRINT</a>(&lt;&lt; <span class="stringliteral">&quot;Ref::operator=(): invoked, p = &quot;</span> &lt;&lt; (this-&gt;p) &lt;&lt; std::endl)
<a name="l00612"></a>00612                 <span class="keywordflow">if</span>(<span class="keyword">this</span> == &amp;r){
<a name="l00613"></a>00613                         <span class="keywordflow">return</span> *<span class="keyword">this</span>;<span class="comment">//detect self assignment</span>
<a name="l00614"></a>00614                 }
<a name="l00615"></a>00615 
<a name="l00616"></a>00616                 this-&gt;Destroy();
<a name="l00617"></a>00617                 this-&gt;InitFromStrongRef&lt;T&gt;(r);
<a name="l00618"></a>00618                 <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00619"></a>00619         }
<a name="l00620"></a>00620 
<a name="l00621"></a>00621 
<a name="l00622"></a>00622 
<a name="l00629"></a>00629         <span class="comment">//downcast / to-const assignment</span>
<a name="l00630"></a><a class="code" href="classting_1_1Ref.htm#ac62d02f07ae3cb0dff6e16826b3871ba">00630</a>         <span class="keyword">template</span> &lt;<span class="keyword">class</span> TS&gt; <a class="code" href="classting_1_1Ref.htm" title="Reference to a reference counted object.">Ref&lt;T&gt;</a>&amp; <a class="code" href="classting_1_1Ref.htm#ac62d02f07ae3cb0dff6e16826b3871ba" title="Assignment operator.">operator=</a>(<span class="keyword">const</span> <a class="code" href="classting_1_1Ref.htm" title="Reference to a reference counted object.">Ref&lt;TS&gt;</a>&amp; r)<span class="keywordflow">throw</span>(){
<a name="l00631"></a>00631                 <span class="comment">//self-assignment should be impossible</span>
<a name="l00632"></a>00632                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(reinterpret_cast&lt;const void*&gt;(<span class="keyword">this</span>) != reinterpret_cast&lt;const void*&gt;(&amp;r))
<a name="l00633"></a>00633 
<a name="l00634"></a>00634                 this-&gt;Destroy();
<a name="l00635"></a>00635                 this-&gt;InitFromStrongRef&lt;TS&gt;(r);
<a name="l00636"></a>00636 
<a name="l00637"></a>00637                 <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00638"></a>00638         }
<a name="l00639"></a>00639 
<a name="l00640"></a>00640 
<a name="l00641"></a>00641 
<a name="l00648"></a><a class="code" href="classting_1_1Ref.htm#a1e47ac3449920cb2d68c4a615eb106ad">00648</a>         <span class="keyword">inline</span> <a class="code" href="classting_1_1WeakRef.htm" title="Weak Reference to a reference counted object.">WeakRef&lt;T&gt;</a> <a class="code" href="classting_1_1Ref.htm#a1e47ac3449920cb2d68c4a615eb106ad" title="Create a weak reference.">GetWeakRef</a>()<span class="keyword">const</span> throw(){
<a name="l00649"></a>00649                 <span class="keywordflow">return</span> <a class="code" href="classting_1_1WeakRef.htm" title="Weak Reference to a reference counted object.">WeakRef&lt;T&gt;</a>(*this);
<a name="l00650"></a>00650         }
<a name="l00651"></a>00651 
<a name="l00652"></a>00652 
<a name="l00653"></a>00653 
<a name="l00659"></a>00659         <span class="comment">//NOTE: the operator is const because const Ref does not mean that the object it points to cannot be changed,</span>
<a name="l00660"></a>00660         <span class="comment">//it means that the Ref itself cannot be changed to point to another object.</span>
<a name="l00661"></a><a class="code" href="classting_1_1Ref.htm#a25545e08974f2e28431f3919e65df780">00661</a>         <span class="keyword">inline</span> T&amp; <a class="code" href="classting_1_1Ref.htm#a25545e08974f2e28431f3919e65df780" title="operator *.">operator*</a>()<span class="keyword">const</span> throw(){
<a name="l00662"></a>00662                 <a class="code" href="Ref_8hpp.htm#ab9f7ab373a0dd316b90dc3a9b5645fb4">M_REF_PRINT</a>(&lt;&lt; <span class="stringliteral">&quot;Ref::operator*(): invoked, p = &quot;</span> &lt;&lt; (this-&gt;p) &lt;&lt; std::endl)
<a name="l00663"></a>00663                 <a class="code" href="debug_8hpp.htm#aaf04cfaa53d7b0bfcdeec60eaf7eed3a">ASSERT_INFO</a>(this-&gt;p, <span class="stringliteral">&quot;Ref::operator*(): this-&gt;p is zero&quot;</span>)
<a name="l00664"></a>00664                 <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span>T&amp;<span class="keyword">&gt;</span>(*this-&gt;p);
<a name="l00665"></a>00665         }
<a name="l00666"></a>00666 
<a name="l00667"></a>00667 
<a name="l00668"></a>00668 
<a name="l00673"></a>00673         <span class="comment">//NOTE: the operator is const because const Ref does not mean that the object it points to cannot be changed,</span>
<a name="l00674"></a>00674         <span class="comment">//it means that the Ref itself cannot be changed to point to another object.</span>
<a name="l00675"></a><a class="code" href="classting_1_1Ref.htm#ad8761a59cd03337719708971177bfc26">00675</a>         <span class="keyword">inline</span> T* <a class="code" href="classting_1_1Ref.htm#ad8761a59cd03337719708971177bfc26" title="opearator-&gt;.">operator-&gt;</a>()<span class="keyword">const</span> throw(){
<a name="l00676"></a>00676                 <a class="code" href="Ref_8hpp.htm#ab9f7ab373a0dd316b90dc3a9b5645fb4">M_REF_PRINT</a>(&lt;&lt; <span class="stringliteral">&quot;Ref::operator-&gt;(): invoked, p = &quot;</span> &lt;&lt; (this-&gt;p) &lt;&lt; std::endl)
<a name="l00677"></a>00677                 <a class="code" href="debug_8hpp.htm#aaf04cfaa53d7b0bfcdeec60eaf7eed3a">ASSERT_INFO</a>(this-&gt;p, <span class="stringliteral">&quot;Ref::operator-&gt;(): this-&gt;p is zero&quot;</span>)
<a name="l00678"></a>00678                 <span class="keywordflow">return</span> this-&gt;p;
<a name="l00679"></a>00679         }
<a name="l00680"></a>00680 
<a name="l00681"></a>00681 
<a name="l00682"></a>00682 
<a name="l00683"></a>00683 <span class="keyword">private</span>:
<a name="l00684"></a>00684         <span class="keyword">inline</span> <span class="keywordtype">void</span> Destroy()throw(){
<a name="l00685"></a>00685                 <span class="keywordflow">if</span>(this-&gt;IsNotValid()){
<a name="l00686"></a>00686                         <span class="keywordflow">return</span>;
<a name="l00687"></a>00687                 }
<a name="l00688"></a>00688                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(this-&gt;p-&gt;counter)
<a name="l00689"></a>00689                 if(this-&gt;p-&gt;counter-&gt;numStrongRefs.FetchAndSubtract(1) == 1){<span class="comment">//if there was only one strong ref</span>
<a name="l00690"></a>00690                         <a class="code" href="Ref_8hpp.htm#ab9f7ab373a0dd316b90dc3a9b5645fb4">M_REF_PRINT</a>(&lt;&lt; <span class="stringliteral">&quot;Ref::Destroy(): deleting &quot;</span> &lt;&lt; (this-&gt;p) &lt;&lt; std::endl)
<a name="l00691"></a>00691                         <span class="comment">//deleting should be ok without type casting, because RefCounted</span>
<a name="l00692"></a>00692                         <span class="comment">//destructor is virtual.</span>
<a name="l00693"></a>00693                         delete this-&gt;p;
<a name="l00694"></a>00694                         <a class="code" href="Ref_8hpp.htm#ab9f7ab373a0dd316b90dc3a9b5645fb4">M_REF_PRINT</a>(&lt;&lt; &quot;<a class="code" href="classting_1_1RefCounted.htm#a3ea5d13a451b56b46e2c53b8da3e4b35">Ref</a>::Destroy(): <span class="keywordtype">object</span> &quot; &lt;&lt; (this-&gt;p) &lt;&lt; &quot; deleted&quot; &lt;&lt; std::endl)
<a name="l00695"></a>00695                 }
<a name="l00696"></a>00696         }
<a name="l00697"></a>00697 
<a name="l00698"></a>00698 
<a name="l00699"></a>00699 
<a name="l00700"></a>00700         <span class="comment">//Ref objects can only be created on stack</span>
<a name="l00701"></a>00701         <span class="comment">//or as a member of other object or array,</span>
<a name="l00702"></a>00702         <span class="comment">//thus, make &quot;operator new&quot; private.</span>
<a name="l00703"></a>00703         static <span class="keywordtype">void</span>* operator new(<span class="keywordtype">size_t</span> size);
<a name="l00704"></a>00704 };<span class="comment">//~class Ref</span>
<a name="l00705"></a>00705 
<a name="l00706"></a>00706 
<a name="l00707"></a>00707 
<a name="l00739"></a>00739 <span class="comment">//T should be RefCounted!!!</span>
<a name="l00740"></a><a class="code" href="classting_1_1WeakRef.htm">00740</a> template &lt;class T&gt; class <a class="code" href="classting_1_1WeakRef.htm" title="Weak Reference to a reference counted object.">WeakRef</a>{
<a name="l00741"></a><a class="code" href="classting_1_1WeakRef.htm#a99229309340c6e682164e71612dca917">00741</a>         <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classting_1_1Ref.htm" title="Reference to a reference counted object.">Ref</a>&lt;T&gt;;
<a name="l00742"></a><a class="code" href="classting_1_1WeakRef.htm#a38b1f54996da1832fd565f2caadd9cfc">00742</a>         <span class="keyword">template</span> &lt;<span class="keyword">class</span> TS&gt; <span class="keyword">friend</span> <span class="keyword">class </span>WeakRef;
<a name="l00743"></a>00743 
<a name="l00744"></a>00744         RefCounted::Counter *counter;
<a name="l00745"></a>00745         T* p;<span class="comment">//this pointer is only valid if counter is not 0 and there are strong references in the counter</span>
<a name="l00746"></a>00746 
<a name="l00747"></a>00747 
<a name="l00748"></a>00748 
<a name="l00749"></a>00749         <span class="keyword">inline</span> <span class="keywordtype">void</span> InitFromRefCounted(T *rc)<span class="keywordflow">throw</span>(){
<a name="l00750"></a>00750                 <a class="code" href="Ref_8hpp.htm#ab9f7ab373a0dd316b90dc3a9b5645fb4">M_REF_PRINT</a>(&lt;&lt; <span class="stringliteral">&quot;WeakRef::InitFromRefCounted(): invoked &quot;</span> &lt;&lt; std::endl)
<a name="l00751"></a>00751                 if(!rc){
<a name="l00752"></a>00752                         this-&gt;counter = 0;
<a name="l00753"></a>00753                         <span class="keywordflow">return</span>;
<a name="l00754"></a>00754                 }
<a name="l00755"></a>00755 
<a name="l00756"></a>00756                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(rc-&gt;counter)
<a name="l00757"></a>00757 
<a name="l00758"></a>00758                 this-&gt;counter = rc-&gt;counter;
<a name="l00759"></a>00759                 this-&gt;p = rc;<span class="comment">//should cast automatically</span>
<a name="l00760"></a>00760                 <span class="comment">//NOTE: if you get &#39;invalid conversion&#39; error here, then you must be trying</span>
<a name="l00761"></a>00761                 <span class="comment">//to do automatic cast to unrelated type.</span>
<a name="l00762"></a>00762 
<a name="l00763"></a>00763                 <span class="comment">//increment number of weak references</span>
<a name="l00764"></a>00764                 {
<a name="l00765"></a>00765                         <a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">ting::u32</a> res = this-&gt;counter-&gt;numWeakRefs.FetchAndAdd(1);
<a name="l00766"></a>00766                         <a class="code" href="debug_8hpp.htm#aaf04cfaa53d7b0bfcdeec60eaf7eed3a">ASSERT_INFO</a>(res &gt;= 1, <span class="stringliteral">&quot;res = &quot;</span> &lt;&lt; res)<span class="comment">//make sure there was at least one weak reference (RefCounted itself acts like a weak reference as well)</span>
<a name="l00767"></a>00767                 }
<a name="l00768"></a>00768         }
<a name="l00769"></a>00769 
<a name="l00770"></a>00770 
<a name="l00771"></a>00771 
<a name="l00772"></a>00772         <span class="keyword">inline</span> <span class="keywordtype">void</span> InitFromStrongRef(Ref&lt;T&gt; &amp;r)<span class="keywordflow">throw</span>(){
<a name="l00773"></a>00773                 <a class="code" href="Ref_8hpp.htm#ab9f7ab373a0dd316b90dc3a9b5645fb4">M_REF_PRINT</a>(&lt;&lt; <span class="stringliteral">&quot;WeakRef::InitFromStrongRef(): invoked &quot;</span> &lt;&lt; std::endl)
<a name="l00774"></a>00774 
<a name="l00775"></a>00775                 <span class="comment">//it is ok if &#39;r&#39; is not valid, InitFromRefCounted() does check for zero pointer.</span>
<a name="l00776"></a>00776                 this-&gt;InitFromRefCounted(r.p);
<a name="l00777"></a>00777         }
<a name="l00778"></a>00778 
<a name="l00779"></a>00779 
<a name="l00780"></a>00780 
<a name="l00781"></a>00781         template &lt;class TS&gt; inline <span class="keywordtype">void</span> InitFromWeakRef(const WeakRef&lt;TS&gt;&amp; r)throw(){
<a name="l00782"></a>00782                 <a class="code" href="Ref_8hpp.htm#ab9f7ab373a0dd316b90dc3a9b5645fb4">M_REF_PRINT</a>(&lt;&lt; <span class="stringliteral">&quot;WeakRef::InitFromWeakRef(): invoked &quot;</span> &lt;&lt; std::endl)
<a name="l00783"></a>00783                 if(r.counter == 0){
<a name="l00784"></a>00784                         this-&gt;counter = 0;
<a name="l00785"></a>00785                         <span class="keywordflow">return</span>;
<a name="l00786"></a>00786                 }
<a name="l00787"></a>00787                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(r.counter)
<a name="l00788"></a>00788 
<a name="l00789"></a>00789                 this-&gt;counter = r.counter;
<a name="l00790"></a>00790 
<a name="l00791"></a>00791                 this-&gt;p = r.p;<span class="comment">//should cast automatically</span>
<a name="l00792"></a>00792                 <span class="comment">//NOTE: if you get &#39;invalid conversion&#39; error here, then you must be trying</span>
<a name="l00793"></a>00793                 <span class="comment">//to do automatic cast to unrelated type.</span>
<a name="l00794"></a>00794 
<a name="l00795"></a>00795                 <span class="comment">//increment number of weak references</span>
<a name="l00796"></a>00796                 {
<a name="l00797"></a>00797                         <a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">ting::u32</a> res = this-&gt;counter-&gt;numWeakRefs.FetchAndAdd(1);
<a name="l00798"></a>00798                         <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(res &gt;= 1)<span class="comment">//make sure there was at least one weak reference (RefCounted itself acts like a weak reference as well)</span>
<a name="l00799"></a>00799                 }
<a name="l00800"></a>00800         }
<a name="l00801"></a>00801 
<a name="l00802"></a>00802 
<a name="l00803"></a>00803 
<a name="l00804"></a>00804         <span class="keyword">inline</span> <span class="keywordtype">void</span> Destroy()throw(){
<a name="l00805"></a>00805                 <span class="keywordflow">if</span>(this-&gt;counter == 0){
<a name="l00806"></a>00806                         <span class="keywordflow">return</span>;
<a name="l00807"></a>00807                 }
<a name="l00808"></a>00808 
<a name="l00809"></a>00809                 <span class="keywordflow">if</span>(this-&gt;counter-&gt;numWeakRefs.FetchAndSubtract(1) == 1){<span class="comment">//if there was only 1 weak reference before decrement</span>
<a name="l00810"></a>00810                         <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(this-&gt;counter-&gt;numStrongRefs.FetchAndAdd(0) == 0)
<a name="l00811"></a>00811                         <span class="keyword">delete</span> this-&gt;counter;
<a name="l00812"></a>00812                 }
<a name="l00813"></a>00813         }
<a name="l00814"></a>00814 
<a name="l00815"></a>00815 
<a name="l00816"></a>00816 
<a name="l00817"></a>00817 <span class="keyword">public</span>:
<a name="l00821"></a><a class="code" href="classting_1_1WeakRef.htm#ae23764f2bada07f850ceb181876c86e1">00821</a>         <span class="keyword">inline</span> <a class="code" href="classting_1_1RefCounted.htm#a38b1f54996da1832fd565f2caadd9cfc">WeakRef</a>()throw() :
<a name="l00822"></a>00822                         counter(0)
<a name="l00823"></a>00823         {}
<a name="l00824"></a>00824 
<a name="l00838"></a><a class="code" href="classting_1_1WeakRef.htm#aba7ce767a36c7c3cf1314033ecbede0c">00838</a>         <span class="keyword">inline</span> <a class="code" href="classting_1_1WeakRef.htm#aba7ce767a36c7c3cf1314033ecbede0c" title="Make weak reference from pointer to RefCounted.">WeakRef</a>(T* rc)<span class="keywordflow">throw</span>(){
<a name="l00839"></a>00839                 <a class="code" href="Ref_8hpp.htm#ab9f7ab373a0dd316b90dc3a9b5645fb4">M_REF_PRINT</a>(&lt;&lt; <span class="stringliteral">&quot;WeakRef::WeakRef(T*): invoked&quot;</span> &lt;&lt; std::endl)
<a name="l00840"></a>00840                 this-&gt;InitFromRefCounted(rc);
<a name="l00841"></a>00841         }
<a name="l00842"></a>00842 
<a name="l00843"></a>00843 
<a name="l00844"></a>00844 
<a name="l00850"></a><a class="code" href="classting_1_1WeakRef.htm#aba4a29bb8e23c6df5d42b33492935e63">00850</a>         <span class="keyword">inline</span> <a class="code" href="classting_1_1WeakRef.htm#aba4a29bb8e23c6df5d42b33492935e63" title="Constructor.">WeakRef</a>(<span class="keyword">const</span> <a class="code" href="classting_1_1Ref.htm" title="Reference to a reference counted object.">Ref&lt;T&gt;</a> &amp;r)<span class="keywordflow">throw</span>(){
<a name="l00851"></a>00851                 <a class="code" href="Ref_8hpp.htm#ab9f7ab373a0dd316b90dc3a9b5645fb4">M_REF_PRINT</a>(&lt;&lt; <span class="stringliteral">&quot;WeakRef::WeakRef(const Ref&lt;T&gt;&amp;): invoked&quot;</span> &lt;&lt; std::endl)
<a name="l00852"></a>00852                 this-&gt;InitFromStrongRef(<span class="keyword">const_cast&lt;</span><a class="code" href="classting_1_1Ref.htm" title="Reference to a reference counted object.">Ref&lt;T&gt;</a>&amp;<span class="keyword">&gt;</span>(r));
<a name="l00853"></a>00853         }
<a name="l00854"></a>00854 
<a name="l00855"></a>00855 
<a name="l00856"></a>00856 
<a name="l00861"></a><a class="code" href="classting_1_1WeakRef.htm#aa4098bc06fcc6ed6073319c52190f19e">00861</a>         <span class="keyword">inline</span> <a class="code" href="classting_1_1WeakRef.htm#aa4098bc06fcc6ed6073319c52190f19e" title="Copy constructor.">WeakRef</a>(<span class="keyword">const</span> WeakRef&amp; r)<span class="keywordflow">throw</span>(){
<a name="l00862"></a>00862                 <a class="code" href="Ref_8hpp.htm#ab9f7ab373a0dd316b90dc3a9b5645fb4">M_REF_PRINT</a>(&lt;&lt; <span class="stringliteral">&quot;WeakRef::WeakRef(const WeakRef&amp;): invoked&quot;</span> &lt;&lt; std::endl)
<a name="l00863"></a>00863                 this-&gt;InitFromWeakRef&lt;T&gt;(r);
<a name="l00864"></a>00864         }
<a name="l00865"></a>00865 
<a name="l00866"></a>00866 
<a name="l00867"></a>00867 
<a name="l00874"></a>00874         <span class="comment">//downcast / to-const cast constructor</span>
<a name="l00875"></a><a class="code" href="classting_1_1WeakRef.htm#afd9154218666496ae6fed7d249792720">00875</a>         <span class="keyword">template</span> &lt;<span class="keyword">class</span> TS&gt; <span class="keyword">inline</span> <a class="code" href="classting_1_1WeakRef.htm#afd9154218666496ae6fed7d249792720" title="Constructor.">WeakRef</a>(<span class="keyword">const</span> <a class="code" href="classting_1_1WeakRef.htm" title="Weak Reference to a reference counted object.">WeakRef&lt;TS&gt;</a>&amp; r)<span class="keywordflow">throw</span>(){
<a name="l00876"></a>00876                 <a class="code" href="Ref_8hpp.htm#ab9f7ab373a0dd316b90dc3a9b5645fb4">M_REF_PRINT</a>(&lt;&lt; <span class="stringliteral">&quot;WeakRef::WeakRef(const WeakRef&lt;TS&gt;&amp;): invoked&quot;</span> &lt;&lt; std::endl)
<a name="l00877"></a>00877                 this-&gt;InitFromWeakRef&lt;TS&gt;(r);
<a name="l00878"></a>00878         }
<a name="l00879"></a>00879 
<a name="l00880"></a>00880 
<a name="l00881"></a>00881 
<a name="l00888"></a><a class="code" href="classting_1_1WeakRef.htm#afa0f296d417ecc60217f9a52dec489f4">00888</a>         <span class="keyword">inline</span> <a class="code" href="classting_1_1Ref.htm" title="Reference to a reference counted object.">Ref&lt;T&gt;</a> <a class="code" href="classting_1_1WeakRef.htm#afa0f296d417ecc60217f9a52dec489f4" title="Get strong reference.">GetRef</a>()<span class="keyword">const</span> throw(){
<a name="l00889"></a>00889                 <span class="keywordflow">return</span> <a class="code" href="classting_1_1Ref.htm" title="Reference to a reference counted object.">Ref&lt;T&gt;</a>(*this);
<a name="l00890"></a>00890         }
<a name="l00891"></a>00891 
<a name="l00892"></a>00892 
<a name="l00893"></a>00893 
<a name="l00897"></a><a class="code" href="classting_1_1WeakRef.htm#a801e201de14e8611b2fda0d35fcab6b9">00897</a>         <span class="keyword">inline</span> <a class="code" href="classting_1_1WeakRef.htm#a801e201de14e8611b2fda0d35fcab6b9" title="Destructor.">~WeakRef</a>()throw(){
<a name="l00898"></a>00898                 <a class="code" href="Ref_8hpp.htm#ab9f7ab373a0dd316b90dc3a9b5645fb4">M_REF_PRINT</a>(&lt;&lt; <span class="stringliteral">&quot;WeakRef::~WeakRef(): invoked&quot;</span> &lt;&lt; std::endl)
<a name="l00899"></a>00899                 this-&gt;Destroy();
<a name="l00900"></a>00900         }
<a name="l00901"></a>00901 
<a name="l00902"></a>00902 
<a name="l00903"></a>00903 
<a name="l00913"></a><a class="code" href="classting_1_1WeakRef.htm#ab87fe78f5eff92b8fa9729c0f0c7bc10">00913</a>         <span class="keyword">inline</span> WeakRef&amp; <a class="code" href="classting_1_1WeakRef.htm#ab87fe78f5eff92b8fa9729c0f0c7bc10" title="operator =.">operator=</a>(T* rc)<span class="keywordflow">throw</span>(){
<a name="l00914"></a>00914                 <a class="code" href="debug_8hpp.htm#aca68c0d4ac8df0838e209fb5300f7be3">ASSERT</a>(rc)
<a name="l00915"></a>00915                 <a class="code" href="Ref_8hpp.htm#ab9f7ab373a0dd316b90dc3a9b5645fb4">M_REF_PRINT</a>(&lt;&lt; <span class="stringliteral">&quot;WeakRef::operator=(T*): invoked&quot;</span> &lt;&lt; std::endl)
<a name="l00916"></a>00916 
<a name="l00917"></a>00917                 this-&gt;Destroy();
<a name="l00918"></a>00918                 this-&gt;InitFromRefCounted(rc);
<a name="l00919"></a>00919                 <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00920"></a>00920         }
<a name="l00921"></a>00921 
<a name="l00922"></a>00922 
<a name="l00923"></a>00923 
<a name="l00930"></a><a class="code" href="classting_1_1WeakRef.htm#ad2478353dd324b624c7c73f6e353e5fc">00930</a>         <span class="keyword">inline</span> WeakRef&amp; <a class="code" href="classting_1_1WeakRef.htm#ad2478353dd324b624c7c73f6e353e5fc" title="operator =.">operator=</a>(<span class="keyword">const</span> <a class="code" href="classting_1_1Ref.htm" title="Reference to a reference counted object.">Ref&lt;T&gt;</a> &amp;r)<span class="keywordflow">throw</span>(){
<a name="l00931"></a>00931                 <a class="code" href="Ref_8hpp.htm#ab9f7ab373a0dd316b90dc3a9b5645fb4">M_REF_PRINT</a>(&lt;&lt; <span class="stringliteral">&quot;WeakRef::operator=(const Ref&lt;T&gt;&amp;): invoked&quot;</span> &lt;&lt; std::endl)
<a name="l00932"></a>00932                 this-&gt;Destroy();
<a name="l00933"></a>00933                 this-&gt;InitFromStrongRef(<span class="keyword">const_cast&lt;</span><a class="code" href="classting_1_1Ref.htm" title="Reference to a reference counted object.">Ref&lt;T&gt;</a>&amp;<span class="keyword">&gt;</span>(r));
<a name="l00934"></a>00934                 <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00935"></a>00935         }
<a name="l00936"></a>00936 
<a name="l00937"></a>00937 
<a name="l00938"></a>00938 
<a name="l00945"></a><a class="code" href="classting_1_1WeakRef.htm#a05ccddae011a6ede36644676fc18931e">00945</a>         <span class="keyword">inline</span> WeakRef&amp; <a class="code" href="classting_1_1WeakRef.htm#a05ccddae011a6ede36644676fc18931e" title="Assignment operator.">operator=</a>(<span class="keyword">const</span> WeakRef&amp; r)<span class="keywordflow">throw</span>(){
<a name="l00946"></a>00946                 <a class="code" href="Ref_8hpp.htm#ab9f7ab373a0dd316b90dc3a9b5645fb4">M_REF_PRINT</a>(&lt;&lt; <span class="stringliteral">&quot;WeakRef::operator=(const WeakRef&lt;TS&gt;&amp;): invoked&quot;</span> &lt;&lt; std::endl)
<a name="l00947"></a>00947                 this-&gt;Destroy();
<a name="l00948"></a>00948                 this-&gt;InitFromWeakRef&lt;T&gt;(r);
<a name="l00949"></a>00949                 <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00950"></a>00950         }
<a name="l00951"></a>00951 
<a name="l00952"></a>00952 
<a name="l00953"></a>00953 
<a name="l00961"></a><a class="code" href="classting_1_1WeakRef.htm#a0558bdaa41613a579765e49372c765a4">00961</a>         <span class="keyword">template</span> &lt;<span class="keyword">class</span> TS&gt; <span class="keyword">inline</span> WeakRef&amp; <a class="code" href="classting_1_1WeakRef.htm#a0558bdaa41613a579765e49372c765a4" title="Template operator =.">operator=</a>(<span class="keyword">const</span> <a class="code" href="classting_1_1WeakRef.htm" title="Weak Reference to a reference counted object.">WeakRef&lt;TS&gt;</a>&amp; r)<span class="keywordflow">throw</span>(){
<a name="l00962"></a>00962                 <a class="code" href="Ref_8hpp.htm#ab9f7ab373a0dd316b90dc3a9b5645fb4">M_REF_PRINT</a>(&lt;&lt; <span class="stringliteral">&quot;WeakRef::operator=(const WeakRef&lt;TS&gt;&amp;): invoked&quot;</span> &lt;&lt; std::endl)
<a name="l00963"></a>00963                 this-&gt;Destroy();
<a name="l00964"></a>00964                 this-&gt;InitFromWeakRef&lt;TS&gt;(r);
<a name="l00965"></a>00965                 <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00966"></a>00966         }
<a name="l00967"></a>00967 
<a name="l00968"></a>00968 
<a name="l00969"></a>00969 
<a name="l00975"></a><a class="code" href="classting_1_1WeakRef.htm#a8d2de0dbf511eee48ca406f7d55dd56b">00975</a>         <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classting_1_1WeakRef.htm#a8d2de0dbf511eee48ca406f7d55dd56b" title="Reset this reference.">Reset</a>()throw(){
<a name="l00976"></a>00976                 <a class="code" href="Ref_8hpp.htm#ab9f7ab373a0dd316b90dc3a9b5645fb4">M_REF_PRINT</a>(&lt;&lt; <span class="stringliteral">&quot;WeakRef::Reset(): invoked&quot;</span> &lt;&lt; std::endl)
<a name="l00977"></a>00977                 this-&gt;Destroy();
<a name="l00978"></a>00978                 this-&gt;counter = 0;
<a name="l00979"></a>00979         }
<a name="l00980"></a>00980 
<a name="l00981"></a>00981 
<a name="l00982"></a>00982 
<a name="l00988"></a><a class="code" href="classting_1_1WeakRef.htm#a4cd35054ace253769e97d31612df72bd">00988</a>         <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="classting_1_1WeakRef.htm#a4cd35054ace253769e97d31612df72bd" title="Check if this weak reference is invalid.">IsSurelyInvalid</a>()<span class="keyword">const</span> throw(){
<a name="l00989"></a>00989                 <span class="keywordflow">return</span> this-&gt;counter == 0 || this-&gt;counter-&gt;numStrongRefs.FetchAndAdd(0) == 0;
<a name="l00990"></a>00990         }
<a name="l00991"></a>00991 
<a name="l00992"></a>00992 
<a name="l00993"></a>00993 <span class="keyword">private</span>:
<a name="l00994"></a>00994         <span class="comment">//WeakRef objects can only be created on stack</span>
<a name="l00995"></a>00995         <span class="comment">//or as a member of other object or array</span>
<a name="l00996"></a>00996         <span class="keyword">static</span> <span class="keywordtype">void</span>* <a class="code" href="classting_1_1RefCounted.htm#a6fa5dc08f8d691a834e0e4baef9f3a47" title="operator new.">operator new</a>(<span class="keywordtype">size_t</span> size);
<a name="l00997"></a>00997 };<span class="comment">//~class WeakRef</span>
<a name="l00998"></a>00998 
<a name="l00999"></a>00999 
<a name="l01000"></a>01000 
<a name="l01001"></a><a class="code" href="classting_1_1Ref.htm#a6805103bd789673cb75ffb8fe73bdbf5">01001</a> <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt; <span class="keyword">inline</span> <a class="code" href="classting_1_1RefCounted.htm#a3ea5d13a451b56b46e2c53b8da3e4b35">Ref&lt;T&gt;::Ref</a>(<span class="keyword">const</span> <a class="code" href="classting_1_1WeakRef.htm" title="Weak Reference to a reference counted object.">WeakRef&lt;T&gt;</a> &amp;r)<span class="keywordflow">throw</span>(){
<a name="l01002"></a>01002         <span class="keywordflow">if</span>(r.counter == 0){
<a name="l01003"></a>01003                 this-&gt;p = 0;
<a name="l01004"></a>01004                 <span class="keywordflow">return</span>;
<a name="l01005"></a>01005         }
<a name="l01006"></a>01006 
<a name="l01007"></a>01007         <span class="comment">//Try incrementing number of strong references.</span>
<a name="l01008"></a>01008         <span class="comment">//We want to increment only if it is not 0.</span>
<a name="l01009"></a>01009         <span class="keywordflow">for</span>(<a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">ting::u32</a> guess = 1; ;){<span class="comment">//start with 1, not with 0, since we don&#39;t want to increment if value is 0.</span>
<a name="l01010"></a>01010                 <a class="code" href="namespaceting.htm#aa54945671d9955d39a42606fab2c1b0f" title="Unsigned 32 bit type.">ting::u32</a> oldVal = r.counter-&gt;numStrongRefs.CompareAndExchange(guess, guess + 1);
<a name="l01011"></a>01011                 <span class="keywordflow">if</span>(oldVal == 0){
<a name="l01012"></a>01012                         <span class="comment">//there are no strong references, weak ref is invalid</span>
<a name="l01013"></a>01013                         this-&gt;p = 0;
<a name="l01014"></a>01014                         <span class="keywordflow">return</span>;
<a name="l01015"></a>01015                 }
<a name="l01016"></a>01016                 <span class="keywordflow">if</span>(oldVal == guess){
<a name="l01017"></a>01017                         <span class="comment">//successfully incremented the number of strong references, weak ref is valid</span>
<a name="l01018"></a>01018                         this-&gt;p = r.p;
<a name="l01019"></a>01019                         <span class="keywordflow">return</span>;
<a name="l01020"></a>01020                 }
<a name="l01021"></a>01021                 guess = oldVal;
<a name="l01022"></a>01022         }
<a name="l01023"></a>01023 }
<a name="l01024"></a>01024 
<a name="l01025"></a>01025 
<a name="l01026"></a>01026 
<a name="l01027"></a>01027 }<span class="comment">//~namespace</span>
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="Ref_8hpp.htm">Ref.hpp</a>      </li>

    <li class="footer">Generated on Thu Feb 21 2013 20:36:35 for libting by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
