<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>libting: Mutex.hpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">libting
   &#160;<span id="projectnumber">2.0.0</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.htm"><span>File&#160;List</span></a></li>
      <li><a href="globals.htm"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('Mutex_8hpp.htm','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">Mutex.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="Mutex_8hpp.htm">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* The MIT License:</span>
<a name="l00002"></a>00002 <span class="comment"></span>
<a name="l00003"></a>00003 <span class="comment">Copyright (c) 2008-2012 Ivan Gagis &lt;igagis@gmail.com&gt;</span>
<a name="l00004"></a>00004 <span class="comment"></span>
<a name="l00005"></a>00005 <span class="comment">Permission is hereby granted, free of charge, to any person obtaining a copy</span>
<a name="l00006"></a>00006 <span class="comment">of this software and associated documentation files (the &quot;Software&quot;), to deal</span>
<a name="l00007"></a>00007 <span class="comment">in the Software without restriction, including without limitation the rights</span>
<a name="l00008"></a>00008 <span class="comment">to use, copy, modify, merge, publish, distribute, sublicense, and/or sell</span>
<a name="l00009"></a>00009 <span class="comment">copies of the Software, and to permit persons to whom the Software is</span>
<a name="l00010"></a>00010 <span class="comment">furnished to do so, subject to the following conditions:</span>
<a name="l00011"></a>00011 <span class="comment"></span>
<a name="l00012"></a>00012 <span class="comment">The above copyright notice and this permission notice shall be included in</span>
<a name="l00013"></a>00013 <span class="comment">all copies or substantial portions of the Software.</span>
<a name="l00014"></a>00014 <span class="comment"></span>
<a name="l00015"></a>00015 <span class="comment">THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span>
<a name="l00016"></a>00016 <span class="comment">IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span>
<a name="l00017"></a>00017 <span class="comment">FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span>
<a name="l00018"></a>00018 <span class="comment">AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span>
<a name="l00019"></a>00019 <span class="comment">LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span>
<a name="l00020"></a>00020 <span class="comment">OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN</span>
<a name="l00021"></a>00021 <span class="comment">THE SOFTWARE. */</span>
<a name="l00022"></a>00022 
<a name="l00023"></a>00023 <span class="comment">// Home page: http://ting.googlecode.com</span>
<a name="l00024"></a>00024 
<a name="l00025"></a>00025 
<a name="l00026"></a>00026 
<a name="l00032"></a>00032 <span class="preprocessor">#pragma once</span>
<a name="l00033"></a>00033 <span class="preprocessor"></span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &quot;../config.hpp&quot;</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &quot;../debug.hpp&quot;</span>
<a name="l00036"></a>00036 
<a name="l00037"></a>00037 
<a name="l00038"></a>00038 <span class="preprocessor">#if M_OS == M_OS_WINDOWS</span>
<a name="l00039"></a>00039 <span class="preprocessor"></span>
<a name="l00040"></a>00040 <span class="comment">//if _WINSOCKAPI_ macro is not defined then it means that the winsock header file</span>
<a name="l00041"></a>00041 <span class="comment">//has not been included. Here we temporarily define the macro in order to prevent</span>
<a name="l00042"></a>00042 <span class="comment">//inclusion of winsock.h from within the windows.h. Because it may later conflict with</span>
<a name="l00043"></a>00043 <span class="comment">//winsock2.h if it is included later.</span>
<a name="l00044"></a>00044 <span class="preprocessor">#       ifndef _WINSOCKAPI_</span>
<a name="l00045"></a>00045 <span class="preprocessor"></span><span class="preprocessor">#               define _WINSOCKAPI_</span>
<a name="l00046"></a>00046 <span class="preprocessor"></span><span class="preprocessor">#               include &lt;windows.h&gt;</span>
<a name="l00047"></a>00047 <span class="preprocessor">#               undef _WINSOCKAPI_</span>
<a name="l00048"></a>00048 <span class="preprocessor"></span><span class="preprocessor">#       else</span>
<a name="l00049"></a>00049 <span class="preprocessor"></span><span class="preprocessor">#               include &lt;windows.h&gt;</span>
<a name="l00050"></a>00050 <span class="preprocessor">#       endif</span>
<a name="l00051"></a>00051 <span class="preprocessor"></span>
<a name="l00052"></a>00052 <span class="comment">//TODO:</span>
<a name="l00053"></a>00053 <span class="comment">//#     include &lt;process.h&gt;</span>
<a name="l00054"></a>00054 
<a name="l00055"></a>00055 <span class="preprocessor">#elif M_OS == M_OS_SYMBIAN</span>
<a name="l00056"></a>00056 <span class="preprocessor"></span><span class="preprocessor">#       include &lt;string.h&gt;</span>
<a name="l00057"></a>00057 <span class="preprocessor">#       include &lt;e32std.h&gt;</span>
<a name="l00058"></a>00058 <span class="preprocessor">#       include &lt;hal.h&gt;</span>
<a name="l00059"></a>00059 
<a name="l00060"></a>00060 <span class="preprocessor">#elif M_OS == M_OS_LINUX || M_OS == M_OS_MACOSX || M_OS == M_OS_SOLARIS</span>
<a name="l00061"></a>00061 <span class="preprocessor"></span><span class="preprocessor">#       include &lt;pthread.h&gt;</span>
<a name="l00062"></a>00062 
<a name="l00063"></a>00063 <span class="preprocessor">#else</span>
<a name="l00064"></a>00064 <span class="preprocessor"></span><span class="preprocessor">#       error &quot;Unsupported OS&quot;</span>
<a name="l00065"></a>00065 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00066"></a>00066 <span class="preprocessor"></span>
<a name="l00067"></a>00067 
<a name="l00068"></a>00068 
<a name="l00069"></a>00069 <span class="keyword">namespace </span>ting{
<a name="l00070"></a>00070 <span class="keyword">namespace </span>mt{
<a name="l00071"></a>00071 
<a name="l00072"></a>00072 
<a name="l00073"></a>00073 
<a name="l00078"></a><a class="code" href="classting_1_1mt_1_1Mutex.htm">00078</a> <span class="keyword">class </span><a class="code" href="classting_1_1mt_1_1Mutex.htm" title="Mutex object class Mutex stands for &quot;Mutual execution&quot;.">Mutex</a>{
<a name="l00079"></a>00079 
<a name="l00080"></a>00080 <span class="preprocessor">#if M_OS == M_OS_WINDOWS</span>
<a name="l00081"></a>00081 <span class="preprocessor"></span>        CRITICAL_SECTION m;
<a name="l00082"></a>00082 <span class="preprocessor">#elif M_OS == M_OS_SYMBIAN</span>
<a name="l00083"></a>00083 <span class="preprocessor"></span>        RCriticalSection m;
<a name="l00084"></a>00084 <span class="preprocessor">#elif M_OS == M_OS_LINUX || M_OS == M_OS_MACOSX</span>
<a name="l00085"></a>00085 <span class="preprocessor"></span>        <span class="keyword">friend</span> <span class="keyword">class </span>CondVar;
<a name="l00086"></a>00086         pthread_mutex_t m;
<a name="l00087"></a>00087 <span class="preprocessor">#else</span>
<a name="l00088"></a>00088 <span class="preprocessor"></span><span class="preprocessor">#       error &quot;unknown OS&quot;</span>
<a name="l00089"></a>00089 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00090"></a>00090 <span class="preprocessor"></span>
<a name="l00091"></a>00091 <span class="keyword">private</span>:
<a name="l00092"></a>00092         <span class="comment">//forbid copying</span>
<a name="l00093"></a>00093         <a class="code" href="classting_1_1mt_1_1Mutex.htm#a84453de4bfbf825ba6515964cc2b1cbd" title="Creates initially unlocked mutex.">Mutex</a>(<span class="keyword">const</span> <a class="code" href="classting_1_1mt_1_1Mutex.htm" title="Mutex object class Mutex stands for &quot;Mutual execution&quot;.">Mutex</a>&amp;);
<a name="l00094"></a>00094         <a class="code" href="classting_1_1mt_1_1Mutex.htm" title="Mutex object class Mutex stands for &quot;Mutual execution&quot;.">Mutex</a>&amp; operator=(<span class="keyword">const</span> <a class="code" href="classting_1_1mt_1_1Mutex.htm" title="Mutex object class Mutex stands for &quot;Mutual execution&quot;.">Mutex</a>&amp;);
<a name="l00095"></a>00095 
<a name="l00096"></a>00096 <span class="keyword">public</span>:
<a name="l00100"></a>00100         <a class="code" href="classting_1_1mt_1_1Mutex.htm#a84453de4bfbf825ba6515964cc2b1cbd" title="Creates initially unlocked mutex.">Mutex</a>();
<a name="l00101"></a>00101 
<a name="l00102"></a>00102         <a class="code" href="classting_1_1mt_1_1Mutex.htm#ae2ffd2d63743237ebd47d2c399ca1f09">~Mutex</a>()<span class="keywordflow">throw</span>();
<a name="l00103"></a>00103 
<a name="l00104"></a>00104 
<a name="l00111"></a><a class="code" href="classting_1_1mt_1_1Mutex.htm#a202b5c9f08ebfc6e2556eddc467e440b">00111</a>         <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classting_1_1mt_1_1Mutex.htm#a202b5c9f08ebfc6e2556eddc467e440b" title="Acquire mutex lock.">Lock</a>()throw(){
<a name="l00112"></a>00112 <span class="comment">//              TRACE(&lt;&lt; &quot;Mutex::Lock(): invoked &quot; &lt;&lt; this &lt;&lt; std::endl)</span>
<a name="l00113"></a>00113 <span class="preprocessor">#if M_OS == M_OS_WINDOWS</span>
<a name="l00114"></a>00114 <span class="preprocessor"></span>                EnterCriticalSection(&amp;this-&gt;m);
<a name="l00115"></a>00115 <span class="preprocessor">#elif M_OS == M_OS_SYMBIAN</span>
<a name="l00116"></a>00116 <span class="preprocessor"></span>                this-&gt;m.Wait();
<a name="l00117"></a>00117 <span class="preprocessor">#elif M_OS == M_OS_LINUX || M_OS == M_OS_MACOSX</span>
<a name="l00118"></a>00118 <span class="preprocessor"></span>                pthread_mutex_lock(&amp;this-&gt;m);
<a name="l00119"></a>00119 <span class="preprocessor">#else</span>
<a name="l00120"></a>00120 <span class="preprocessor"></span><span class="preprocessor">#       error &quot;unknown OS&quot;</span>
<a name="l00121"></a>00121 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00122"></a>00122 <span class="preprocessor"></span>        }
<a name="l00123"></a>00123 
<a name="l00124"></a>00124 
<a name="l00125"></a>00125 
<a name="l00129"></a><a class="code" href="classting_1_1mt_1_1Mutex.htm#a1def6a364443c9de7583f35f04aca892">00129</a>         <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classting_1_1mt_1_1Mutex.htm#a1def6a364443c9de7583f35f04aca892" title="Release mutex lock.">Unlock</a>()throw(){
<a name="l00130"></a>00130 <span class="comment">//              TRACE(&lt;&lt; &quot;Mutex::Unlock(): invoked &quot; &lt;&lt; this &lt;&lt; std::endl)</span>
<a name="l00131"></a>00131 <span class="preprocessor">#if M_OS == M_OS_WINDOWS</span>
<a name="l00132"></a>00132 <span class="preprocessor"></span>                LeaveCriticalSection(&amp;this-&gt;m);
<a name="l00133"></a>00133 <span class="preprocessor">#elif M_OS == M_OS_SYMBIAN</span>
<a name="l00134"></a>00134 <span class="preprocessor"></span>                this-&gt;m.Signal();
<a name="l00135"></a>00135 <span class="preprocessor">#elif M_OS == M_OS_LINUX || M_OS == M_OS_MACOSX</span>
<a name="l00136"></a>00136 <span class="preprocessor"></span>                pthread_mutex_unlock(&amp;this-&gt;m);
<a name="l00137"></a>00137 <span class="preprocessor">#else</span>
<a name="l00138"></a>00138 <span class="preprocessor"></span><span class="preprocessor">#       error &quot;unknown OS&quot;</span>
<a name="l00139"></a>00139 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00140"></a>00140 <span class="preprocessor"></span>        }
<a name="l00141"></a>00141 
<a name="l00142"></a>00142 
<a name="l00143"></a>00143 
<a name="l00151"></a><a class="code" href="classting_1_1mt_1_1Mutex_1_1Guard.htm">00151</a>         <span class="keyword">class </span><a class="code" href="classting_1_1mt_1_1Mutex_1_1Guard.htm" title="Helper class which automatically Locks the given mutex.">Guard</a>{
<a name="l00152"></a>00152                 <a class="code" href="classting_1_1mt_1_1Mutex.htm" title="Mutex object class Mutex stands for &quot;Mutual execution&quot;.">Mutex</a> &amp;mutex;
<a name="l00153"></a>00153 
<a name="l00154"></a>00154                 <span class="comment">//forbid copying</span>
<a name="l00155"></a>00155                 <a class="code" href="classting_1_1mt_1_1Mutex_1_1Guard.htm" title="Helper class which automatically Locks the given mutex.">Guard</a>(<span class="keyword">const</span> <a class="code" href="classting_1_1mt_1_1Mutex_1_1Guard.htm" title="Helper class which automatically Locks the given mutex.">Guard</a>&amp; );
<a name="l00156"></a>00156                 <a class="code" href="classting_1_1mt_1_1Mutex_1_1Guard.htm" title="Helper class which automatically Locks the given mutex.">Guard</a>&amp; operator=(<span class="keyword">const</span> <a class="code" href="classting_1_1mt_1_1Mutex_1_1Guard.htm" title="Helper class which automatically Locks the given mutex.">Guard</a>&amp; );
<a name="l00157"></a>00157         <span class="keyword">public</span>:
<a name="l00158"></a><a class="code" href="classting_1_1mt_1_1Mutex_1_1Guard.htm#a0945ea1110da274df738f7afb69431ea">00158</a>                 <a class="code" href="classting_1_1mt_1_1Mutex_1_1Guard.htm" title="Helper class which automatically Locks the given mutex.">Guard</a>(<a class="code" href="classting_1_1mt_1_1Mutex.htm" title="Mutex object class Mutex stands for &quot;Mutual execution&quot;.">Mutex</a> &amp;m)<span class="keywordflow">throw</span>() :
<a name="l00159"></a>00159                                 mutex(m)
<a name="l00160"></a>00160                 {
<a name="l00161"></a>00161                         this-&gt;mutex.<a class="code" href="classting_1_1mt_1_1Mutex.htm#a202b5c9f08ebfc6e2556eddc467e440b" title="Acquire mutex lock.">Lock</a>();
<a name="l00162"></a>00162                 }
<a name="l00163"></a><a class="code" href="classting_1_1mt_1_1Mutex_1_1Guard.htm#a252c856513890fc3b8a40ed7e24a9450">00163</a>                 <a class="code" href="classting_1_1mt_1_1Mutex_1_1Guard.htm#a252c856513890fc3b8a40ed7e24a9450">~Guard</a>()throw(){
<a name="l00164"></a>00164                         this-&gt;mutex.<a class="code" href="classting_1_1mt_1_1Mutex.htm#a1def6a364443c9de7583f35f04aca892" title="Release mutex lock.">Unlock</a>();
<a name="l00165"></a>00165                 }
<a name="l00166"></a>00166         };<span class="comment">//~class Guard</span>
<a name="l00167"></a>00167 };<span class="comment">//~class Mutex</span>
<a name="l00168"></a>00168 
<a name="l00169"></a>00169 
<a name="l00170"></a>00170 
<a name="l00171"></a>00171 }<span class="comment">//~namespace</span>
<a name="l00172"></a>00172 }<span class="comment">//~namespace</span>
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="Mutex_8hpp.htm">Mutex.hpp</a>      </li>

    <li class="footer">Generated on Thu Feb 21 2013 20:36:35 for libting by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
