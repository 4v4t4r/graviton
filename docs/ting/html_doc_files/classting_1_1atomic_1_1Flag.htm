<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>libting: ting::atomic::Flag Class Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">libting
   &#160;<span id="projectnumber">2.0.0</span>
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.htm"><span>Classes</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.htm"><span>Class&#160;List</span></a></li>
      <li><a href="classes.htm"><span>Class&#160;Index</span></a></li>
      <li><a href="hierarchy.htm"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.htm"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('classting_1_1atomic_1_1Flag.htm','');
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">ting::atomic::Flag Class Reference</div>  </div>
</div><!--header-->
<div class="contents">
<!-- doxytag: class="ting::atomic::Flag" -->
<p>Atomic flag.  
 <a href="classting_1_1atomic_1_1Flag.htm#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="atomic_8hpp_source.htm">atomic.hpp</a>&gt;</code></p>

<p><a href="classting_1_1atomic_1_1Flag-members.htm">List of all members.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1atomic_1_1Flag.htm#acfec5a5260c5bedbf214984f7782e5e9">Flag</a> (bool initialValue=false)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructor.  <a href="#acfec5a5260c5bedbf214984f7782e5e9"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1atomic_1_1Flag.htm#a7ed5ef6ce39c333345ea72ece34718a2">Get</a> () const   throw ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the current flag value.  <a href="#a7ed5ef6ce39c333345ea72ece34718a2"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1atomic_1_1Flag.htm#aaf2f8d87fa57ffe254dc119360e48c18">Set</a> (bool value=true)  throw ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the flag value.  <a href="#aaf2f8d87fa57ffe254dc119360e48c18"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1atomic_1_1Flag.htm#a5838d3a1657d80c831ad5c2b41070762">SetAcquire</a> (bool value=true)  throw ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the flag value with acquire memory semantics.  <a href="#a5838d3a1657d80c831ad5c2b41070762"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1atomic_1_1Flag.htm#a9b015ecd14972135eacb1d54dabd713f">SetRelease</a> (bool value=true)  throw ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the flag value with release memory semantics.  <a href="#a9b015ecd14972135eacb1d54dabd713f"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1atomic_1_1Flag.htm#ac262ae8f3f66944c0fd0473768a70633">Clear</a> ()  throw ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Clear flag.  <a href="#ac262ae8f3f66944c0fd0473768a70633"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1atomic_1_1Flag.htm#a2dd931037077532c1714fb5824f2d30f">ClearAcquire</a> ()  throw ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Clear flag with acquire memory semantics.  <a href="#a2dd931037077532c1714fb5824f2d30f"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classting_1_1atomic_1_1Flag.htm#a1779f0ee6c9d1a7941259bb00ccb8068">ClearRelease</a> ()  throw ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Clear flag with release memory semantics.  <a href="#a1779f0ee6c9d1a7941259bb00ccb8068"></a><br/></td></tr>
</table>
<hr/><a name="details" id="details"></a><h2>Detailed Description</h2>
<div class="textblock"><p>Atomic flag. </p>
<p>Atomic flag is a bool-like value whose set and clear operations are atomic. </p>
</div><hr/><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="acfec5a5260c5bedbf214984f7782e5e9"></a><!-- doxytag: member="ting::atomic::Flag::Flag" ref="acfec5a5260c5bedbf214984f7782e5e9" args="(bool initialValue=false)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classting_1_1atomic_1_1Flag.htm#acfec5a5260c5bedbf214984f7782e5e9">ting::atomic::Flag::Flag</a> </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>initialValue</em> = <code>false</code></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Constructor. </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">initialValue</td><td>- initial value of the flag. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<hr/><h2>Member Function Documentation</h2>
<a class="anchor" id="ac262ae8f3f66944c0fd0473768a70633"></a><!-- doxytag: member="ting::atomic::Flag::Clear" ref="ac262ae8f3f66944c0fd0473768a70633" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classting_1_1atomic_1_1Flag.htm#ac262ae8f3f66944c0fd0473768a70633">ting::atomic::Flag::Clear</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td>  throw ()<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Clear flag. </p>
<p>Basically, it is equivalent to Flag::Set(false), but on some architectures its implementation can be faster. It does not set any memory barrier. </p>

</div>
</div>
<a class="anchor" id="a2dd931037077532c1714fb5824f2d30f"></a><!-- doxytag: member="ting::atomic::Flag::ClearAcquire" ref="a2dd931037077532c1714fb5824f2d30f" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classting_1_1atomic_1_1Flag.htm#a2dd931037077532c1714fb5824f2d30f">ting::atomic::Flag::ClearAcquire</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td>  throw ()<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Clear flag with acquire memory semantics. </p>
<p>Basically, it is equivalent to Flag::Set(false), but on some architectures its implementation can be faster. It sets acquire memory semantics barrier. It means that on weakly ordered architectures memory access operations which go after the <a class="el" href="classting_1_1atomic_1_1Flag.htm#a2dd931037077532c1714fb5824f2d30f" title="Clear flag with acquire memory semantics.">ClearAcquire()</a> will be executed exactly after it. </p>

</div>
</div>
<a class="anchor" id="a1779f0ee6c9d1a7941259bb00ccb8068"></a><!-- doxytag: member="ting::atomic::Flag::ClearRelease" ref="a1779f0ee6c9d1a7941259bb00ccb8068" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classting_1_1atomic_1_1Flag.htm#a1779f0ee6c9d1a7941259bb00ccb8068">ting::atomic::Flag::ClearRelease</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td>  throw ()<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Clear flag with release memory semantics. </p>
<p>Basically, it is equivalent to Flag::Set(false), but on some architectures its implementation can be faster. It sets release memory semantics barrier. It means that on weakly ordered architectures memory access operations which go before the <a class="el" href="classting_1_1atomic_1_1Flag.htm#a1779f0ee6c9d1a7941259bb00ccb8068" title="Clear flag with release memory semantics.">ClearRelease()</a> will be executed exactly before it. </p>

</div>
</div>
<a class="anchor" id="a7ed5ef6ce39c333345ea72ece34718a2"></a><!-- doxytag: member="ting::atomic::Flag::Get" ref="a7ed5ef6ce39c333345ea72ece34718a2" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classting_1_1atomic_1_1Flag.htm#a7ed5ef6ce39c333345ea72ece34718a2">ting::atomic::Flag::Get</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const  throw ()<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Gets the current flag value. </p>
<p>Note, that the returned value may be not actual, since the flag value can be changed in parallel. It does not set any memory barrier. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>current flag value. </dd></dl>

</div>
</div>
<a class="anchor" id="aaf2f8d87fa57ffe254dc119360e48c18"></a><!-- doxytag: member="ting::atomic::Flag::Set" ref="aaf2f8d87fa57ffe254dc119360e48c18" args="(bool value=true)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classting_1_1atomic_1_1Flag.htm#aaf2f8d87fa57ffe254dc119360e48c18">ting::atomic::Flag::Set</a> </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>value</em> = <code>true</code></td><td>)</td>
          <td>  throw ()<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set the flag value. </p>
<p>Sets the flag to the new value and returns its previous value as atomic operation. It does not set any memory barrier. </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>- the flag value to set. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>old flag value. </dd></dl>

</div>
</div>
<a class="anchor" id="a5838d3a1657d80c831ad5c2b41070762"></a><!-- doxytag: member="ting::atomic::Flag::SetAcquire" ref="a5838d3a1657d80c831ad5c2b41070762" args="(bool value=true)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classting_1_1atomic_1_1Flag.htm#a5838d3a1657d80c831ad5c2b41070762">ting::atomic::Flag::SetAcquire</a> </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>value</em> = <code>true</code></td><td>)</td>
          <td>  throw ()<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set the flag value with acquire memory semantics. </p>
<p>Sets the flag to the new value and returns its previous value as atomic operation. It sets acquire memory semantics barrier. It means that on weakly ordered architectures memory access operations which go after the <a class="el" href="classting_1_1atomic_1_1Flag.htm#a5838d3a1657d80c831ad5c2b41070762" title="Set the flag value with acquire memory semantics.">SetAcquire()</a> will not be executed before it. </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>- the flag value to set. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>old flag value. </dd></dl>

</div>
</div>
<a class="anchor" id="a9b015ecd14972135eacb1d54dabd713f"></a><!-- doxytag: member="ting::atomic::Flag::SetRelease" ref="a9b015ecd14972135eacb1d54dabd713f" args="(bool value=true)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classting_1_1atomic_1_1Flag.htm#a9b015ecd14972135eacb1d54dabd713f">ting::atomic::Flag::SetRelease</a> </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>value</em> = <code>true</code></td><td>)</td>
          <td>  throw ()<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set the flag value with release memory semantics. </p>
<p>Sets the flag to the new value and returns its previous value as atomic operation. It sets release memory semantics barrier. It means that on weakly ordered architectures memory access operations which go before the <a class="el" href="classting_1_1atomic_1_1Flag.htm#a9b015ecd14972135eacb1d54dabd713f" title="Set the flag value with release memory semantics.">SetRelease()</a> will not be executed after it. </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>- the flag value to set. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>old flag value. </dd></dl>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="atomic_8hpp_source.htm">atomic.hpp</a></li>
</ul>
</div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="namespaceting.htm">ting</a>      </li>
      <li class="navelem"><a class="el" href="namespaceting_1_1atomic.htm">atomic</a>      </li>
      <li class="navelem"><a class="el" href="classting_1_1atomic_1_1Flag.htm">Flag</a>      </li>

    <li class="footer">Generated on Thu Feb 21 2013 20:36:37 for libting by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
